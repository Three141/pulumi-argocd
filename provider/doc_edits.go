package argocd

import (
	"bytes"

	"github.com/pulumi/pulumi-terraform-bridge/v3/pkg/tfbridge"
)

func editRules(defaults []tfbridge.DocsEdit) []tfbridge.DocsEdit {
	return append(defaults,
		tfbridge.DocsEdit{
			Path: "*_token.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				fromBytes := []byte(
					"~> **Security Notice** The JWT token generated by this resource is treated as\n" +
						"sensitive and, thus, not displayed in console output. However, it will be stored\n" +
						"*unencrypted* in your Terraform state file. Read more about sensitive data\n" +
						"handling in the Terraform\n" +
						"documentation.",
				)

				return bytes.ReplaceAll(content, fromBytes, []byte("")), nil
			},
		},
		tfbridge.DocsEdit{
			Path: "account_token.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				content = bytes.ReplaceAll(content, []byte("Terraform"), []byte("Pulumi"))

				return content, nil
			},
		},
		tfbridge.DocsEdit{
			Path: "application.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				content = bytes.ReplaceAll(
					content,
					[]byte("Terraform Create, Update and Delete resource timeouts"),
					[]byte("the provider Create, Update and Delete resource timeouts"),
				)

				content = bytes.ReplaceAll(
					content,
					[]byte("yamlencode"),
					[]byte("jsonencode"),
				)

				return content, nil
			},
		},
		tfbridge.DocsEdit{
			Path: "project_token.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				content = bytes.ReplaceAll(content, []byte("Terraform will regenerate"), []byte("the provider will regenerate"))

				return content, nil
			},
		},
		tfbridge.DocsEdit{
			Path: "repository_credentials.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				content = bytes.ReplaceAll(
					content,
					[]byte("outside of Terraform"),
					[]byte("outside of Pulumi"),
				)

				return content, nil
			},
		},
		tfbridge.DocsEdit{
			Path: "repository_certificate.md",
			Edit: func(_ string, content []byte) ([]byte, error) {
				httpsFromBytes := []byte(
					"# HTTPS certificate\n" +
						"resource \"argocd_repository_certificate\" \"private-git-repository\" {",
				)
				httpsToBytes := []byte(
					"# HTTPS certificate\n" +
						"resource \"argocd_repository_certificate\" \"private-git-repository-https\" {",
				)
				content = bytes.ReplaceAll(content, httpsFromBytes, httpsToBytes)

				sshFromBytes := []byte(
					"# SSH certificate\n" +
						"resource \"argocd_repository_certificate\" \"private-git-repository\" {",
				)
				sshToBytes := []byte(
					"# SSH certificate\n" +
						"resource \"argocd_repository_certificate\" \"private-git-repository-ssh\" {",
				)
				content = bytes.ReplaceAll(content, sshFromBytes, sshToBytes)

				return content, nil
			},
		},
	)
}
