{
    "name": "argocd",
    "displayName": "Argo CD",
    "description": "A Pulumi package for creating and managing Argo CD resources.",
    "keywords": [
        "argocd",
        "category/cloud"
    ],
    "homepage": "https://argoproj.github.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`argocd` Terraform Provider](https://github.com/argoproj-labs/terraform-provider-argocd).",
    "repository": "https://github.com/Three141/pulumi-argocd",
    "logoUrl": "https://argo-cd.readthedocs.io/en/stable/assets/logo.png",
    "pluginDownloadURL": "https://github.com/Three141/pulumi-argocd/releases/download/v${VERSION}/",
    "publisher": "Three141",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Three14",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/Three141/pulumi-argocd/sdk/go/argocd",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@three14/pulumi-argocd",
            "packageDescription": "A Pulumi package for creating and managing Argo CD resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/argoproj-labs/terraform-provider-argocd)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-argocd` repo](https://github.com/Three141/pulumi-argocd/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-argocd` repo](https://github.com/argoproj-labs/terraform-provider-argocd/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "pulumi_argocd",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/argoproj-labs/terraform-provider-argocd)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-argocd` repo](https://github.com/Three141/pulumi-argocd/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-argocd` repo](https://github.com/argoproj-labs/terraform-provider-argocd/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "authToken": {
                "type": "string",
                "description": "ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`\nenvironment variable.\n",
                "secret": true
            },
            "certFile": {
                "type": "string",
                "description": "Additional root CA certificates file to add to the client TLS connection pool.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Client certificate.\n"
            },
            "clientCertKey": {
                "type": "string",
                "description": "Client certificate key.\n"
            },
            "configPath": {
                "type": "string",
                "description": "Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set\nthrough the `ARGOCD_CONFIG_PATH` environment variable.\n"
            },
            "context": {
                "type": "string",
                "description": "Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through\n`ARGOCD_CONTEXT` environment variable.\n"
            },
            "core": {
                "type": "boolean",
                "description": "Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API\nserver that talks directly to the Kubernetes API using the **current context in the default kubeconfig**\n(`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in\nthe provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the\nprovider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug\nthis. The error message will be similar to \u003e `The plugin encountered an error, and failed to respond to the\nplugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to\nlogin via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.\n"
            },
            "grpcWeb": {
                "type": "boolean",
                "description": "Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.\n"
            },
            "grpcWebRootPath": {
                "type": "string",
                "description": "Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a\nnon-root path.\n"
            },
            "headers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Additional headers to add to each request to the ArgoCD server.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.\n"
            },
            "kubernetes": {
                "$ref": "#/types/argocd:config/kubernetes:kubernetes",
                "description": "Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = \"foo\"`.\nThe kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment\nvariable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).\n"
            },
            "password": {
                "type": "string",
                "description": "Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.\n",
                "secret": true
            },
            "plainText": {
                "type": "boolean",
                "description": "Whether to initiate an unencrypted connection to ArgoCD server.\n"
            },
            "portForward": {
                "type": "boolean",
                "description": "Connect to a random argocd-server port using port forwarding.\n"
            },
            "portForwardWithNamespace": {
                "type": "string",
                "description": "Namespace name which should be used for port forwarding.\n"
            },
            "serverAddr": {
                "type": "string",
                "description": "ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.\n"
            },
            "useLocalConfig": {
                "type": "boolean",
                "description": "Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.\nConflicts with `auth_token`, `username` and `password`.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent request header override.\n"
            },
            "username": {
                "type": "string",
                "description": "Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.\n"
            }
        }
    },
    "types": {
        "argocd:config/kubernetes:kubernetes": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.\n",
                    "secret": true
                },
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.\n"
                },
                "configContext": {
                    "type": "string",
                    "description": "Context to choose from the config file. Can be sourced from `KUBE_CTX`.\n"
                },
                "configContextAuthInfo": {
                    "type": "string"
                },
                "configContextCluster": {
                    "type": "string"
                },
                "exec": {
                    "$ref": "#/types/argocd:config/kubernetesExec:kubernetesExec",
                    "description": "Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.\n"
                }
            },
            "type": "object"
        },
        "argocd:config/kubernetesExec:kubernetesExec": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Map of environment variables to set when executing the plugin.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of arguments to pass when executing the plugin.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "argocd:index/ApplicationMetadata:ApplicationMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "generation",
                        "name",
                        "namespace",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "argocd:index/ApplicationSetMetadata:ApplicationSetMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this applicationsets.argoproj.io that can be used by clients to determine when applicationsets.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this applicationsets.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "generation",
                        "name",
                        "namespace",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "argocd:index/ApplicationSetSpec:ApplicationSetSpec": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGenerator:ApplicationSetSpecGenerator"
                    },
                    "description": "Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.\n"
                },
                "goTemplate": {
                    "type": "boolean",
                    "description": "Enable use of [Go Text Template](https://pkg.go.dev/text/template).\n"
                },
                "goTemplateOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of [Go Templating Options](https://pkg.go.dev/text/template#Template.Option). Only relevant if `go_template` is true.\n"
                },
                "ignoreApplicationDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecIgnoreApplicationDifference:ApplicationSetSpecIgnoreApplicationDifference"
                    },
                    "description": "Application Set [ignoreApplicationDifferences](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/#ignore-certain-changes-to-applications).\n"
                },
                "strategy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecStrategy:ApplicationSetSpecStrategy",
                    "description": "[Progressive Sync](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/) strategy\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecSyncPolicy:ApplicationSetSpecSyncPolicy",
                    "description": "Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplate:ApplicationSetSpecTemplate",
                    "description": "Application set template. The template fields of the ApplicationSet spec are used to generate Argo CD Application resources.\n"
                },
                "templatePatch": {
                    "type": "string",
                    "description": "Application set template patch, as in the [Argo CD ApplicationSet spec](https://argocd-applicationset.readthedocs.io/en/stable/fields/#templatepatch).\n"
                }
            },
            "type": "object",
            "required": [
                "generators",
                "template"
            ]
        },
        "argocd:index/ApplicationSetSpecGenerator:ApplicationSetSpecGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorCluster:ApplicationSetSpecGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGit:ApplicationSetSpecGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorList:ApplicationSetSpecGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "matrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrix:ApplicationSetSpecGeneratorMatrix"
                    },
                    "description": "[Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.\n"
                },
                "merges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMerge:ApplicationSetSpecGeneratorMerge"
                    },
                    "description": "[Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequest:ApplicationSetSpecGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProvider:ApplicationSetSpecGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorSelector:ApplicationSetSpecGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorCluster:ApplicationSetSpecGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterSelector:ApplicationSetSpecGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplate:ApplicationSetSpecGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterSelector:ApplicationSetSpecGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplate:ApplicationSetSpecGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGit:ApplicationSetSpecGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitDirectory:ApplicationSetSpecGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitFile:ApplicationSetSpecGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplate:ApplicationSetSpecGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorGitDirectory:ApplicationSetSpecGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorGitFile:ApplicationSetSpecGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplate:ApplicationSetSpecGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorList:ApplicationSetSpecGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplate:ApplicationSetSpecGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplate:ApplicationSetSpecGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpec:ApplicationSetSpecGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpec:ApplicationSetSpecGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrix:ApplicationSetSpecGeneratorMatrix": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMatrixGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMatrixTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMatrixGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "matrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrix:ApplicationSetSpecGeneratorMatrixGeneratorMatrix"
                    },
                    "description": "[Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.\n"
                },
                "merges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMerge:ApplicationSetSpecGeneratorMatrixGeneratorMerge"
                    },
                    "description": "[Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrix:ApplicationSetSpecGeneratorMatrixGeneratorMatrix": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMerge:ApplicationSetSpecGeneratorMatrixGeneratorMerge": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator:ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.\n"
                },
                "mergeKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Keys to merge into resulting parameter set.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators",
                "mergeKeys"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator:ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMatrixGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMatrixGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMatrixGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMatrixTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMatrixTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMatrixTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMatrixTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMatrixTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMatrixTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMatrixTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMatrixTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMatrixTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMerge:ApplicationSetSpecGeneratorMerge": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGenerator:ApplicationSetSpecGeneratorMergeGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.\n"
                },
                "mergeKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Keys to merge into resulting parameter set.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplate:ApplicationSetSpecGeneratorMergeTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators",
                "mergeKeys"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGenerator:ApplicationSetSpecGeneratorMergeGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "matrices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrix:ApplicationSetSpecGeneratorMergeGeneratorMatrix"
                    },
                    "description": "[Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.\n"
                },
                "merges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMerge:ApplicationSetSpecGeneratorMergeGeneratorMerge"
                    },
                    "description": "[Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrix:ApplicationSetSpecGeneratorMergeGeneratorMatrix": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator:ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMerge:ApplicationSetSpecGeneratorMergeGeneratorMerge": {
            "properties": {
                "generators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator:ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator"
                    },
                    "description": "Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.\n"
                },
                "mergeKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Keys to merge into resulting parameter set.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "generators",
                "mergeKeys"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator:ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator": {
            "properties": {
                "clusterDecisionResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource"
                    },
                    "description": "The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster"
                    },
                    "description": "The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.\n"
                },
                "gits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit"
                    },
                    "description": "[Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).\n"
                },
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList"
                    },
                    "description": "[List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).\n"
                },
                "pullRequests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest"
                    },
                    "description": "[Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.\n"
                },
                "scmProviders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider"
                    },
                    "description": "[SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector",
                    "description": "The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.\n"
                },
                "selector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource": {
            "properties": {
                "configMapRef": {
                    "type": "string",
                    "description": "ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.\n"
                },
                "labelSelector": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector",
                    "description": "Label selector used to find the resource defined in the `config_map_ref`. Alternative to `name`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Resource name of the kind, group and version, defined in the `config_map_ref`.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs which are passed directly as parameters to the template.\n"
                }
            },
            "type": "object",
            "required": [
                "configMapRef"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit": {
            "properties": {
                "directories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory"
                    },
                    "description": "List of directories in the source repository to use when template the Application..\n"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile"
                    },
                    "description": "List of files in the source repository to use when template the Application.\n"
                },
                "pathParamPrefix": {
                    "type": "string",
                    "description": "Prefix for all path-related parameter names.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository to use.\n"
                },
                "revision": {
                    "type": "string",
                    "description": "Revision of the source repository to use.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                },
                "values": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Arbitrary string key-value pairs to pass to the template via the values field of the git generator.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory": {
            "properties": {
                "exclude": {
                    "type": "boolean",
                    "description": "Flag indicating whether or not the directory should be excluded when templating.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the file in the repository.\n"
                }
            },
            "type": "object",
            "required": [
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList": {
            "properties": {
                "elements": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "description": "List of key/value pairs to pass as parameters into the template\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object",
            "required": [
                "elements"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequest:ApplicationSetSpecGeneratorMergeGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProvider:ApplicationSetSpecGeneratorMergeGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorSelector:ApplicationSetSpecGeneratorMergeGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplate:ApplicationSetSpecGeneratorMergeTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMergeTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMergeTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateMetadata:ApplicationSetSpecGeneratorMergeTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpec:ApplicationSetSpecGeneratorMergeTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMergeTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMergeTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMergeTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecDestination:ApplicationSetSpecGeneratorMergeTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecInfo:ApplicationSetSpecGeneratorMergeTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSource:ApplicationSetSpecGeneratorMergeTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequest:ApplicationSetSpecGeneratorPullRequest": {
            "properties": {
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorPullRequestBitbucketServer",
                    "description": "Fetch pull requests from a repo hosted on a Bitbucket Server.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestFilter:ApplicationSetSpecGeneratorPullRequestFilter"
                    },
                    "description": "Filters allow selecting which pull requests to generate for.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGitea:ApplicationSetSpecGeneratorPullRequestGitea",
                    "description": "Specify the repository from which to fetch the Gitea Pull requests.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGithub:ApplicationSetSpecGeneratorPullRequestGithub",
                    "description": "Specify the repository from which to fetch the GitHub Pull requests.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorPullRequestGitlab",
                    "description": "Specify the project from which to fetch the GitLab merge requests.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 30min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorPullRequestTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServer:ApplicationSetSpecGeneratorPullRequestBitbucketServer": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Repo name to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth:ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestFilter:ApplicationSetSpecGeneratorPullRequestFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGitea:ApplicationSetSpecGeneratorPullRequestGitea": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The Gitea API URL to talk to.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow insecure tls, for self-signed certificates; default: false.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "Gitea repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorPullRequestGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGiteaTokenRef:ApplicationSetSpecGeneratorPullRequestGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGithub:ApplicationSetSpecGeneratorPullRequestGithub": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret with permission to access pull requests.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "GitHub org or user to scan.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "GitHub repo name to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorPullRequestGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "repo"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGithubTokenRef:ApplicationSetSpecGeneratorPullRequestGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGitlab:ApplicationSetSpecGeneratorPullRequestGitlab": {
            "properties": {
                "api": {
                    "type": "string",
                    "description": "The GitLab API URL to talk to. If blank, uses https://gitlab.com/.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Labels is used to filter the PRs that you want to target.\n"
                },
                "project": {
                    "type": "string",
                    "description": "GitLab project to scan.\n"
                },
                "pullRequestState": {
                    "type": "string",
                    "description": "additional MRs filter to get only those with a certain state. Default:  \"\" (all states).\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorPullRequestGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestGitlabTokenRef:ApplicationSetSpecGeneratorPullRequestGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplate:ApplicationSetSpecGeneratorPullRequestTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorPullRequestTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorPullRequestTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateMetadata:ApplicationSetSpecGeneratorPullRequestTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpec:ApplicationSetSpecGeneratorPullRequestTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorPullRequestTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination:ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo:ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSource:ApplicationSetSpecGeneratorPullRequestTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProvider:ApplicationSetSpecGeneratorScmProvider": {
            "properties": {
                "azureDevops": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorScmProviderAzureDevops",
                    "description": "Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.\n"
                },
                "bitbucketCloud": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorScmProviderBitbucketCloud",
                    "description": "Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.\n"
                },
                "bitbucketServer": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorScmProviderBitbucketServer",
                    "description": "Use the Bitbucket Server API (1.0) to scan repos in a project.\n"
                },
                "cloneProtocol": {
                    "type": "string",
                    "description": "Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.\n"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderFilter:ApplicationSetSpecGeneratorScmProviderFilter"
                    },
                    "description": "Filters for which repos should be considered.\n"
                },
                "gitea": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGitea:ApplicationSetSpecGeneratorScmProviderGitea",
                    "description": "Gitea mode uses the Gitea API to scan organizations in your instance.\n"
                },
                "github": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGithub:ApplicationSetSpecGeneratorScmProviderGithub",
                    "description": "Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.\n"
                },
                "gitlab": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorScmProviderGitlab",
                    "description": "Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.\n"
                },
                "requeueAfterSeconds": {
                    "type": "string",
                    "description": "How often to check for changes (in seconds). Default: 3min.\n"
                },
                "template": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorScmProviderTemplate",
                    "description": "Generator template. Used to override the values of the spec-level template.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderAzureDevops:ApplicationSetSpecGeneratorScmProviderAzureDevops": {
            "properties": {
                "accessTokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef",
                    "description": "The Personal Access Token (PAT) to use when connecting.\n"
                },
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The URL to Azure DevOps. Defaults to https://dev.azure.com.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "Azure Devops organization. E.g. \"my-organization\".\n"
                },
                "teamProject": {
                    "type": "string",
                    "description": "Azure Devops team project. E.g. \"my-team\".\n"
                }
            },
            "type": "object",
            "required": [
                "organization",
                "teamProject"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef:ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketCloud:ApplicationSetSpecGeneratorScmProviderBitbucketCloud": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "appPasswordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef",
                    "description": "The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Bitbucket workspace to scan.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Bitbucket user to use when authenticating. Should have a \"member\" role to be able to read all repositories and branches.\n"
                }
            },
            "type": "object",
            "required": [
                "owner",
                "user"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef:ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServer:ApplicationSetSpecGeneratorScmProviderBitbucketServer": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.\n"
                },
                "basicAuth": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth",
                    "description": "Credentials for Basic auth.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Project to scan.\n"
                }
            },
            "type": "object",
            "required": [
                "api",
                "project"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth:ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth": {
            "properties": {
                "passwordRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef",
                    "description": "Password (or personal access token) reference.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for Basic auth.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef:ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderFilter:ApplicationSetSpecGeneratorScmProviderFilter": {
            "properties": {
                "branchMatch": {
                    "type": "string",
                    "description": "A regex which must match the branch name.\n"
                },
                "labelMatch": {
                    "type": "string",
                    "description": "A regex which must match at least one label.\n"
                },
                "pathsDoNotExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must not exist.\n"
                },
                "pathsExists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of paths, all of which must exist.\n"
                },
                "repositoryMatch": {
                    "type": "string",
                    "description": "A regex for repo names.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGitea:ApplicationSetSpecGeneratorScmProviderGitea": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "Scan all branches instead of just the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitea URL to talk to. For example https://gitea.mydomain.com/.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Allow self-signed TLS / Certificates.\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Gitea organization or user to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorScmProviderGiteaTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "owner"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGiteaTokenRef:ApplicationSetSpecGeneratorScmProviderGiteaTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGithub:ApplicationSetSpecGeneratorScmProviderGithub": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The GitHub API URL to talk to. Default https://api.github.com/.\n"
                },
                "appSecretName": {
                    "type": "string",
                    "description": "Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.\n"
                },
                "organization": {
                    "type": "string",
                    "description": "GitHub org to scan.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorScmProviderGithubTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "organization"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGithubTokenRef:ApplicationSetSpecGeneratorScmProviderGithubTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGitlab:ApplicationSetSpecGeneratorScmProviderGitlab": {
            "properties": {
                "allBranches": {
                    "type": "boolean",
                    "description": "If true, scan every branch of every repository. If false, scan only the default branch.\n"
                },
                "api": {
                    "type": "string",
                    "description": "The Gitlab API URL to talk to.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.\n"
                },
                "includeSubgroups": {
                    "type": "boolean",
                    "description": "Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.\n"
                },
                "tokenRef": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorScmProviderGitlabTokenRef",
                    "description": "Authentication token reference.\n"
                }
            },
            "type": "object",
            "required": [
                "group"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderGitlabTokenRef:ApplicationSetSpecGeneratorScmProviderGitlabTokenRef": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key containing information in Kubernetes `Secret`.\n"
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of Kubernetes `Secret`.\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "secretName"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplate:ApplicationSetSpecGeneratorScmProviderTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorScmProviderTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorScmProviderTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateMetadata:ApplicationSetSpecGeneratorScmProviderTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpec:ApplicationSetSpecGeneratorScmProviderTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorScmProviderTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination:ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference:ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo:ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSource:ApplicationSetSpecGeneratorScmProviderTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv:ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorSelector:ApplicationSetSpecGeneratorSelector": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorSelectorMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "matchLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecGeneratorSelectorMatchExpression:ApplicationSetSpecGeneratorSelectorMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecIgnoreApplicationDifference:ApplicationSetSpecIgnoreApplicationDifference": {
            "properties": {
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "jq path to ignore differences\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Json pointers to ignore differences\n"
                },
                "name": {
                    "type": "string",
                    "description": "name\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecStrategy:ApplicationSetSpecStrategy": {
            "properties": {
                "rollingSyncs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecStrategyRollingSync:ApplicationSetSpecStrategyRollingSync"
                    },
                    "description": "Update strategy allowing you to group Applications by labels present on the generated Application resources. When the ApplicationSet changes, the changes will be applied to each group of Application resources sequentially.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of progressive sync.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "argocd:index/ApplicationSetSpecStrategyRollingSync:ApplicationSetSpecStrategyRollingSync": {
            "properties": {
                "steps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecStrategyRollingSyncStep:ApplicationSetSpecStrategyRollingSyncStep"
                    },
                    "description": "Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.\n"
                }
            },
            "type": "object",
            "required": [
                "steps"
            ]
        },
        "argocd:index/ApplicationSetSpecStrategyRollingSyncStep:ApplicationSetSpecStrategyRollingSyncStep": {
            "properties": {
                "matchExpressions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecStrategyRollingSyncStepMatchExpression:ApplicationSetSpecStrategyRollingSyncStepMatchExpression"
                    },
                    "description": "A list of label selector requirements. The requirements are ANDed.\n"
                },
                "maxUpdate": {
                    "type": "string",
                    "description": "Maximum number of simultaneous Application updates in a group. Supports both integer and percentage string values (rounds down, but floored at 1 Application for \u003e0%). Default is 100%, unbounded.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecStrategyRollingSyncStepMatchExpression:ApplicationSetSpecStrategyRollingSyncStepMatchExpression": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The label key that the selector applies to.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.\n"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecSyncPolicy:ApplicationSetSpecSyncPolicy": {
            "properties": {
                "applicationsSync": {
                    "type": "string",
                    "description": "Represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, and sync.\n"
                },
                "preserveResourcesOnDeletion": {
                    "type": "boolean",
                    "description": "Label selector used to narrow the scope of targeted clusters.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplate:ApplicationSetSpecTemplate": {
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateMetadata:ApplicationSetSpecTemplateMetadata",
                    "description": "Kubernetes object metadata for templated Application.\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpec:ApplicationSetSpecTemplateSpec",
                    "description": "The application specification.\n"
                }
            },
            "type": "object",
            "required": [
                "metadata",
                "spec"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateMetadata:ApplicationSetSpecTemplateMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.\n"
                },
                "finalizers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of finalizers to apply to the resulting Application.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the resulting Application\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the resulting Application\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateSpec:ApplicationSetSpecTemplateSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecDestination:ApplicationSetSpecTemplateSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecIgnoreDifference:ApplicationSetSpecTemplateSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecInfo:ApplicationSetSpecTemplateSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSource:ApplicationSetSpecTemplateSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSyncPolicy:ApplicationSetSpecTemplateSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "sources"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateSpecDestination:ApplicationSetSpecTemplateSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecIgnoreDifference:ApplicationSetSpecTemplateSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecInfo:ApplicationSetSpecTemplateSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSource:ApplicationSetSpecTemplateSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceDirectory:ApplicationSetSpecTemplateSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceHelm:ApplicationSetSpecTemplateSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceKustomize:ApplicationSetSpecTemplateSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourcePlugin:ApplicationSetSpecTemplateSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceDirectory:ApplicationSetSpecTemplateSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla:ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceHelm:ApplicationSetSpecTemplateSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceHelmFileParameter:ApplicationSetSpecTemplateSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceHelmParameter:ApplicationSetSpecTemplateSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceHelmFileParameter:ApplicationSetSpecTemplateSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceHelmParameter:ApplicationSetSpecTemplateSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceKustomize:ApplicationSetSpecTemplateSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceKustomizePatch:ApplicationSetSpecTemplateSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceKustomizePatch:ApplicationSetSpecTemplateSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget:ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourcePlugin:ApplicationSetSpecTemplateSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSourcePluginEnv:ApplicationSetSpecTemplateSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSourcePluginEnv:ApplicationSetSpecTemplateSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSyncPolicy:ApplicationSetSpecTemplateSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyAutomated:ApplicationSetSpecTemplateSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyRetry:ApplicationSetSpecTemplateSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyAutomated:ApplicationSetSpecTemplateSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata:ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyRetry:ApplicationSetSpecTemplateSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff:ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpec:ApplicationSpec": {
            "properties": {
                "destination": {
                    "$ref": "#/types/argocd:index/ApplicationSpecDestination:ApplicationSpecDestination",
                    "description": "Reference to the Kubernetes server and namespace in which the application will be deployed.\n"
                },
                "ignoreDifferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecIgnoreDifference:ApplicationSpecIgnoreDifference"
                    },
                    "description": "Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecInfo:ApplicationSpecInfo"
                    },
                    "description": "List of information (URLs, email addresses, and plain text) that relates to the application.\n"
                },
                "project": {
                    "type": "string",
                    "description": "The project the application belongs to. Defaults to `default`.\n"
                },
                "revisionHistoryLimit": {
                    "type": "integer",
                    "description": "Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSource:ApplicationSpecSource"
                    },
                    "description": "Location of the application's manifests or chart.\n"
                },
                "syncPolicy": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSyncPolicy:ApplicationSpecSyncPolicy",
                    "description": "Controls when and how a sync will be performed.\n"
                }
            },
            "type": "object",
            "required": [
                "destination",
                "sources"
            ]
        },
        "argocd:index/ApplicationSpecDestination:ApplicationSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the target cluster. Can be used instead of `server`.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecIgnoreDifference:ApplicationSpecIgnoreDifference": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "jqPathExpressions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JQ path expression strings targeting the field(s) to ignore.\n"
                },
                "jsonPointers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSONPaths strings targeting the field(s) to ignore.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "managedFieldsManagers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of external controller manager names whose changes to fields should be ignored.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecInfo:ApplicationSpecInfo": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the information.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the information.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSource:ApplicationSpecSource": {
            "properties": {
                "chart": {
                    "type": "string",
                    "description": "Helm chart name. Must be specified for applications sourced from a Helm repo.\n"
                },
                "directory": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourceDirectory:ApplicationSpecSourceDirectory",
                    "description": "Path/directory specific options.\n"
                },
                "helm": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourceHelm:ApplicationSpecSourceHelm",
                    "description": "Helm specific options.\n"
                },
                "kustomize": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourceKustomize:ApplicationSpecSourceKustomize",
                    "description": "Kustomize specific options.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Directory path within the repository. Only valid for applications sourced from Git.\n"
                },
                "plugin": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourcePlugin:ApplicationSpecSourcePlugin",
                    "description": "Config management plugin specific options.\n"
                },
                "ref": {
                    "type": "string",
                    "description": "Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.\n"
                },
                "repoUrl": {
                    "type": "string",
                    "description": "URL to the repository (Git or Helm) that contains the application manifests.\n"
                },
                "targetRevision": {
                    "type": "string",
                    "description": "Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.\n"
                }
            },
            "type": "object",
            "required": [
                "repoUrl"
            ]
        },
        "argocd:index/ApplicationSpecSourceDirectory:ApplicationSpecSourceDirectory": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'\n"
                },
                "include": {
                    "type": "string",
                    "description": "Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'\n"
                },
                "jsonnet": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourceDirectoryJsonnet:ApplicationSpecSourceDirectoryJsonnet",
                    "description": "Jsonnet specific options.\n"
                },
                "recurse": {
                    "type": "boolean",
                    "description": "Whether to scan a directory recursively for manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceDirectoryJsonnet:ApplicationSpecSourceDirectoryJsonnet": {
            "properties": {
                "extVars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourceDirectoryJsonnetExtVar:ApplicationSpecSourceDirectoryJsonnetExtVar"
                    },
                    "description": "List of Jsonnet External Variables.\n"
                },
                "libs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Additional library search dirs.\n"
                },
                "tlas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourceDirectoryJsonnetTla:ApplicationSpecSourceDirectoryJsonnetTla"
                    },
                    "description": "List of Jsonnet Top-level Arguments\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceDirectoryJsonnetExtVar:ApplicationSpecSourceDirectoryJsonnetExtVar": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceDirectoryJsonnetTla:ApplicationSpecSourceDirectoryJsonnetTla": {
            "properties": {
                "code": {
                    "type": "boolean",
                    "description": "Determines whether the variable should be evaluated as jsonnet code or treated as string.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of Jsonnet variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of Jsonnet variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceHelm:ApplicationSpecSourceHelm": {
            "properties": {
                "fileParameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourceHelmFileParameter:ApplicationSpecSourceHelmFileParameter"
                    },
                    "description": "File parameters for the helm template.\n"
                },
                "ignoreMissingValueFiles": {
                    "type": "boolean",
                    "description": "Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.\n"
                },
                "parameters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourceHelmParameter:ApplicationSpecSourceHelmParameter"
                    },
                    "description": "Helm parameters which are passed to the helm template command upon manifest generation.\n"
                },
                "passCredentials": {
                    "type": "boolean",
                    "description": "If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.\n"
                },
                "releaseName": {
                    "type": "string",
                    "description": "Helm release name. If omitted it will use the application name.\n"
                },
                "skipCrds": {
                    "type": "boolean",
                    "description": "Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).\n"
                },
                "valueFiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Helm value files to use when generating a template.\n"
                },
                "values": {
                    "type": "string",
                    "description": "Helm values to be passed to 'helm template', typically defined as a block.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Helm version to use for templating. Accepts either `v2` or `v3`\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceHelmFileParameter:ApplicationSpecSourceHelmFileParameter": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to the file containing the values for the Helm parameter.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "path"
            ]
        },
        "argocd:index/ApplicationSpecSourceHelmParameter:ApplicationSpecSourceHelmParameter": {
            "properties": {
                "forceString": {
                    "type": "boolean",
                    "description": "Determines whether to tell Helm to interpret booleans and numbers as strings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Helm parameter.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the Helm parameter.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceKustomize:ApplicationSpecSourceKustomize": {
            "properties": {
                "commonAnnotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional annotations to add to rendered manifests.\n"
                },
                "commonLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of additional labels to add to rendered manifests.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of Kustomize image override specifications.\n"
                },
                "namePrefix": {
                    "type": "string",
                    "description": "Prefix appended to resources for Kustomize apps.\n"
                },
                "nameSuffix": {
                    "type": "string",
                    "description": "Suffix appended to resources for Kustomize apps.\n"
                },
                "patches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourceKustomizePatch:ApplicationSpecSourceKustomizePatch"
                    },
                    "description": "A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of Kustomize to use for rendering manifests.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourceKustomizePatch:ApplicationSpecSourceKustomizePatch": {
            "properties": {
                "options": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "boolean"
                    },
                    "description": "Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).\n"
                },
                "patch": {
                    "type": "string",
                    "description": "Inline Kustomize patch to apply.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to a file containing the patch to apply.\n"
                },
                "target": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSourceKustomizePatchTarget:ApplicationSpecSourceKustomizePatchTarget",
                    "description": "Target(s) to patch\n"
                }
            },
            "type": "object",
            "required": [
                "target"
            ]
        },
        "argocd:index/ApplicationSpecSourceKustomizePatchTarget:ApplicationSpecSourceKustomizePatchTarget": {
            "properties": {
                "annotationSelector": {
                    "type": "string",
                    "description": "Annotation selector to use when matching the Kubernetes resource.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "labelSelector": {
                    "type": "string",
                    "description": "Label selector to use when matching the Kubernetes resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name to match for.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace to match for.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourcePlugin:ApplicationSpecSourcePlugin": {
            "properties": {
                "envs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationSpecSourcePluginEnv:ApplicationSpecSourcePluginEnv"
                    },
                    "description": "Environment variables passed to the plugin.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSourcePluginEnv:ApplicationSpecSourcePluginEnv": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the environment variable.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the environment variable.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSyncPolicy:ApplicationSpecSyncPolicy": {
            "properties": {
                "automated": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSyncPolicyAutomated:ApplicationSpecSyncPolicyAutomated",
                    "description": "Whether to automatically keep an application synced to the target revision.\n"
                },
                "managedNamespaceMetadata": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSyncPolicyManagedNamespaceMetadata:ApplicationSpecSyncPolicyManagedNamespaceMetadata",
                    "description": "Controls metadata in the given namespace (if `CreateNamespace=true`).\n"
                },
                "retry": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSyncPolicyRetry:ApplicationSpecSyncPolicyRetry",
                    "description": "Controls failed sync retry behavior.\n"
                },
                "syncOptions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSyncPolicyAutomated:ApplicationSpecSyncPolicyAutomated": {
            "properties": {
                "allowEmpty": {
                    "type": "boolean",
                    "description": "Allows apps have zero live resources.\n"
                },
                "prune": {
                    "type": "boolean",
                    "description": "Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.\n"
                },
                "selfHeal": {
                    "type": "boolean",
                    "description": "Whether to revert resources back to their desired state upon modification in the cluster.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSyncPolicyManagedNamespaceMetadata:ApplicationSpecSyncPolicyManagedNamespaceMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Annotations to apply to the namespace.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to apply to the namespace.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSyncPolicyRetry:ApplicationSpecSyncPolicyRetry": {
            "properties": {
                "backoff": {
                    "$ref": "#/types/argocd:index/ApplicationSpecSyncPolicyRetryBackoff:ApplicationSpecSyncPolicyRetryBackoff",
                    "description": "Controls how to backoff on subsequent retries of failed syncs.\n"
                },
                "limit": {
                    "type": "string",
                    "description": "Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationSpecSyncPolicyRetryBackoff:ApplicationSpecSyncPolicyRetryBackoff": {
            "properties": {
                "duration": {
                    "type": "string",
                    "description": "Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                },
                "factor": {
                    "type": "string",
                    "description": "Factor to multiply the base duration after each failed retry.\n"
                },
                "maxDuration": {
                    "type": "string",
                    "description": "Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ApplicationStatus:ApplicationStatus": {
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusCondition:ApplicationStatusCondition"
                    },
                    "description": "List of currently observed application conditions.\n"
                },
                "healths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusHealth:ApplicationStatusHealth"
                    },
                    "description": "Application's current health status.\n"
                },
                "operationStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusOperationState:ApplicationStatusOperationState"
                    },
                    "description": "Information about any ongoing operations, such as a sync.\n"
                },
                "reconciledAt": {
                    "type": "string",
                    "description": "When the application state was reconciled using the latest git version.\n"
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusResource:ApplicationStatusResource"
                    },
                    "description": "List of Kubernetes resources managed by this application.\n"
                },
                "summaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusSummary:ApplicationStatusSummary"
                    },
                    "description": "List of URLs and container images used by this application.\n"
                },
                "syncs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusSync:ApplicationStatusSync"
                    },
                    "description": "Application's current sync status\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "conditions",
                        "healths",
                        "operationStates",
                        "reconciledAt",
                        "resources",
                        "summaries",
                        "syncs"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusCondition:ApplicationStatusCondition": {
            "properties": {
                "lastTransitionTime": {
                    "type": "string",
                    "description": "The time the condition was last observed.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Human-readable message indicating details about condition.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Application condition type.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lastTransitionTime",
                        "message",
                        "type"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusHealth:ApplicationStatusHealth": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Human-readable informational message describing the health status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status code of the application or resource.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "status"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusOperationState:ApplicationStatusOperationState": {
            "properties": {
                "finishedAt": {
                    "type": "string",
                    "description": "Time of operation completion.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Any pertinent messages when attempting to perform operation (typically errors).\n"
                },
                "phase": {
                    "type": "string",
                    "description": "The current phase of the operation.\n"
                },
                "retryCount": {
                    "type": "string",
                    "description": "Count of operation retries.\n"
                },
                "startedAt": {
                    "type": "string",
                    "description": "Time of operation start.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "finishedAt",
                        "message",
                        "phase",
                        "retryCount",
                        "startedAt"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusResource:ApplicationStatusResource": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group.\n"
                },
                "healths": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatusResourceHealth:ApplicationStatusResourceHealth"
                    },
                    "description": "Resource health status.\n"
                },
                "hook": {
                    "type": "boolean",
                    "description": "Indicates whether or not this resource has a hook annotation.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource Name.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The Kubernetes resource Namespace.\n"
                },
                "requiresPruning": {
                    "type": "boolean",
                    "description": "Indicates if the resources requires pruning or not.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Resource sync status.\n"
                },
                "syncWave": {
                    "type": "string",
                    "description": "Sync wave.\n"
                },
                "version": {
                    "type": "string",
                    "description": "The Kubernetes resource Version.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "group",
                        "healths",
                        "hook",
                        "kind",
                        "name",
                        "namespace",
                        "requiresPruning",
                        "status",
                        "syncWave",
                        "version"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusResourceHealth:ApplicationStatusResourceHealth": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Human-readable informational message describing the health status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status code of the application or resource.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "status"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusSummary:ApplicationStatusSummary": {
            "properties": {
                "externalUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "All external URLs of application child resources.\n"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "All images of application child resources.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "externalUrls",
                        "images"
                    ]
                }
            }
        },
        "argocd:index/ApplicationStatusSync:ApplicationStatusSync": {
            "properties": {
                "revision": {
                    "type": "string",
                    "description": "Information about the revision the comparison has been performed to.\n"
                },
                "revisions": {
                    "type": "array",
                    "items": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Information about the revision(s) the comparison has been performed to.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Sync state of the comparison.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "revision",
                        "revisions",
                        "status"
                    ]
                }
            }
        },
        "argocd:index/ClusterConfig:ClusterConfig": {
            "properties": {
                "awsAuthConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ClusterConfigAwsAuthConfig:ClusterConfigAwsAuthConfig"
                    }
                },
                "bearerToken": {
                    "type": "string",
                    "description": "Server requires Bearer authentication. The client will not attempt to use refresh tokens for an OAuth2 flow.\n",
                    "secret": true
                },
                "execProviderConfig": {
                    "$ref": "#/types/argocd:index/ClusterConfigExecProviderConfig:ClusterConfigExecProviderConfig",
                    "description": "Configuration for an exec provider used to call an external command to perform cluster authentication See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for servers that require Basic authentication.\n",
                    "secret": true
                },
                "tlsClientConfig": {
                    "$ref": "#/types/argocd:index/ClusterConfigTlsClientConfig:ClusterConfigTlsClientConfig",
                    "description": "Settings to enable transport layer security when connecting to the cluster.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for servers that require Basic authentication.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ClusterConfigAwsAuthConfig:ClusterConfigAwsAuthConfig": {
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "AWS cluster name.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "IAM role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ClusterConfigExecProviderConfig:ClusterConfigExecProviderConfig": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "Preferred input version of the ExecInfo\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arguments to pass to the command when executing it\n",
                    "secret": true
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Env defines additional environment variables to expose to the process. Passed as a map of strings\n",
                    "secret": true
                },
                "installHint": {
                    "type": "string",
                    "description": "This text is shown to the user when the executable doesn't seem to be present\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ClusterConfigTlsClientConfig:ClusterConfigTlsClientConfig": {
            "properties": {
                "caData": {
                    "type": "string",
                    "description": "PEM-encoded bytes (typically read from a root certificates bundle).\n"
                },
                "certData": {
                    "type": "string",
                    "description": "PEM-encoded bytes (typically read from a client certificate file).\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether server should be accessed without verifying the TLS certificate.\n"
                },
                "keyData": {
                    "type": "string",
                    "description": "PEM-encoded bytes (typically read from a client certificate key file).\n",
                    "secret": true
                },
                "serverName": {
                    "type": "string",
                    "description": "Name to pass to the server for SNI and used in the client to check server certificates against. If empty, the hostname used to contact the server is used.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ClusterInfo:ClusterInfo": {
            "properties": {
                "applicationsCount": {
                    "type": "string",
                    "description": "Number of applications managed by Argo CD on the cluster.\n"
                },
                "connectionStates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ClusterInfoConnectionState:ClusterInfoConnectionState"
                    },
                    "description": "Information about the connection to the cluster.\n"
                },
                "serverVersion": {
                    "type": "string",
                    "description": "Kubernetes version of the cluster.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationsCount",
                        "connectionStates",
                        "serverVersion"
                    ]
                }
            }
        },
        "argocd:index/ClusterInfoConnectionState:ClusterInfoConnectionState": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Human readable information about the connection status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status indicator for the connection.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "message",
                        "status"
                    ]
                }
            }
        },
        "argocd:index/ClusterMetadata:ClusterMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectMetadata:ProjectMetadata": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "A sequence number representing a specific generation of the desired state.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\n",
                    "willReplaceOnChanges": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\n",
                    "willReplaceOnChanges": true
                },
                "resourceVersion": {
                    "type": "string",
                    "description": "An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "generation",
                        "name",
                        "namespace",
                        "resourceVersion",
                        "uid"
                    ]
                }
            }
        },
        "argocd:index/ProjectSpec:ProjectSpec": {
            "properties": {
                "clusterResourceBlacklists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecClusterResourceBlacklist:ProjectSpecClusterResourceBlacklist"
                    },
                    "description": "Blacklisted cluster level resources.\n"
                },
                "clusterResourceWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecClusterResourceWhitelist:ProjectSpecClusterResourceWhitelist"
                    },
                    "description": "Whitelisted cluster level resources.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Project description.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecDestination:ProjectSpecDestination"
                    },
                    "description": "Destinations available for deployment.\n"
                },
                "namespaceResourceBlacklists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecNamespaceResourceBlacklist:ProjectSpecNamespaceResourceBlacklist"
                    },
                    "description": "Blacklisted namespace level resources.\n"
                },
                "namespaceResourceWhitelists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecNamespaceResourceWhitelist:ProjectSpecNamespaceResourceWhitelist"
                    },
                    "description": "Whitelisted namespace level resources.\n"
                },
                "orphanedResources": {
                    "$ref": "#/types/argocd:index/ProjectSpecOrphanedResources:ProjectSpecOrphanedResources",
                    "description": "Settings specifying if controller should monitor orphaned resources of apps in this project.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecRole:ProjectSpecRole"
                    },
                    "description": "User defined RBAC roles associated with this project.\n"
                },
                "signatureKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.\n"
                },
                "sourceNamespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces that application resources are allowed to be created in.\n"
                },
                "sourceRepos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of repository URLs which can be used for deployment. Can be set to `[\"*\"]` to allow all configured repositories configured in ArgoCD.\n"
                },
                "syncWindows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecSyncWindow:ProjectSpecSyncWindow"
                    },
                    "description": "Settings controlling when syncs can be run for apps in this project.\n"
                }
            },
            "type": "object",
            "required": [
                "destinations",
                "sourceRepos"
            ]
        },
        "argocd:index/ProjectSpecClusterResourceBlacklist:ProjectSpecClusterResourceBlacklist": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecClusterResourceWhitelist:ProjectSpecClusterResourceWhitelist": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecDestination:ProjectSpecDestination": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the destination cluster which can be used instead of server.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Target namespace for applications' resources.\n"
                },
                "server": {
                    "type": "string",
                    "description": "URL of the target cluster and must be set to the Kubernetes control plane API.\n"
                }
            },
            "type": "object",
            "required": [
                "namespace"
            ]
        },
        "argocd:index/ProjectSpecNamespaceResourceBlacklist:ProjectSpecNamespaceResourceBlacklist": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecNamespaceResourceWhitelist:ProjectSpecNamespaceResourceWhitelist": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecOrphanedResources:ProjectSpecOrphanedResources": {
            "properties": {
                "ignores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ProjectSpecOrphanedResourcesIgnore:ProjectSpecOrphanedResourcesIgnore"
                    }
                },
                "warn": {
                    "type": "boolean",
                    "description": "Whether a warning condition should be created for apps which have orphaned resources.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecOrphanedResourcesIgnore:ProjectSpecOrphanedResourcesIgnore": {
            "properties": {
                "group": {
                    "type": "string",
                    "description": "The Kubernetes resource Group to match for.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The Kubernetes resource Kind to match for.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Kubernetes resource name to match for.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProjectSpecRole:ProjectSpecRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of OIDC group claims bound to this role.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the role.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "policies"
            ]
        },
        "argocd:index/ProjectSpecSyncWindow:ProjectSpecSyncWindow": {
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of applications that the window will apply to.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of clusters that the window will apply to.\n"
                },
                "duration": {
                    "type": "string",
                    "description": "Amount of time the sync window will be open.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Defines if the window allows or blocks syncs, allowed values are `allow` or `deny`.\n"
                },
                "manualSync": {
                    "type": "boolean",
                    "description": "Enables manual syncs when they would otherwise be blocked.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces that the window will apply to.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Time the window will begin, specified in cron format.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Timezone that the schedule will be evaluated in.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProviderKubernetes:ProviderKubernetes": {
            "properties": {
                "clientCertificate": {
                    "type": "string",
                    "description": "PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.\n",
                    "secret": true
                },
                "clusterCaCertificate": {
                    "type": "string",
                    "description": "PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.\n"
                },
                "configContext": {
                    "type": "string",
                    "description": "Context to choose from the config file. Can be sourced from `KUBE_CTX`.\n"
                },
                "configContextAuthInfo": {
                    "type": "string"
                },
                "configContextCluster": {
                    "type": "string"
                },
                "exec": {
                    "$ref": "#/types/argocd:index/ProviderKubernetesExec:ProviderKubernetesExec",
                    "description": "Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.\n"
                }
            },
            "type": "object"
        },
        "argocd:index/ProviderKubernetesExec:ProviderKubernetesExec": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.\n"
                },
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Map of environment variables to set when executing the plugin.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Command to execute.\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of arguments to pass when executing the plugin.\n"
                }
            },
            "type": "object",
            "required": [
                "apiVersion",
                "command"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": []
                }
            }
        },
        "argocd:index/RepositoryCertificateHttps:RepositoryCertificateHttps": {
            "properties": {
                "certData": {
                    "type": "string",
                    "description": "The actual certificate data, dependent on the certificate type.\n",
                    "willReplaceOnChanges": true
                },
                "certInfo": {
                    "type": "string",
                    "description": "Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).\n"
                },
                "certSubtype": {
                    "type": "string",
                    "description": "The sub type of the cert, i.e. `ssh-rsa`.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "DNS name of the server this certificate is intended for.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "certData",
                "serverName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certData",
                        "certInfo",
                        "certSubtype",
                        "serverName"
                    ]
                }
            }
        },
        "argocd:index/RepositoryCertificateSsh:RepositoryCertificateSsh": {
            "properties": {
                "certData": {
                    "type": "string",
                    "description": "The actual certificate data, dependent on the certificate type.\n",
                    "willReplaceOnChanges": true
                },
                "certInfo": {
                    "type": "string",
                    "description": "Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).\n"
                },
                "certSubtype": {
                    "type": "string",
                    "description": "The sub type of the cert, i.e. `ssh-rsa`.\n",
                    "willReplaceOnChanges": true
                },
                "serverName": {
                    "type": "string",
                    "description": "DNS name of the server this certificate is intended for.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "certData",
                "certSubtype",
                "serverName"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "certData",
                        "certInfo",
                        "certSubtype",
                        "serverName"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the argocd package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "authToken": {
                "type": "string",
                "description": "ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`\nenvironment variable.\n",
                "secret": true
            },
            "certFile": {
                "type": "string",
                "description": "Additional root CA certificates file to add to the client TLS connection pool.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Client certificate.\n"
            },
            "clientCertKey": {
                "type": "string",
                "description": "Client certificate key.\n"
            },
            "configPath": {
                "type": "string",
                "description": "Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set\nthrough the `ARGOCD_CONFIG_PATH` environment variable.\n"
            },
            "context": {
                "type": "string",
                "description": "Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through\n`ARGOCD_CONTEXT` environment variable.\n"
            },
            "core": {
                "type": "boolean",
                "description": "Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API\nserver that talks directly to the Kubernetes API using the **current context in the default kubeconfig**\n(`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in\nthe provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the\nprovider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug\nthis. The error message will be similar to \u003e `The plugin encountered an error, and failed to respond to the\nplugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to\nlogin via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.\n"
            },
            "grpcWeb": {
                "type": "boolean",
                "description": "Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.\n"
            },
            "grpcWebRootPath": {
                "type": "string",
                "description": "Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a\nnon-root path.\n"
            },
            "headers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Additional headers to add to each request to the ArgoCD server.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.\n"
            },
            "kubernetes": {
                "$ref": "#/types/argocd:index/ProviderKubernetes:ProviderKubernetes",
                "description": "Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = \"foo\"`.\nThe kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment\nvariable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).\n"
            },
            "password": {
                "type": "string",
                "description": "Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.\n",
                "secret": true
            },
            "plainText": {
                "type": "boolean",
                "description": "Whether to initiate an unencrypted connection to ArgoCD server.\n"
            },
            "portForward": {
                "type": "boolean",
                "description": "Connect to a random argocd-server port using port forwarding.\n"
            },
            "portForwardWithNamespace": {
                "type": "string",
                "description": "Namespace name which should be used for port forwarding.\n"
            },
            "serverAddr": {
                "type": "string",
                "description": "ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.\n"
            },
            "useLocalConfig": {
                "type": "boolean",
                "description": "Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.\nConflicts with `auth_token`, `username` and `password`.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent request header override.\n"
            },
            "username": {
                "type": "string",
                "description": "Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.\n"
            }
        },
        "inputProperties": {
            "authToken": {
                "type": "string",
                "description": "ArgoCD authentication token, takes precedence over `username`/`password`. Can be set through the `ARGOCD_AUTH_TOKEN`\nenvironment variable.\n",
                "secret": true
            },
            "certFile": {
                "type": "string",
                "description": "Additional root CA certificates file to add to the client TLS connection pool.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Client certificate.\n"
            },
            "clientCertKey": {
                "type": "string",
                "description": "Client certificate key.\n"
            },
            "configPath": {
                "type": "string",
                "description": "Override the default config path of `$HOME/.config/argocd/config`. Only relevant when `use_local_config`. Can be set\nthrough the `ARGOCD_CONFIG_PATH` environment variable.\n"
            },
            "context": {
                "type": "string",
                "description": "Context to choose when using a local ArgoCD config file. Only relevant when `use_local_config`. Can be set through\n`ARGOCD_CONTEXT` environment variable.\n"
            },
            "core": {
                "type": "boolean",
                "description": "Configure direct access using Kubernetes API server. **Warning**: this feature works by starting a local ArgoCD API\nserver that talks directly to the Kubernetes API using the **current context in the default kubeconfig**\n(`~/.kube/config`). This behavior cannot be overridden using either environment variables or the `kubernetes` block in\nthe provider configuration at present). If the server fails to start (e.g. your kubeconfig is misconfigured) then the\nprovider will fail as a result of the `argocd` module forcing it to exit and no logs will be available to help you debug\nthis. The error message will be similar to \u003e `The plugin encountered an error, and failed to respond to the\nplugin.(*GRPCProvider).ReadResource call. The plugin logs may contain more details.` To debug this, you will need to\nlogin via the ArgoCD CLI using `argocd login --core` and then running an operation. E.g. `argocd app list`.\n"
            },
            "grpcWeb": {
                "type": "boolean",
                "description": "Whether to use gRPC web proxy client. Useful if Argo CD server is behind proxy which does not support HTTP2.\n"
            },
            "grpcWebRootPath": {
                "type": "string",
                "description": "Use the gRPC web proxy client and set the web root, e.g. `argo-cd`. Useful if the Argo CD server is behind a proxy at a\nnon-root path.\n"
            },
            "headers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "Additional headers to add to each request to the ArgoCD server.\n"
            },
            "insecure": {
                "type": "boolean",
                "description": "Whether to skip TLS server certificate. Can be set through the `ARGOCD_INSECURE` environment variable.\n"
            },
            "kubernetes": {
                "$ref": "#/types/argocd:index/ProviderKubernetes:ProviderKubernetes",
                "description": "Kubernetes configuration overrides. Only relevant when `port_forward = true` or `port_forward_with_namespace = \"foo\"`.\nThe kubeconfig file that is used can be overridden using the [`KUBECONFIG` environment\nvariable](https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/#the-kubeconfig-environment-variable)).\n"
            },
            "password": {
                "type": "string",
                "description": "Authentication password. Can be set through the `ARGOCD_AUTH_PASSWORD` environment variable.\n",
                "secret": true
            },
            "plainText": {
                "type": "boolean",
                "description": "Whether to initiate an unencrypted connection to ArgoCD server.\n"
            },
            "portForward": {
                "type": "boolean",
                "description": "Connect to a random argocd-server port using port forwarding.\n"
            },
            "portForwardWithNamespace": {
                "type": "string",
                "description": "Namespace name which should be used for port forwarding.\n"
            },
            "serverAddr": {
                "type": "string",
                "description": "ArgoCD server address with port. Can be set through the `ARGOCD_SERVER` environment variable.\n"
            },
            "useLocalConfig": {
                "type": "boolean",
                "description": "Use the authentication settings found in the local config file. Useful when you have previously logged in using SSO.\nConflicts with `auth_token`, `username` and `password`.\n"
            },
            "userAgent": {
                "type": "string",
                "description": "User-Agent request header override.\n"
            },
            "username": {
                "type": "string",
                "description": "Authentication username. Can be set through the `ARGOCD_AUTH_USERNAME` environment variable.\n"
            }
        }
    },
    "resources": {
        "argocd:index/accountToken:AccountToken": {
            "description": "Manages ArgoCD [account](https://argo-cd.readthedocs.io/en/latest/user-guide/commands/argocd_account/) JWT tokens.\n\n\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\n// Token for account configured on the `provider`\nconst _this = new argocd.AccountToken(\"this\", {renewAfter: \"168h\"});\n// Token for ac count `foo`\nconst foo = new argocd.AccountToken(\"foo\", {\n    account: \"foo\",\n    expiresIn: \"168h\",\n    renewBefore: \"84h\",\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\n# Token for account configured on the `provider`\nthis = argocd.AccountToken(\"this\", renew_after=\"168h\")\n# Token for ac count `foo`\nfoo = argocd.AccountToken(\"foo\",\n    account=\"foo\",\n    expires_in=\"168h\",\n    renew_before=\"84h\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Token for account configured on the `provider`\n    var @this = new Argocd.AccountToken(\"this\", new()\n    {\n        RenewAfter = \"168h\",\n    });\n\n    // Token for ac count `foo`\n    var foo = new Argocd.AccountToken(\"foo\", new()\n    {\n        Account = \"foo\",\n        ExpiresIn = \"168h\",\n        RenewBefore = \"84h\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Token for account configured on the `provider`\n\t\t_, err := argocd.NewAccountToken(ctx, \"this\", \u0026argocd.AccountTokenArgs{\n\t\t\tRenewAfter: pulumi.String(\"168h\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Token for ac count `foo`\n\t\t_, err = argocd.NewAccountToken(ctx, \"foo\", \u0026argocd.AccountTokenArgs{\n\t\t\tAccount:     pulumi.String(\"foo\"),\n\t\t\tExpiresIn:   pulumi.String(\"168h\"),\n\t\t\tRenewBefore: pulumi.String(\"84h\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.AccountToken;\nimport com.pulumi.argocd.AccountTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Token for account configured on the `provider`\n        var this_ = new AccountToken(\"this\", AccountTokenArgs.builder()\n            .renewAfter(\"168h\")\n            .build());\n\n        // Token for ac count `foo`\n        var foo = new AccountToken(\"foo\", AccountTokenArgs.builder()\n            .account(\"foo\")\n            .expiresIn(\"168h\")\n            .renewBefore(\"84h\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Token for account configured on the `provider`\n  this:\n    type: argocd:AccountToken\n    properties:\n      renewAfter: 168h\n  # Token for ac count `foo`\n  foo:\n    type: argocd:AccountToken\n    properties:\n      account: foo\n      expiresIn: 168h\n      renewBefore: 84h\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Account name. Defaults to the current account. I.e. the account configured on the `provider` block.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "If `expires_in` is set, Unix timestamp upon which the token will expire.\n"
                },
                "expiresIn": {
                    "type": "string",
                    "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n"
                },
                "issuedAt": {
                    "type": "string",
                    "description": "Unix timestamp at which the token was issued.\n"
                },
                "jwt": {
                    "type": "string",
                    "description": "The raw JWT.\n",
                    "secret": true
                },
                "renewAfter": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                },
                "renewBefore": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Pulumi will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                }
            },
            "required": [
                "expiresAt",
                "issuedAt",
                "jwt"
            ],
            "inputProperties": {
                "account": {
                    "type": "string",
                    "description": "Account name. Defaults to the current account. I.e. the account configured on the `provider` block.\n",
                    "willReplaceOnChanges": true
                },
                "expiresIn": {
                    "type": "string",
                    "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n",
                    "willReplaceOnChanges": true
                },
                "renewAfter": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                },
                "renewBefore": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Pulumi will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AccountToken resources.\n",
                "properties": {
                    "account": {
                        "type": "string",
                        "description": "Account name. Defaults to the current account. I.e. the account configured on the `provider` block.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "If `expires_in` is set, Unix timestamp upon which the token will expire.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresIn": {
                        "type": "string",
                        "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n",
                        "willReplaceOnChanges": true
                    },
                    "issuedAt": {
                        "type": "string",
                        "description": "Unix timestamp at which the token was issued.\n",
                        "willReplaceOnChanges": true
                    },
                    "jwt": {
                        "type": "string",
                        "description": "The raw JWT.\n",
                        "secret": true
                    },
                    "renewAfter": {
                        "type": "string",
                        "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                    },
                    "renewBefore": {
                        "type": "string",
                        "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, Pulumi will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/application:Application": {
            "description": "Manages [applications](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#applications) within ArgoCD.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\n// Kustomize application\nconst kustomize = new argocd.Application(\"kustomize\", {\n    metadata: {\n        name: \"kustomize-app\",\n        namespace: \"argocd\",\n        labels: {\n            test: \"true\",\n        },\n    },\n    cascade: false,\n    wait: true,\n    spec: {\n        project: \"myproject\",\n        destination: {\n            server: \"https://kubernetes.default.svc\",\n            namespace: \"foo\",\n        },\n        sources: [{\n            repoUrl: \"https://github.com/kubernetes-sigs/kustomize\",\n            path: \"examples/helloWorld\",\n            targetRevision: \"master\",\n            kustomize: {\n                namePrefix: \"foo-\",\n                nameSuffix: \"-bar\",\n                images: [\"hashicorp/terraform:light\"],\n                commonLabels: {\n                    \"this.is.a.common\": \"la-bel\",\n                    \"another.io/one\": \"true\",\n                },\n            },\n        }],\n        syncPolicy: {\n            automated: {\n                prune: true,\n                selfHeal: true,\n                allowEmpty: true,\n            },\n            syncOptions: [\"Validate=false\"],\n            retry: {\n                limit: \"5\",\n                backoff: {\n                    duration: \"30s\",\n                    maxDuration: \"2m\",\n                    factor: \"2\",\n                },\n            },\n        },\n        ignoreDifferences: [\n            {\n                group: \"apps\",\n                kind: \"Deployment\",\n                jsonPointers: [\"/spec/replicas\"],\n            },\n            {\n                group: \"apps\",\n                kind: \"StatefulSet\",\n                name: \"someStatefulSet\",\n                jsonPointers: [\n                    \"/spec/replicas\",\n                    \"/spec/template/spec/metadata/labels/bar\",\n                ],\n                jqPathExpressions: [\n                    \".spec.replicas\",\n                    \".spec.template.spec.metadata.labels.bar\",\n                ],\n            },\n        ],\n    },\n});\n// Helm application\nconst helm = new argocd.Application(\"helm\", {\n    metadata: {\n        name: \"helm-app\",\n        namespace: \"argocd\",\n        labels: {\n            test: \"true\",\n        },\n    },\n    spec: {\n        destination: {\n            server: \"https://kubernetes.default.svc\",\n            namespace: \"default\",\n        },\n        sources: [{\n            repoUrl: \"https://some.chart.repo.io\",\n            chart: \"mychart\",\n            targetRevision: \"1.2.3\",\n            helm: {\n                releaseName: \"testing\",\n                parameters: [\n                    {\n                        name: \"image.tag\",\n                        value: \"1.2.3\",\n                    },\n                    {\n                        name: \"someotherparameter\",\n                        value: \"true\",\n                    },\n                ],\n                valueFiles: [\"values-test.yml\"],\n                values: JSON.stringify({\n                    someparameter: {\n                        enabled: true,\n                        someArray: [\n                            \"foo\",\n                            \"bar\",\n                        ],\n                    },\n                }),\n            },\n        }],\n    },\n});\n// Multiple Application Sources with Helm value files from external Git repository\nconst multipleSources = new argocd.Application(\"multiple_sources\", {\n    metadata: {\n        name: \"helm-app-with-external-values\",\n        namespace: \"argocd\",\n    },\n    spec: {\n        project: \"default\",\n        sources: [\n            {\n                repoUrl: \"https://charts.helm.sh/stable\",\n                chart: \"wordpress\",\n                targetRevision: \"9.0.3\",\n                helm: {\n                    valueFiles: [\"$values/helm-dependency/values.yaml\"],\n                },\n            },\n            {\n                repoUrl: \"https://github.com/argoproj/argocd-example-apps.git\",\n                targetRevision: \"HEAD\",\n                ref: \"values\",\n            },\n        ],\n        destination: {\n            server: \"https://kubernetes.default.svc\",\n            namespace: \"default\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_argocd as argocd\n\n# Kustomize application\nkustomize = argocd.Application(\"kustomize\",\n    metadata={\n        \"name\": \"kustomize-app\",\n        \"namespace\": \"argocd\",\n        \"labels\": {\n            \"test\": \"true\",\n        },\n    },\n    cascade=False,\n    wait=True,\n    spec={\n        \"project\": \"myproject\",\n        \"destination\": {\n            \"server\": \"https://kubernetes.default.svc\",\n            \"namespace\": \"foo\",\n        },\n        \"sources\": [{\n            \"repo_url\": \"https://github.com/kubernetes-sigs/kustomize\",\n            \"path\": \"examples/helloWorld\",\n            \"target_revision\": \"master\",\n            \"kustomize\": {\n                \"name_prefix\": \"foo-\",\n                \"name_suffix\": \"-bar\",\n                \"images\": [\"hashicorp/terraform:light\"],\n                \"common_labels\": {\n                    \"this.is.a.common\": \"la-bel\",\n                    \"another.io/one\": \"true\",\n                },\n            },\n        }],\n        \"sync_policy\": {\n            \"automated\": {\n                \"prune\": True,\n                \"self_heal\": True,\n                \"allow_empty\": True,\n            },\n            \"sync_options\": [\"Validate=false\"],\n            \"retry\": {\n                \"limit\": \"5\",\n                \"backoff\": {\n                    \"duration\": \"30s\",\n                    \"max_duration\": \"2m\",\n                    \"factor\": \"2\",\n                },\n            },\n        },\n        \"ignore_differences\": [\n            {\n                \"group\": \"apps\",\n                \"kind\": \"Deployment\",\n                \"json_pointers\": [\"/spec/replicas\"],\n            },\n            {\n                \"group\": \"apps\",\n                \"kind\": \"StatefulSet\",\n                \"name\": \"someStatefulSet\",\n                \"json_pointers\": [\n                    \"/spec/replicas\",\n                    \"/spec/template/spec/metadata/labels/bar\",\n                ],\n                \"jq_path_expressions\": [\n                    \".spec.replicas\",\n                    \".spec.template.spec.metadata.labels.bar\",\n                ],\n            },\n        ],\n    })\n# Helm application\nhelm = argocd.Application(\"helm\",\n    metadata={\n        \"name\": \"helm-app\",\n        \"namespace\": \"argocd\",\n        \"labels\": {\n            \"test\": \"true\",\n        },\n    },\n    spec={\n        \"destination\": {\n            \"server\": \"https://kubernetes.default.svc\",\n            \"namespace\": \"default\",\n        },\n        \"sources\": [{\n            \"repo_url\": \"https://some.chart.repo.io\",\n            \"chart\": \"mychart\",\n            \"target_revision\": \"1.2.3\",\n            \"helm\": {\n                \"release_name\": \"testing\",\n                \"parameters\": [\n                    {\n                        \"name\": \"image.tag\",\n                        \"value\": \"1.2.3\",\n                    },\n                    {\n                        \"name\": \"someotherparameter\",\n                        \"value\": \"true\",\n                    },\n                ],\n                \"value_files\": [\"values-test.yml\"],\n                \"values\": json.dumps({\n                    \"someparameter\": {\n                        \"enabled\": True,\n                        \"someArray\": [\n                            \"foo\",\n                            \"bar\",\n                        ],\n                    },\n                }),\n            },\n        }],\n    })\n# Multiple Application Sources with Helm value files from external Git repository\nmultiple_sources = argocd.Application(\"multiple_sources\",\n    metadata={\n        \"name\": \"helm-app-with-external-values\",\n        \"namespace\": \"argocd\",\n    },\n    spec={\n        \"project\": \"default\",\n        \"sources\": [\n            {\n                \"repo_url\": \"https://charts.helm.sh/stable\",\n                \"chart\": \"wordpress\",\n                \"target_revision\": \"9.0.3\",\n                \"helm\": {\n                    \"value_files\": [\"$values/helm-dependency/values.yaml\"],\n                },\n            },\n            {\n                \"repo_url\": \"https://github.com/argoproj/argocd-example-apps.git\",\n                \"target_revision\": \"HEAD\",\n                \"ref\": \"values\",\n            },\n        ],\n        \"destination\": {\n            \"server\": \"https://kubernetes.default.svc\",\n            \"namespace\": \"default\",\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Kustomize application\n    var kustomize = new Argocd.Application(\"kustomize\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationMetadataArgs\n        {\n            Name = \"kustomize-app\",\n            Namespace = \"argocd\",\n            Labels = \n            {\n                { \"test\", \"true\" },\n            },\n        },\n        Cascade = false,\n        Wait = true,\n        Spec = new Argocd.Inputs.ApplicationSpecArgs\n        {\n            Project = \"myproject\",\n            Destination = new Argocd.Inputs.ApplicationSpecDestinationArgs\n            {\n                Server = \"https://kubernetes.default.svc\",\n                Namespace = \"foo\",\n            },\n            Sources = new[]\n            {\n                new Argocd.Inputs.ApplicationSpecSourceArgs\n                {\n                    RepoUrl = \"https://github.com/kubernetes-sigs/kustomize\",\n                    Path = \"examples/helloWorld\",\n                    TargetRevision = \"master\",\n                    Kustomize = new Argocd.Inputs.ApplicationSpecSourceKustomizeArgs\n                    {\n                        NamePrefix = \"foo-\",\n                        NameSuffix = \"-bar\",\n                        Images = new[]\n                        {\n                            \"hashicorp/terraform:light\",\n                        },\n                        CommonLabels = \n                        {\n                            { \"this.is.a.common\", \"la-bel\" },\n                            { \"another.io/one\", \"true\" },\n                        },\n                    },\n                },\n            },\n            SyncPolicy = new Argocd.Inputs.ApplicationSpecSyncPolicyArgs\n            {\n                Automated = new Argocd.Inputs.ApplicationSpecSyncPolicyAutomatedArgs\n                {\n                    Prune = true,\n                    SelfHeal = true,\n                    AllowEmpty = true,\n                },\n                SyncOptions = new[]\n                {\n                    \"Validate=false\",\n                },\n                Retry = new Argocd.Inputs.ApplicationSpecSyncPolicyRetryArgs\n                {\n                    Limit = \"5\",\n                    Backoff = new Argocd.Inputs.ApplicationSpecSyncPolicyRetryBackoffArgs\n                    {\n                        Duration = \"30s\",\n                        MaxDuration = \"2m\",\n                        Factor = \"2\",\n                    },\n                },\n            },\n            IgnoreDifferences = new[]\n            {\n                new Argocd.Inputs.ApplicationSpecIgnoreDifferenceArgs\n                {\n                    Group = \"apps\",\n                    Kind = \"Deployment\",\n                    JsonPointers = new[]\n                    {\n                        \"/spec/replicas\",\n                    },\n                },\n                new Argocd.Inputs.ApplicationSpecIgnoreDifferenceArgs\n                {\n                    Group = \"apps\",\n                    Kind = \"StatefulSet\",\n                    Name = \"someStatefulSet\",\n                    JsonPointers = new[]\n                    {\n                        \"/spec/replicas\",\n                        \"/spec/template/spec/metadata/labels/bar\",\n                    },\n                    JqPathExpressions = new[]\n                    {\n                        \".spec.replicas\",\n                        \".spec.template.spec.metadata.labels.bar\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Helm application\n    var helm = new Argocd.Application(\"helm\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationMetadataArgs\n        {\n            Name = \"helm-app\",\n            Namespace = \"argocd\",\n            Labels = \n            {\n                { \"test\", \"true\" },\n            },\n        },\n        Spec = new Argocd.Inputs.ApplicationSpecArgs\n        {\n            Destination = new Argocd.Inputs.ApplicationSpecDestinationArgs\n            {\n                Server = \"https://kubernetes.default.svc\",\n                Namespace = \"default\",\n            },\n            Sources = new[]\n            {\n                new Argocd.Inputs.ApplicationSpecSourceArgs\n                {\n                    RepoUrl = \"https://some.chart.repo.io\",\n                    Chart = \"mychart\",\n                    TargetRevision = \"1.2.3\",\n                    Helm = new Argocd.Inputs.ApplicationSpecSourceHelmArgs\n                    {\n                        ReleaseName = \"testing\",\n                        Parameters = new[]\n                        {\n                            new Argocd.Inputs.ApplicationSpecSourceHelmParameterArgs\n                            {\n                                Name = \"image.tag\",\n                                Value = \"1.2.3\",\n                            },\n                            new Argocd.Inputs.ApplicationSpecSourceHelmParameterArgs\n                            {\n                                Name = \"someotherparameter\",\n                                Value = \"true\",\n                            },\n                        },\n                        ValueFiles = new[]\n                        {\n                            \"values-test.yml\",\n                        },\n                        Values = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                        {\n                            [\"someparameter\"] = new Dictionary\u003cstring, object?\u003e\n                            {\n                                [\"enabled\"] = true,\n                                [\"someArray\"] = new[]\n                                {\n                                    \"foo\",\n                                    \"bar\",\n                                },\n                            },\n                        }),\n                    },\n                },\n            },\n        },\n    });\n\n    // Multiple Application Sources with Helm value files from external Git repository\n    var multipleSources = new Argocd.Application(\"multiple_sources\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationMetadataArgs\n        {\n            Name = \"helm-app-with-external-values\",\n            Namespace = \"argocd\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSpecArgs\n        {\n            Project = \"default\",\n            Sources = new[]\n            {\n                new Argocd.Inputs.ApplicationSpecSourceArgs\n                {\n                    RepoUrl = \"https://charts.helm.sh/stable\",\n                    Chart = \"wordpress\",\n                    TargetRevision = \"9.0.3\",\n                    Helm = new Argocd.Inputs.ApplicationSpecSourceHelmArgs\n                    {\n                        ValueFiles = new[]\n                        {\n                            \"$values/helm-dependency/values.yaml\",\n                        },\n                    },\n                },\n                new Argocd.Inputs.ApplicationSpecSourceArgs\n                {\n                    RepoUrl = \"https://github.com/argoproj/argocd-example-apps.git\",\n                    TargetRevision = \"HEAD\",\n                    Ref = \"values\",\n                },\n            },\n            Destination = new Argocd.Inputs.ApplicationSpecDestinationArgs\n            {\n                Server = \"https://kubernetes.default.svc\",\n                Namespace = \"default\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Kustomize application\n\t\t_, err := argocd.NewApplication(ctx, \"kustomize\", \u0026argocd.ApplicationArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationMetadataArgs{\n\t\t\t\tName:      pulumi.String(\"kustomize-app\"),\n\t\t\t\tNamespace: pulumi.String(\"argocd\"),\n\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\"test\": pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tCascade: pulumi.Bool(false),\n\t\t\tWait:    pulumi.Bool(true),\n\t\t\tSpec: \u0026argocd.ApplicationSpecArgs{\n\t\t\t\tProject: pulumi.String(\"myproject\"),\n\t\t\t\tDestination: \u0026argocd.ApplicationSpecDestinationArgs{\n\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\tNamespace: pulumi.String(\"foo\"),\n\t\t\t\t},\n\t\t\t\tSources: argocd.ApplicationSpecSourceArray{\n\t\t\t\t\t\u0026argocd.ApplicationSpecSourceArgs{\n\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/kubernetes-sigs/kustomize\"),\n\t\t\t\t\t\tPath:           pulumi.String(\"examples/helloWorld\"),\n\t\t\t\t\t\tTargetRevision: pulumi.String(\"master\"),\n\t\t\t\t\t\tKustomize: \u0026argocd.ApplicationSpecSourceKustomizeArgs{\n\t\t\t\t\t\t\tNamePrefix: pulumi.String(\"foo-\"),\n\t\t\t\t\t\t\tNameSuffix: pulumi.String(\"-bar\"),\n\t\t\t\t\t\t\tImages: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"hashicorp/terraform:light\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tCommonLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\"this.is.a.common\": pulumi.String(\"la-bel\"),\n\t\t\t\t\t\t\t\t\"another.io/one\":   pulumi.String(\"true\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSyncPolicy: \u0026argocd.ApplicationSpecSyncPolicyArgs{\n\t\t\t\t\tAutomated: \u0026argocd.ApplicationSpecSyncPolicyAutomatedArgs{\n\t\t\t\t\t\tPrune:      pulumi.Bool(true),\n\t\t\t\t\t\tSelfHeal:   pulumi.Bool(true),\n\t\t\t\t\t\tAllowEmpty: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\tSyncOptions: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"Validate=false\"),\n\t\t\t\t\t},\n\t\t\t\t\tRetry: \u0026argocd.ApplicationSpecSyncPolicyRetryArgs{\n\t\t\t\t\t\tLimit: pulumi.String(\"5\"),\n\t\t\t\t\t\tBackoff: \u0026argocd.ApplicationSpecSyncPolicyRetryBackoffArgs{\n\t\t\t\t\t\t\tDuration:    pulumi.String(\"30s\"),\n\t\t\t\t\t\t\tMaxDuration: pulumi.String(\"2m\"),\n\t\t\t\t\t\t\tFactor:      pulumi.String(\"2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tIgnoreDifferences: argocd.ApplicationSpecIgnoreDifferenceArray{\n\t\t\t\t\t\u0026argocd.ApplicationSpecIgnoreDifferenceArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"apps\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"Deployment\"),\n\t\t\t\t\t\tJsonPointers: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"/spec/replicas\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ApplicationSpecIgnoreDifferenceArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"apps\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"StatefulSet\"),\n\t\t\t\t\t\tName:  pulumi.String(\"someStatefulSet\"),\n\t\t\t\t\t\tJsonPointers: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"/spec/replicas\"),\n\t\t\t\t\t\t\tpulumi.String(\"/spec/template/spec/metadata/labels/bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tJqPathExpressions: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\".spec.replicas\"),\n\t\t\t\t\t\t\tpulumi.String(\".spec.template.spec.metadata.labels.bar\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"someparameter\": map[string]interface{}{\n\t\t\t\t\"enabled\": true,\n\t\t\t\t\"someArray\": []string{\n\t\t\t\t\t\"foo\",\n\t\t\t\t\t\"bar\",\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t// Helm application\n\t\t_, err = argocd.NewApplication(ctx, \"helm\", \u0026argocd.ApplicationArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationMetadataArgs{\n\t\t\t\tName:      pulumi.String(\"helm-app\"),\n\t\t\t\tNamespace: pulumi.String(\"argocd\"),\n\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\"test\": pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSpecArgs{\n\t\t\t\tDestination: \u0026argocd.ApplicationSpecDestinationArgs{\n\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t},\n\t\t\t\tSources: argocd.ApplicationSpecSourceArray{\n\t\t\t\t\t\u0026argocd.ApplicationSpecSourceArgs{\n\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://some.chart.repo.io\"),\n\t\t\t\t\t\tChart:          pulumi.String(\"mychart\"),\n\t\t\t\t\t\tTargetRevision: pulumi.String(\"1.2.3\"),\n\t\t\t\t\t\tHelm: \u0026argocd.ApplicationSpecSourceHelmArgs{\n\t\t\t\t\t\t\tReleaseName: pulumi.String(\"testing\"),\n\t\t\t\t\t\t\tParameters: argocd.ApplicationSpecSourceHelmParameterArray{\n\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSpecSourceHelmParameterArgs{\n\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"image.tag\"),\n\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"1.2.3\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSpecSourceHelmParameterArgs{\n\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"someotherparameter\"),\n\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"true\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tValueFiles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"values-test.yml\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tValues: pulumi.String(json0),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Multiple Application Sources with Helm value files from external Git repository\n\t\t_, err = argocd.NewApplication(ctx, \"multiple_sources\", \u0026argocd.ApplicationArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationMetadataArgs{\n\t\t\t\tName:      pulumi.String(\"helm-app-with-external-values\"),\n\t\t\t\tNamespace: pulumi.String(\"argocd\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSpecArgs{\n\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\tSources: argocd.ApplicationSpecSourceArray{\n\t\t\t\t\t\u0026argocd.ApplicationSpecSourceArgs{\n\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://charts.helm.sh/stable\"),\n\t\t\t\t\t\tChart:          pulumi.String(\"wordpress\"),\n\t\t\t\t\t\tTargetRevision: pulumi.String(\"9.0.3\"),\n\t\t\t\t\t\tHelm: \u0026argocd.ApplicationSpecSourceHelmArgs{\n\t\t\t\t\t\t\tValueFiles: pulumi.StringArray{\n\t\t\t\t\t\t\t\tpulumi.String(\"$values/helm-dependency/values.yaml\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ApplicationSpecSourceArgs{\n\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argocd-example-apps.git\"),\n\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\tRef:            pulumi.String(\"values\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tDestination: \u0026argocd.ApplicationSpecDestinationArgs{\n\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.Application;\nimport com.pulumi.argocd.ApplicationArgs;\nimport com.pulumi.argocd.inputs.ApplicationMetadataArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecDestinationArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecSyncPolicyArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecSyncPolicyAutomatedArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecSyncPolicyRetryArgs;\nimport com.pulumi.argocd.inputs.ApplicationSpecSyncPolicyRetryBackoffArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Kustomize application\n        var kustomize = new Application(\"kustomize\", ApplicationArgs.builder()\n            .metadata(ApplicationMetadataArgs.builder()\n                .name(\"kustomize-app\")\n                .namespace(\"argocd\")\n                .labels(Map.of(\"test\", \"true\"))\n                .build())\n            .cascade(false)\n            .wait(true)\n            .spec(ApplicationSpecArgs.builder()\n                .project(\"myproject\")\n                .destination(ApplicationSpecDestinationArgs.builder()\n                    .server(\"https://kubernetes.default.svc\")\n                    .namespace(\"foo\")\n                    .build())\n                .sources(ApplicationSpecSourceArgs.builder()\n                    .repoUrl(\"https://github.com/kubernetes-sigs/kustomize\")\n                    .path(\"examples/helloWorld\")\n                    .targetRevision(\"master\")\n                    .kustomize(ApplicationSpecSourceKustomizeArgs.builder()\n                        .namePrefix(\"foo-\")\n                        .nameSuffix(\"-bar\")\n                        .images(\"hashicorp/terraform:light\")\n                        .commonLabels(Map.ofEntries(\n                            Map.entry(\"this.is.a.common\", \"la-bel\"),\n                            Map.entry(\"another.io/one\", \"true\")\n                        ))\n                        .build())\n                    .build())\n                .syncPolicy(ApplicationSpecSyncPolicyArgs.builder()\n                    .automated(ApplicationSpecSyncPolicyAutomatedArgs.builder()\n                        .prune(true)\n                        .selfHeal(true)\n                        .allowEmpty(true)\n                        .build())\n                    .syncOptions(\"Validate=false\")\n                    .retry(ApplicationSpecSyncPolicyRetryArgs.builder()\n                        .limit(\"5\")\n                        .backoff(ApplicationSpecSyncPolicyRetryBackoffArgs.builder()\n                            .duration(\"30s\")\n                            .maxDuration(\"2m\")\n                            .factor(\"2\")\n                            .build())\n                        .build())\n                    .build())\n                .ignoreDifferences(                \n                    ApplicationSpecIgnoreDifferenceArgs.builder()\n                        .group(\"apps\")\n                        .kind(\"Deployment\")\n                        .jsonPointers(\"/spec/replicas\")\n                        .build(),\n                    ApplicationSpecIgnoreDifferenceArgs.builder()\n                        .group(\"apps\")\n                        .kind(\"StatefulSet\")\n                        .name(\"someStatefulSet\")\n                        .jsonPointers(                        \n                            \"/spec/replicas\",\n                            \"/spec/template/spec/metadata/labels/bar\")\n                        .jqPathExpressions(                        \n                            \".spec.replicas\",\n                            \".spec.template.spec.metadata.labels.bar\")\n                        .build())\n                .build())\n            .build());\n\n        // Helm application\n        var helm = new Application(\"helm\", ApplicationArgs.builder()\n            .metadata(ApplicationMetadataArgs.builder()\n                .name(\"helm-app\")\n                .namespace(\"argocd\")\n                .labels(Map.of(\"test\", \"true\"))\n                .build())\n            .spec(ApplicationSpecArgs.builder()\n                .destination(ApplicationSpecDestinationArgs.builder()\n                    .server(\"https://kubernetes.default.svc\")\n                    .namespace(\"default\")\n                    .build())\n                .sources(ApplicationSpecSourceArgs.builder()\n                    .repoUrl(\"https://some.chart.repo.io\")\n                    .chart(\"mychart\")\n                    .targetRevision(\"1.2.3\")\n                    .helm(ApplicationSpecSourceHelmArgs.builder()\n                        .releaseName(\"testing\")\n                        .parameters(                        \n                            ApplicationSpecSourceHelmParameterArgs.builder()\n                                .name(\"image.tag\")\n                                .value(\"1.2.3\")\n                                .build(),\n                            ApplicationSpecSourceHelmParameterArgs.builder()\n                                .name(\"someotherparameter\")\n                                .value(\"true\")\n                                .build())\n                        .valueFiles(\"values-test.yml\")\n                        .values(serializeJson(\n                            jsonObject(\n                                jsonProperty(\"someparameter\", jsonObject(\n                                    jsonProperty(\"enabled\", true),\n                                    jsonProperty(\"someArray\", jsonArray(\n                                        \"foo\", \n                                        \"bar\"\n                                    ))\n                                ))\n                            )))\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Multiple Application Sources with Helm value files from external Git repository\n        var multipleSources = new Application(\"multipleSources\", ApplicationArgs.builder()\n            .metadata(ApplicationMetadataArgs.builder()\n                .name(\"helm-app-with-external-values\")\n                .namespace(\"argocd\")\n                .build())\n            .spec(ApplicationSpecArgs.builder()\n                .project(\"default\")\n                .sources(                \n                    ApplicationSpecSourceArgs.builder()\n                        .repoUrl(\"https://charts.helm.sh/stable\")\n                        .chart(\"wordpress\")\n                        .targetRevision(\"9.0.3\")\n                        .helm(ApplicationSpecSourceHelmArgs.builder()\n                            .valueFiles(\"$values/helm-dependency/values.yaml\")\n                            .build())\n                        .build(),\n                    ApplicationSpecSourceArgs.builder()\n                        .repoUrl(\"https://github.com/argoproj/argocd-example-apps.git\")\n                        .targetRevision(\"HEAD\")\n                        .ref(\"values\")\n                        .build())\n                .destination(ApplicationSpecDestinationArgs.builder()\n                    .server(\"https://kubernetes.default.svc\")\n                    .namespace(\"default\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Kustomize application\n  kustomize:\n    type: argocd:Application\n    properties:\n      metadata:\n        name: kustomize-app\n        namespace: argocd\n        labels:\n          test: 'true'\n      cascade: false # disable cascading deletion\n      wait: true\n      spec:\n        project: myproject\n        destination:\n          server: https://kubernetes.default.svc\n          namespace: foo\n        sources:\n          - repoUrl: https://github.com/kubernetes-sigs/kustomize\n            path: examples/helloWorld\n            targetRevision: master\n            kustomize:\n              namePrefix: foo-\n              nameSuffix: -bar\n              images:\n                - hashicorp/terraform:light\n              commonLabels:\n                this.is.a.common: la-bel\n                another.io/one: 'true'\n        syncPolicy:\n          automated:\n            prune: true\n            selfHeal: true\n            allowEmpty: true\n          syncOptions:\n            - Validate=false\n          retry:\n            limit: '5'\n            backoff:\n              duration: 30s\n              maxDuration: 2m\n              factor: '2'\n        ignoreDifferences:\n          - group: apps\n            kind: Deployment\n            jsonPointers:\n              - /spec/replicas\n          - group: apps\n            kind: StatefulSet\n            name: someStatefulSet\n            jsonPointers:\n              - /spec/replicas\n              - /spec/template/spec/metadata/labels/bar\n            jqPathExpressions:\n              - .spec.replicas\n              - .spec.template.spec.metadata.labels.bar\n  # Helm application\n  helm:\n    type: argocd:Application\n    properties:\n      metadata:\n        name: helm-app\n        namespace: argocd\n        labels:\n          test: 'true'\n      spec:\n        destination:\n          server: https://kubernetes.default.svc\n          namespace: default\n        sources:\n          - repoUrl: https://some.chart.repo.io\n            chart: mychart\n            targetRevision: 1.2.3\n            helm:\n              releaseName: testing\n              parameters:\n                - name: image.tag\n                  value: 1.2.3\n                - name: someotherparameter\n                  value: 'true'\n              valueFiles:\n                - values-test.yml\n              values:\n                fn::toJSON:\n                  someparameter:\n                    enabled: true\n                    someArray:\n                      - foo\n                      - bar\n  # Multiple Application Sources with Helm value files from external Git repository\n  multipleSources:\n    type: argocd:Application\n    name: multiple_sources\n    properties:\n      metadata:\n        name: helm-app-with-external-values\n        namespace: argocd\n      spec:\n        project: default\n        sources:\n          - repoUrl: https://charts.helm.sh/stable\n            chart: wordpress\n            targetRevision: 9.0.3\n            helm:\n              valueFiles:\n                - $values/helm-dependency/values.yaml\n          - repoUrl: https://github.com/argoproj/argocd-example-apps.git\n            targetRevision: HEAD\n            ref: values\n        destination:\n          server: https://kubernetes.default.svc\n          namespace: default\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nArgoCD applications can be imported using an id consisting of `{name}:{namespace}`. E.g.\n\n```sh\n$ pulumi import argocd:index/application:Application myapp myapp:argocd\n```\n\n",
            "properties": {
                "cascade": {
                    "type": "boolean",
                    "description": "Whether to applying cascading deletion when application is removed.\n"
                },
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationMetadata:ApplicationMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSpec:ApplicationSpec",
                    "description": "The application specification.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ApplicationStatus:ApplicationStatus"
                    },
                    "description": "Status information for the application. **Note**: this is not guaranteed to be up to date immediately after creating/updating an application unless `wait=true`.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Whether to validate the application spec before creating or updating the application.\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by the provider Create, Update and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g. because the project to which the application belongs has a `sync_window` applied) then you will experience an expected timeout event if `wait = true`.\n"
                }
            },
            "required": [
                "metadata",
                "spec",
                "statuses"
            ],
            "inputProperties": {
                "cascade": {
                    "type": "boolean",
                    "description": "Whether to applying cascading deletion when application is removed.\n"
                },
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationMetadata:ApplicationMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSpec:ApplicationSpec",
                    "description": "The application specification.\n"
                },
                "validate": {
                    "type": "boolean",
                    "description": "Whether to validate the application spec before creating or updating the application.\n"
                },
                "wait": {
                    "type": "boolean",
                    "description": "Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by the provider Create, Update and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g. because the project to which the application belongs has a `sync_window` applied) then you will experience an expected timeout event if `wait = true`.\n"
                }
            },
            "requiredInputs": [
                "metadata",
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Application resources.\n",
                "properties": {
                    "cascade": {
                        "type": "boolean",
                        "description": "Whether to applying cascading deletion when application is removed.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/argocd:index/ApplicationMetadata:ApplicationMetadata",
                        "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                    },
                    "spec": {
                        "$ref": "#/types/argocd:index/ApplicationSpec:ApplicationSpec",
                        "description": "The application specification.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/argocd:index/ApplicationStatus:ApplicationStatus"
                        },
                        "description": "Status information for the application. **Note**: this is not guaranteed to be up to date immediately after creating/updating an application unless `wait=true`.\n"
                    },
                    "validate": {
                        "type": "boolean",
                        "description": "Whether to validate the application spec before creating or updating the application.\n"
                    },
                    "wait": {
                        "type": "boolean",
                        "description": "Upon application creation or update, wait for application health/sync status to be healthy/Synced, upon application deletion, wait for application to be removed, when set to true. Wait timeouts are controlled by the provider Create, Update and Delete resource timeouts (all default to 5 minutes). **Note**: if ArgoCD decides not to sync an application (e.g. because the project to which the application belongs has a `sync_window` applied) then you will experience an expected timeout event if `wait = true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/applicationSet:ApplicationSet": {
            "description": "Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\n// Clusters Generator\nconst clustersSelector = new argocd.ApplicationSet(\"clusters_selector\", {\n    metadata: {\n        name: \"clusters-selector\",\n    },\n    spec: {\n        generators: [{\n            clusters: [{\n                selector: {\n                    matchLabels: {\n                        \"argocd.argoproj.io/secret-type\": \"cluster\",\n                    },\n                },\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{name}}-clusters-selector\",\n            },\n            spec: {\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argocd-example-apps/\",\n                    targetRevision: \"HEAD\",\n                    path: \"guestbook\",\n                }],\n                destination: {\n                    server: \"{{server}}\",\n                    namespace: \"default\",\n                },\n            },\n        },\n    },\n});\n// Cluster Decision Resource Generator\nconst clusterDecisionResource = new argocd.ApplicationSet(\"cluster_decision_resource\", {\n    metadata: {\n        name: \"cluster-decision-resource\",\n    },\n    spec: {\n        generators: [{\n            clusterDecisionResources: [{\n                configMapRef: \"my-configmap\",\n                name: \"quak\",\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{name}}-guestbook\",\n            },\n            spec: {\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argocd-example-apps/\",\n                    targetRevision: \"HEAD\",\n                    path: \"guestbook\",\n                }],\n                destination: {\n                    server: \"{{server}}\",\n                    namespace: \"default\",\n                },\n            },\n        },\n    },\n});\n// Git Generator - Directories\nconst gitDirectories = new argocd.ApplicationSet(\"git_directories\", {\n    metadata: {\n        name: \"git-directories\",\n    },\n    spec: {\n        generators: [{\n            gits: [{\n                repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                revision: \"HEAD\",\n                directories: [\n                    {\n                        path: \"applicationset/examples/git-generator-directory/cluster-addons/*\",\n                    },\n                    {\n                        path: \"applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\",\n                        exclude: true,\n                    },\n                ],\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{path.basename}}-git-directories\",\n            },\n            spec: {\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                    targetRevision: \"HEAD\",\n                    path: \"{{path}}\",\n                }],\n                destination: {\n                    server: \"https://kubernetes.default.svc\",\n                    namespace: \"{{path.basename}}\",\n                },\n            },\n        },\n    },\n});\n// Git Generator - Files\nconst gitFiles = new argocd.ApplicationSet(\"git_files\", {\n    metadata: {\n        name: \"git-files\",\n    },\n    spec: {\n        generators: [{\n            gits: [{\n                repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                revision: \"HEAD\",\n                files: [{\n                    path: \"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\",\n                }],\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{cluster.name}}-git-files\",\n            },\n            spec: {\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                    targetRevision: \"HEAD\",\n                    path: \"applicationset/examples/git-generator-files-discovery/apps/guestbook\",\n                }],\n                destination: {\n                    server: \"{{cluster.address}}\",\n                    namespace: \"guestbook\",\n                },\n            },\n        },\n    },\n});\n// List Generator\nconst list = new argocd.ApplicationSet(\"list\", {\n    metadata: {\n        name: \"list\",\n    },\n    spec: {\n        generators: [{\n            lists: [{\n                elements: [\n                    {\n                        cluster: \"engineering-dev\",\n                        url: \"https://kubernetes.default.svc\",\n                    },\n                    {\n                        cluster: \"engineering-prod\",\n                        url: \"https://kubernetes.default.svc\",\n                        foo: \"bar\",\n                    },\n                ],\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{cluster}}-guestbook\",\n            },\n            spec: {\n                project: \"my-project\",\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                    targetRevision: \"HEAD\",\n                    path: \"applicationset/examples/list-generator/guestbook/{{cluster}}\",\n                }],\n                destination: {\n                    server: \"{{url}}\",\n                    namespace: \"guestbook\",\n                },\n            },\n        },\n    },\n});\n// Matrix Generator\nconst matrix = new argocd.ApplicationSet(\"matrix\", {\n    metadata: {\n        name: \"matrix\",\n    },\n    spec: {\n        generators: [{\n            matrices: [{\n                generators: [\n                    {\n                        gits: [{\n                            repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                            revision: \"HEAD\",\n                            directories: [{\n                                path: \"applicationset/examples/matrix/cluster-addons/*\",\n                            }],\n                        }],\n                    },\n                    {\n                        clusters: [{\n                            selector: {\n                                matchLabels: {\n                                    \"argocd.argoproj.io/secret-type\": \"cluster\",\n                                },\n                            },\n                        }],\n                    },\n                ],\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{path.basename}}-{{name}}\",\n            },\n            spec: {\n                project: \"default\",\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                    targetRevision: \"HEAD\",\n                    path: \"{{path}}\",\n                }],\n                destination: {\n                    server: \"{{server}}\",\n                    namespace: \"{{path.basename}}\",\n                },\n            },\n        },\n    },\n});\n// Merge Generator\nconst merge = new argocd.ApplicationSet(\"merge\", {\n    metadata: {\n        name: \"merge\",\n    },\n    spec: {\n        generators: [{\n            merges: [{\n                mergeKeys: [\"server\"],\n                generators: [\n                    {\n                        clusters: [{\n                            values: {\n                                kafka: \"true\",\n                                redis: \"false\",\n                            },\n                        }],\n                    },\n                    {\n                        clusters: [{\n                            selector: {\n                                matchLabels: {\n                                    \"use-kafka\": \"false\",\n                                },\n                            },\n                            values: {\n                                kafka: \"false\",\n                            },\n                        }],\n                    },\n                    {\n                        lists: [{\n                            elements: [{\n                                server: \"https://2.4.6.8\",\n                                \"values.redis\": \"true\",\n                            }],\n                        }],\n                    },\n                ],\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{name}}\",\n            },\n            spec: {\n                project: \"default\",\n                sources: [{\n                    repoUrl: \"https://github.com/argoproj/argo-cd.git\",\n                    path: \"app\",\n                    targetRevision: \"HEAD\",\n                    helm: {\n                        parameters: [\n                            {\n                                name: \"kafka\",\n                                value: \"{{values.kafka}}\",\n                            },\n                            {\n                                name: \"redis\",\n                                value: \"{{values.redis}}\",\n                            },\n                        ],\n                    },\n                }],\n                destination: {\n                    server: \"{{server}}\",\n                    namespace: \"default\",\n                },\n            },\n        },\n    },\n});\n// Pull Request Generator - GitHub\nconst prGithub = new argocd.ApplicationSet(\"pr_github\", {\n    metadata: {\n        name: \"pr-github\",\n    },\n    spec: {\n        generators: [{\n            pullRequests: [{\n                github: {\n                    api: \"https://git.example.com/\",\n                    owner: \"myorg\",\n                    repo: \"myrepository\",\n                    appSecretName: \"github-app-repo-creds\",\n                    tokenRef: {\n                        secretName: \"github-token\",\n                        key: \"token\",\n                    },\n                    labels: [\"preview\"],\n                },\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"myapp-{{branch}}-{{number}}\",\n            },\n            spec: {\n                project: \"default\",\n                sources: [{\n                    repoUrl: \"https://github.com/myorg/myrepo.git\",\n                    path: \"kubernetes/\",\n                    targetRevision: \"{{head_sha}}\",\n                    helm: {\n                        parameters: [{\n                            name: \"image.tag\",\n                            value: \"pull-{{head_sha}}\",\n                        }],\n                    },\n                }],\n                destination: {\n                    server: \"https://kubernetes.default.svc\",\n                    namespace: \"default\",\n                },\n            },\n        },\n    },\n});\n// SCM Provider Generator - GitHub\nconst scmGithub = new argocd.ApplicationSet(\"scm_github\", {\n    metadata: {\n        name: \"scm-github\",\n    },\n    spec: {\n        generators: [{\n            scmProviders: [{\n                github: {\n                    appSecretName: \"gh-app-repo-creds\",\n                    organization: \"myorg\",\n                },\n            }],\n        }],\n        template: {\n            metadata: {\n                name: \"{{repository}}\",\n            },\n            spec: {\n                project: \"default\",\n                sources: [{\n                    repoUrl: \"{{url}}\",\n                    path: \"kubernetes/\",\n                    targetRevision: \"{{branch}}\",\n                }],\n                destination: {\n                    server: \"https://kubernetes.default.svc\",\n                    namespace: \"default\",\n                },\n            },\n        },\n    },\n});\n// Progressive Sync - Rolling Update\nconst progressiveSync = new argocd.ApplicationSet(\"progressive_sync\", {\n    metadata: {\n        name: \"progressive-sync\",\n    },\n    spec: {\n        generators: [{\n            lists: [{\n                elements: [\n                    {\n                        cluster: \"engineering-dev\",\n                        url: \"https://1.2.3.4\",\n                        env: \"env-dev\",\n                    },\n                    {\n                        cluster: \"engineering-qa\",\n                        url: \"https://2.4.6.8\",\n                        env: \"env-qa\",\n                    },\n                    {\n                        cluster: \"engineering-prod\",\n                        url: \"https://9.8.7.6/\",\n                        env: \"env-prod\",\n                    },\n                ],\n            }],\n        }],\n        strategy: {\n            type: \"RollingSync\",\n            rollingSyncs: [{\n                steps: [\n                    {\n                        matchExpressions: [{\n                            key: \"envLabel\",\n                            operator: \"In\",\n                            values: [\"env-dev\"],\n                        }],\n                    },\n                    {\n                        matchExpressions: [{\n                            key: \"envLabel\",\n                            operator: \"In\",\n                            values: [\"env-qa\"],\n                        }],\n                        maxUpdate: \"0\",\n                    },\n                    {\n                        matchExpressions: [{\n                            key: \"envLabel\",\n                            operator: \"In\",\n                            values: [\"env-prod\"],\n                        }],\n                        maxUpdate: \"10%\",\n                    },\n                ],\n            }],\n        },\n        goTemplate: true,\n        template: {\n            metadata: {\n                name: \"{{.cluster}}-guestbook\",\n                labels: {\n                    envLabel: \"{{.env}}\",\n                },\n            },\n            spec: {\n                project: \"default\",\n                sources: [{\n                    repoUrl: \"https://github.com/infra-team/cluster-deployments.git\",\n                    path: \"guestbook/{{.cluster}}\",\n                    targetRevision: \"HEAD\",\n                }],\n                destination: {\n                    server: \"{{.url}}\",\n                    namespace: \"guestbook\",\n                },\n            },\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\n# Clusters Generator\nclusters_selector = argocd.ApplicationSet(\"clusters_selector\",\n    metadata={\n        \"name\": \"clusters-selector\",\n    },\n    spec={\n        \"generators\": [{\n            \"clusters\": [{\n                \"selector\": {\n                    \"match_labels\": {\n                        \"argocd.argoproj.io/secret-type\": \"cluster\",\n                    },\n                },\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{name}}-clusters-selector\",\n            },\n            \"spec\": {\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argocd-example-apps/\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"guestbook\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{server}}\",\n                    \"namespace\": \"default\",\n                },\n            },\n        },\n    })\n# Cluster Decision Resource Generator\ncluster_decision_resource = argocd.ApplicationSet(\"cluster_decision_resource\",\n    metadata={\n        \"name\": \"cluster-decision-resource\",\n    },\n    spec={\n        \"generators\": [{\n            \"cluster_decision_resources\": [{\n                \"config_map_ref\": \"my-configmap\",\n                \"name\": \"quak\",\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{name}}-guestbook\",\n            },\n            \"spec\": {\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argocd-example-apps/\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"guestbook\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{server}}\",\n                    \"namespace\": \"default\",\n                },\n            },\n        },\n    })\n# Git Generator - Directories\ngit_directories = argocd.ApplicationSet(\"git_directories\",\n    metadata={\n        \"name\": \"git-directories\",\n    },\n    spec={\n        \"generators\": [{\n            \"gits\": [{\n                \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                \"revision\": \"HEAD\",\n                \"directories\": [\n                    {\n                        \"path\": \"applicationset/examples/git-generator-directory/cluster-addons/*\",\n                    },\n                    {\n                        \"path\": \"applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\",\n                        \"exclude\": True,\n                    },\n                ],\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{path.basename}}-git-directories\",\n            },\n            \"spec\": {\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"{{path}}\",\n                }],\n                \"destination\": {\n                    \"server\": \"https://kubernetes.default.svc\",\n                    \"namespace\": \"{{path.basename}}\",\n                },\n            },\n        },\n    })\n# Git Generator - Files\ngit_files = argocd.ApplicationSet(\"git_files\",\n    metadata={\n        \"name\": \"git-files\",\n    },\n    spec={\n        \"generators\": [{\n            \"gits\": [{\n                \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                \"revision\": \"HEAD\",\n                \"files\": [{\n                    \"path\": \"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\",\n                }],\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{cluster.name}}-git-files\",\n            },\n            \"spec\": {\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"applicationset/examples/git-generator-files-discovery/apps/guestbook\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{cluster.address}}\",\n                    \"namespace\": \"guestbook\",\n                },\n            },\n        },\n    })\n# List Generator\nlist = argocd.ApplicationSet(\"list\",\n    metadata={\n        \"name\": \"list\",\n    },\n    spec={\n        \"generators\": [{\n            \"lists\": [{\n                \"elements\": [\n                    {\n                        \"cluster\": \"engineering-dev\",\n                        \"url\": \"https://kubernetes.default.svc\",\n                    },\n                    {\n                        \"cluster\": \"engineering-prod\",\n                        \"url\": \"https://kubernetes.default.svc\",\n                        \"foo\": \"bar\",\n                    },\n                ],\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{cluster}}-guestbook\",\n            },\n            \"spec\": {\n                \"project\": \"my-project\",\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"applicationset/examples/list-generator/guestbook/{{cluster}}\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{url}}\",\n                    \"namespace\": \"guestbook\",\n                },\n            },\n        },\n    })\n# Matrix Generator\nmatrix = argocd.ApplicationSet(\"matrix\",\n    metadata={\n        \"name\": \"matrix\",\n    },\n    spec={\n        \"generators\": [{\n            \"matrices\": [{\n                \"generators\": [\n                    {\n                        \"gits\": [{\n                            \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                            \"revision\": \"HEAD\",\n                            \"directories\": [{\n                                \"path\": \"applicationset/examples/matrix/cluster-addons/*\",\n                            }],\n                        }],\n                    },\n                    {\n                        \"clusters\": [{\n                            \"selector\": {\n                                \"match_labels\": {\n                                    \"argocd.argoproj.io/secret-type\": \"cluster\",\n                                },\n                            },\n                        }],\n                    },\n                ],\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{path.basename}}-{{name}}\",\n            },\n            \"spec\": {\n                \"project\": \"default\",\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                    \"target_revision\": \"HEAD\",\n                    \"path\": \"{{path}}\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{server}}\",\n                    \"namespace\": \"{{path.basename}}\",\n                },\n            },\n        },\n    })\n# Merge Generator\nmerge = argocd.ApplicationSet(\"merge\",\n    metadata={\n        \"name\": \"merge\",\n    },\n    spec={\n        \"generators\": [{\n            \"merges\": [{\n                \"merge_keys\": [\"server\"],\n                \"generators\": [\n                    {\n                        \"clusters\": [{\n                            \"values\": {\n                                \"kafka\": \"true\",\n                                \"redis\": \"false\",\n                            },\n                        }],\n                    },\n                    {\n                        \"clusters\": [{\n                            \"selector\": {\n                                \"match_labels\": {\n                                    \"use-kafka\": \"false\",\n                                },\n                            },\n                            \"values\": {\n                                \"kafka\": \"false\",\n                            },\n                        }],\n                    },\n                    {\n                        \"lists\": [{\n                            \"elements\": [{\n                                \"server\": \"https://2.4.6.8\",\n                                \"values.redis\": \"true\",\n                            }],\n                        }],\n                    },\n                ],\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{name}}\",\n            },\n            \"spec\": {\n                \"project\": \"default\",\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/argoproj/argo-cd.git\",\n                    \"path\": \"app\",\n                    \"target_revision\": \"HEAD\",\n                    \"helm\": {\n                        \"parameters\": [\n                            {\n                                \"name\": \"kafka\",\n                                \"value\": \"{{values.kafka}}\",\n                            },\n                            {\n                                \"name\": \"redis\",\n                                \"value\": \"{{values.redis}}\",\n                            },\n                        ],\n                    },\n                }],\n                \"destination\": {\n                    \"server\": \"{{server}}\",\n                    \"namespace\": \"default\",\n                },\n            },\n        },\n    })\n# Pull Request Generator - GitHub\npr_github = argocd.ApplicationSet(\"pr_github\",\n    metadata={\n        \"name\": \"pr-github\",\n    },\n    spec={\n        \"generators\": [{\n            \"pull_requests\": [{\n                \"github\": {\n                    \"api\": \"https://git.example.com/\",\n                    \"owner\": \"myorg\",\n                    \"repo\": \"myrepository\",\n                    \"app_secret_name\": \"github-app-repo-creds\",\n                    \"token_ref\": {\n                        \"secret_name\": \"github-token\",\n                        \"key\": \"token\",\n                    },\n                    \"labels\": [\"preview\"],\n                },\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"myapp-{{branch}}-{{number}}\",\n            },\n            \"spec\": {\n                \"project\": \"default\",\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/myorg/myrepo.git\",\n                    \"path\": \"kubernetes/\",\n                    \"target_revision\": \"{{head_sha}}\",\n                    \"helm\": {\n                        \"parameters\": [{\n                            \"name\": \"image.tag\",\n                            \"value\": \"pull-{{head_sha}}\",\n                        }],\n                    },\n                }],\n                \"destination\": {\n                    \"server\": \"https://kubernetes.default.svc\",\n                    \"namespace\": \"default\",\n                },\n            },\n        },\n    })\n# SCM Provider Generator - GitHub\nscm_github = argocd.ApplicationSet(\"scm_github\",\n    metadata={\n        \"name\": \"scm-github\",\n    },\n    spec={\n        \"generators\": [{\n            \"scm_providers\": [{\n                \"github\": {\n                    \"app_secret_name\": \"gh-app-repo-creds\",\n                    \"organization\": \"myorg\",\n                },\n            }],\n        }],\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{repository}}\",\n            },\n            \"spec\": {\n                \"project\": \"default\",\n                \"sources\": [{\n                    \"repo_url\": \"{{url}}\",\n                    \"path\": \"kubernetes/\",\n                    \"target_revision\": \"{{branch}}\",\n                }],\n                \"destination\": {\n                    \"server\": \"https://kubernetes.default.svc\",\n                    \"namespace\": \"default\",\n                },\n            },\n        },\n    })\n# Progressive Sync - Rolling Update\nprogressive_sync = argocd.ApplicationSet(\"progressive_sync\",\n    metadata={\n        \"name\": \"progressive-sync\",\n    },\n    spec={\n        \"generators\": [{\n            \"lists\": [{\n                \"elements\": [\n                    {\n                        \"cluster\": \"engineering-dev\",\n                        \"url\": \"https://1.2.3.4\",\n                        \"env\": \"env-dev\",\n                    },\n                    {\n                        \"cluster\": \"engineering-qa\",\n                        \"url\": \"https://2.4.6.8\",\n                        \"env\": \"env-qa\",\n                    },\n                    {\n                        \"cluster\": \"engineering-prod\",\n                        \"url\": \"https://9.8.7.6/\",\n                        \"env\": \"env-prod\",\n                    },\n                ],\n            }],\n        }],\n        \"strategy\": {\n            \"type\": \"RollingSync\",\n            \"rolling_syncs\": [{\n                \"steps\": [\n                    {\n                        \"match_expressions\": [{\n                            \"key\": \"envLabel\",\n                            \"operator\": \"In\",\n                            \"values\": [\"env-dev\"],\n                        }],\n                    },\n                    {\n                        \"match_expressions\": [{\n                            \"key\": \"envLabel\",\n                            \"operator\": \"In\",\n                            \"values\": [\"env-qa\"],\n                        }],\n                        \"max_update\": \"0\",\n                    },\n                    {\n                        \"match_expressions\": [{\n                            \"key\": \"envLabel\",\n                            \"operator\": \"In\",\n                            \"values\": [\"env-prod\"],\n                        }],\n                        \"max_update\": \"10%\",\n                    },\n                ],\n            }],\n        },\n        \"go_template\": True,\n        \"template\": {\n            \"metadata\": {\n                \"name\": \"{{.cluster}}-guestbook\",\n                \"labels\": {\n                    \"envLabel\": \"{{.env}}\",\n                },\n            },\n            \"spec\": {\n                \"project\": \"default\",\n                \"sources\": [{\n                    \"repo_url\": \"https://github.com/infra-team/cluster-deployments.git\",\n                    \"path\": \"guestbook/{{.cluster}}\",\n                    \"target_revision\": \"HEAD\",\n                }],\n                \"destination\": {\n                    \"server\": \"{{.url}}\",\n                    \"namespace\": \"guestbook\",\n                },\n            },\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Clusters Generator\n    var clustersSelector = new Argocd.ApplicationSet(\"clusters_selector\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"clusters-selector\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Clusters = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorClusterArgs\n                        {\n                            Selector = new Argocd.Inputs.ApplicationSetSpecGeneratorClusterSelectorArgs\n                            {\n                                MatchLabels = \n                                {\n                                    { \"argocd.argoproj.io/secret-type\", \"cluster\" },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{name}}-clusters-selector\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argocd-example-apps/\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"guestbook\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{server}}\",\n                        Namespace = \"default\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Cluster Decision Resource Generator\n    var clusterDecisionResource = new Argocd.ApplicationSet(\"cluster_decision_resource\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"cluster-decision-resource\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    ClusterDecisionResources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorClusterDecisionResourceArgs\n                        {\n                            ConfigMapRef = \"my-configmap\",\n                            Name = \"quak\",\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{name}}-guestbook\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argocd-example-apps/\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"guestbook\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{server}}\",\n                        Namespace = \"default\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Git Generator - Directories\n    var gitDirectories = new Argocd.ApplicationSet(\"git_directories\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"git-directories\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Gits = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorGitArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            Revision = \"HEAD\",\n                            Directories = new[]\n                            {\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorGitDirectoryArgs\n                                {\n                                    Path = \"applicationset/examples/git-generator-directory/cluster-addons/*\",\n                                },\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorGitDirectoryArgs\n                                {\n                                    Path = \"applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\",\n                                    Exclude = true,\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{path.basename}}-git-directories\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"{{path}}\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"https://kubernetes.default.svc\",\n                        Namespace = \"{{path.basename}}\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Git Generator - Files\n    var gitFiles = new Argocd.ApplicationSet(\"git_files\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"git-files\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Gits = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorGitArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            Revision = \"HEAD\",\n                            Files = new[]\n                            {\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorGitFileArgs\n                                {\n                                    Path = \"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{cluster.name}}-git-files\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"applicationset/examples/git-generator-files-discovery/apps/guestbook\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{cluster.address}}\",\n                        Namespace = \"guestbook\",\n                    },\n                },\n            },\n        },\n    });\n\n    // List Generator\n    var list = new Argocd.ApplicationSet(\"list\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"list\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Lists = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorListArgs\n                        {\n                            Elements = new[]\n                            {\n                                \n                                {\n                                    { \"cluster\", \"engineering-dev\" },\n                                    { \"url\", \"https://kubernetes.default.svc\" },\n                                },\n                                \n                                {\n                                    { \"cluster\", \"engineering-prod\" },\n                                    { \"url\", \"https://kubernetes.default.svc\" },\n                                    { \"foo\", \"bar\" },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{cluster}}-guestbook\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"my-project\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"applicationset/examples/list-generator/guestbook/{{cluster}}\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{url}}\",\n                        Namespace = \"guestbook\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Matrix Generator\n    var matrix = new Argocd.ApplicationSet(\"matrix\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"matrix\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Matrices = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixArgs\n                        {\n                            Generators = new[]\n                            {\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorArgs\n                                {\n                                    Gits = new[]\n                                    {\n                                        new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorGitArgs\n                                        {\n                                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                                            Revision = \"HEAD\",\n                                            Directories = new[]\n                                            {\n                                                new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArgs\n                                                {\n                                                    Path = \"applicationset/examples/matrix/cluster-addons/*\",\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorArgs\n                                {\n                                    Clusters = new[]\n                                    {\n                                        new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterArgs\n                                        {\n                                            Selector = new Argocd.Inputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorArgs\n                                            {\n                                                MatchLabels = \n                                                {\n                                                    { \"argocd.argoproj.io/secret-type\", \"cluster\" },\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{path.basename}}-{{name}}\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"default\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            TargetRevision = \"HEAD\",\n                            Path = \"{{path}}\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{server}}\",\n                        Namespace = \"{{path.basename}}\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Merge Generator\n    var merge = new Argocd.ApplicationSet(\"merge\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"merge\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Merges = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorMergeArgs\n                        {\n                            MergeKeys = new[]\n                            {\n                                \"server\",\n                            },\n                            Generators = new[]\n                            {\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorArgs\n                                {\n                                    Clusters = new[]\n                                    {\n                                        new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs\n                                        {\n                                            Values = \n                                            {\n                                                { \"kafka\", \"true\" },\n                                                { \"redis\", \"false\" },\n                                            },\n                                        },\n                                    },\n                                },\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorArgs\n                                {\n                                    Clusters = new[]\n                                    {\n                                        new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs\n                                        {\n                                            Selector = new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorArgs\n                                            {\n                                                MatchLabels = \n                                                {\n                                                    { \"use-kafka\", \"false\" },\n                                                },\n                                            },\n                                            Values = \n                                            {\n                                                { \"kafka\", \"false\" },\n                                            },\n                                        },\n                                    },\n                                },\n                                new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorArgs\n                                {\n                                    Lists = new[]\n                                    {\n                                        new Argocd.Inputs.ApplicationSetSpecGeneratorMergeGeneratorListArgs\n                                        {\n                                            Elements = new[]\n                                            {\n                                                \n                                                {\n                                                    { \"server\", \"https://2.4.6.8\" },\n                                                    { \"values.redis\", \"true\" },\n                                                },\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{name}}\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"default\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/argoproj/argo-cd.git\",\n                            Path = \"app\",\n                            TargetRevision = \"HEAD\",\n                            Helm = new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceHelmArgs\n                            {\n                                Parameters = new[]\n                                {\n                                    new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs\n                                    {\n                                        Name = \"kafka\",\n                                        Value = \"{{values.kafka}}\",\n                                    },\n                                    new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs\n                                    {\n                                        Name = \"redis\",\n                                        Value = \"{{values.redis}}\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{server}}\",\n                        Namespace = \"default\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Pull Request Generator - GitHub\n    var prGithub = new Argocd.ApplicationSet(\"pr_github\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"pr-github\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    PullRequests = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorPullRequestArgs\n                        {\n                            Github = new Argocd.Inputs.ApplicationSetSpecGeneratorPullRequestGithubArgs\n                            {\n                                Api = \"https://git.example.com/\",\n                                Owner = \"myorg\",\n                                Repo = \"myrepository\",\n                                AppSecretName = \"github-app-repo-creds\",\n                                TokenRef = new Argocd.Inputs.ApplicationSetSpecGeneratorPullRequestGithubTokenRefArgs\n                                {\n                                    SecretName = \"github-token\",\n                                    Key = \"token\",\n                                },\n                                Labels = new[]\n                                {\n                                    \"preview\",\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"myapp-{{branch}}-{{number}}\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"default\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/myorg/myrepo.git\",\n                            Path = \"kubernetes/\",\n                            TargetRevision = \"{{head_sha}}\",\n                            Helm = new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceHelmArgs\n                            {\n                                Parameters = new[]\n                                {\n                                    new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs\n                                    {\n                                        Name = \"image.tag\",\n                                        Value = \"pull-{{head_sha}}\",\n                                    },\n                                },\n                            },\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"https://kubernetes.default.svc\",\n                        Namespace = \"default\",\n                    },\n                },\n            },\n        },\n    });\n\n    // SCM Provider Generator - GitHub\n    var scmGithub = new Argocd.ApplicationSet(\"scm_github\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"scm-github\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    ScmProviders = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorScmProviderArgs\n                        {\n                            Github = new Argocd.Inputs.ApplicationSetSpecGeneratorScmProviderGithubArgs\n                            {\n                                AppSecretName = \"gh-app-repo-creds\",\n                                Organization = \"myorg\",\n                            },\n                        },\n                    },\n                },\n            },\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{repository}}\",\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"default\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"{{url}}\",\n                            Path = \"kubernetes/\",\n                            TargetRevision = \"{{branch}}\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"https://kubernetes.default.svc\",\n                        Namespace = \"default\",\n                    },\n                },\n            },\n        },\n    });\n\n    // Progressive Sync - Rolling Update\n    var progressiveSync = new Argocd.ApplicationSet(\"progressive_sync\", new()\n    {\n        Metadata = new Argocd.Inputs.ApplicationSetMetadataArgs\n        {\n            Name = \"progressive-sync\",\n        },\n        Spec = new Argocd.Inputs.ApplicationSetSpecArgs\n        {\n            Generators = new[]\n            {\n                new Argocd.Inputs.ApplicationSetSpecGeneratorArgs\n                {\n                    Lists = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecGeneratorListArgs\n                        {\n                            Elements = new[]\n                            {\n                                \n                                {\n                                    { \"cluster\", \"engineering-dev\" },\n                                    { \"url\", \"https://1.2.3.4\" },\n                                    { \"env\", \"env-dev\" },\n                                },\n                                \n                                {\n                                    { \"cluster\", \"engineering-qa\" },\n                                    { \"url\", \"https://2.4.6.8\" },\n                                    { \"env\", \"env-qa\" },\n                                },\n                                \n                                {\n                                    { \"cluster\", \"engineering-prod\" },\n                                    { \"url\", \"https://9.8.7.6/\" },\n                                    { \"env\", \"env-prod\" },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n            Strategy = new Argocd.Inputs.ApplicationSetSpecStrategyArgs\n            {\n                Type = \"RollingSync\",\n                RollingSyncs = new[]\n                {\n                    new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncArgs\n                    {\n                        Steps = new[]\n                        {\n                            new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepArgs\n                            {\n                                MatchExpressions = new[]\n                                {\n                                    new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs\n                                    {\n                                        Key = \"envLabel\",\n                                        Operator = \"In\",\n                                        Values = new[]\n                                        {\n                                            \"env-dev\",\n                                        },\n                                    },\n                                },\n                            },\n                            new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepArgs\n                            {\n                                MatchExpressions = new[]\n                                {\n                                    new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs\n                                    {\n                                        Key = \"envLabel\",\n                                        Operator = \"In\",\n                                        Values = new[]\n                                        {\n                                            \"env-qa\",\n                                        },\n                                    },\n                                },\n                                MaxUpdate = \"0\",\n                            },\n                            new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepArgs\n                            {\n                                MatchExpressions = new[]\n                                {\n                                    new Argocd.Inputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs\n                                    {\n                                        Key = \"envLabel\",\n                                        Operator = \"In\",\n                                        Values = new[]\n                                        {\n                                            \"env-prod\",\n                                        },\n                                    },\n                                },\n                                MaxUpdate = \"10%\",\n                            },\n                        },\n                    },\n                },\n            },\n            GoTemplate = true,\n            Template = new Argocd.Inputs.ApplicationSetSpecTemplateArgs\n            {\n                Metadata = new Argocd.Inputs.ApplicationSetSpecTemplateMetadataArgs\n                {\n                    Name = \"{{.cluster}}-guestbook\",\n                    Labels = \n                    {\n                        { \"envLabel\", \"{{.env}}\" },\n                    },\n                },\n                Spec = new Argocd.Inputs.ApplicationSetSpecTemplateSpecArgs\n                {\n                    Project = \"default\",\n                    Sources = new[]\n                    {\n                        new Argocd.Inputs.ApplicationSetSpecTemplateSpecSourceArgs\n                        {\n                            RepoUrl = \"https://github.com/infra-team/cluster-deployments.git\",\n                            Path = \"guestbook/{{.cluster}}\",\n                            TargetRevision = \"HEAD\",\n                        },\n                    },\n                    Destination = new Argocd.Inputs.ApplicationSetSpecTemplateSpecDestinationArgs\n                    {\n                        Server = \"{{.url}}\",\n                        Namespace = \"guestbook\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Clusters Generator\n\t\t_, err := argocd.NewApplicationSet(ctx, \"clusters_selector\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"clusters-selector\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tClusters: argocd.ApplicationSetSpecGeneratorClusterArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorClusterArgs{\n\t\t\t\t\t\t\t\tSelector: \u0026argocd.ApplicationSetSpecGeneratorClusterSelectorArgs{\n\t\t\t\t\t\t\t\t\tMatchLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"argocd.argoproj.io/secret-type\": pulumi.String(\"cluster\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{name}}-clusters-selector\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argocd-example-apps/\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"guestbook\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{server}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Cluster Decision Resource Generator\n\t\t_, err = argocd.NewApplicationSet(ctx, \"cluster_decision_resource\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"cluster-decision-resource\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tClusterDecisionResources: argocd.ApplicationSetSpecGeneratorClusterDecisionResourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorClusterDecisionResourceArgs{\n\t\t\t\t\t\t\t\tConfigMapRef: pulumi.String(\"my-configmap\"),\n\t\t\t\t\t\t\t\tName:         pulumi.String(\"quak\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{name}}-guestbook\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argocd-example-apps/\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"guestbook\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{server}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Git Generator - Directories\n\t\t_, err = argocd.NewApplicationSet(ctx, \"git_directories\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"git-directories\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tGits: argocd.ApplicationSetSpecGeneratorGitArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorGitArgs{\n\t\t\t\t\t\t\t\tRepoUrl:  pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tDirectories: argocd.ApplicationSetSpecGeneratorGitDirectoryArray{\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorGitDirectoryArgs{\n\t\t\t\t\t\t\t\t\t\tPath: pulumi.String(\"applicationset/examples/git-generator-directory/cluster-addons/*\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorGitDirectoryArgs{\n\t\t\t\t\t\t\t\t\t\tPath:    pulumi.String(\"applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\"),\n\t\t\t\t\t\t\t\t\t\tExclude: pulumi.Bool(true),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{path.basename}}-git-directories\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"{{path}}\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"{{path.basename}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Git Generator - Files\n\t\t_, err = argocd.NewApplicationSet(ctx, \"git_files\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"git-files\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tGits: argocd.ApplicationSetSpecGeneratorGitArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorGitArgs{\n\t\t\t\t\t\t\t\tRepoUrl:  pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tFiles: argocd.ApplicationSetSpecGeneratorGitFileArray{\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorGitFileArgs{\n\t\t\t\t\t\t\t\t\t\tPath: pulumi.String(\"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{cluster.name}}-git-files\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"applicationset/examples/git-generator-files-discovery/apps/guestbook\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{cluster.address}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"guestbook\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// List Generator\n\t\t_, err = argocd.NewApplicationSet(ctx, \"list\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"list\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tLists: argocd.ApplicationSetSpecGeneratorListArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorListArgs{\n\t\t\t\t\t\t\t\tElements: pulumi.StringMapArray{\n\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"cluster\": pulumi.String(\"engineering-dev\"),\n\t\t\t\t\t\t\t\t\t\t\"url\":     pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"cluster\": pulumi.String(\"engineering-prod\"),\n\t\t\t\t\t\t\t\t\t\t\"url\":     pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\t\t\t\t\"foo\":     pulumi.String(\"bar\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{cluster}}-guestbook\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"my-project\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"applicationset/examples/list-generator/guestbook/{{cluster}}\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{url}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"guestbook\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Matrix Generator\n\t\t_, err = argocd.NewApplicationSet(ctx, \"matrix\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"matrix\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tMatrices: argocd.ApplicationSetSpecGeneratorMatrixArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixArgs{\n\t\t\t\t\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorMatrixGeneratorArray{\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorArgs{\n\t\t\t\t\t\t\t\t\t\tGits: argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitArray{\n\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitArgs{\n\t\t\t\t\t\t\t\t\t\t\t\tRepoUrl:  pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\t\t\t\t\tRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\t\t\t\t\tDirectories: argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArray{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArgs{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tPath: pulumi.String(\"applicationset/examples/matrix/cluster-addons/*\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorArgs{\n\t\t\t\t\t\t\t\t\t\tClusters: argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterArray{\n\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterArgs{\n\t\t\t\t\t\t\t\t\t\t\t\tSelector: \u0026argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorArgs{\n\t\t\t\t\t\t\t\t\t\t\t\t\tMatchLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"argocd.argoproj.io/secret-type\": pulumi.String(\"cluster\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{path.basename}}-{{name}}\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"{{path}}\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{server}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"{{path.basename}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Merge Generator\n\t\t_, err = argocd.NewApplicationSet(ctx, \"merge\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"merge\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tMerges: argocd.ApplicationSetSpecGeneratorMergeArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeArgs{\n\t\t\t\t\t\t\t\tMergeKeys: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\tpulumi.String(\"server\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorMergeGeneratorArray{\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{\n\t\t\t\t\t\t\t\t\t\tClusters: argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArray{\n\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs{\n\t\t\t\t\t\t\t\t\t\t\t\tValues: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"kafka\": pulumi.String(\"true\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"redis\": pulumi.String(\"false\"),\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{\n\t\t\t\t\t\t\t\t\t\tClusters: argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArray{\n\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs{\n\t\t\t\t\t\t\t\t\t\t\t\tSelector: \u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorArgs{\n\t\t\t\t\t\t\t\t\t\t\t\t\tMatchLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"use-kafka\": pulumi.String(\"false\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tValues: pulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"kafka\": pulumi.String(\"false\"),\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{\n\t\t\t\t\t\t\t\t\t\tLists: argocd.ApplicationSetSpecGeneratorMergeGeneratorListArray{\n\t\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorMergeGeneratorListArgs{\n\t\t\t\t\t\t\t\t\t\t\t\tElements: pulumi.StringMapArray{\n\t\t\t\t\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"server\":       pulumi.String(\"https://2.4.6.8\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"values.redis\": pulumi.String(\"true\"),\n\t\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{name}}\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/argoproj/argo-cd.git\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"app\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t\tHelm: \u0026argocd.ApplicationSetSpecTemplateSpecSourceHelmArgs{\n\t\t\t\t\t\t\t\t\tParameters: argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArray{\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{\n\t\t\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"kafka\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"{{values.kafka}}\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{\n\t\t\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"redis\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"{{values.redis}}\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{server}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Pull Request Generator - GitHub\n\t\t_, err = argocd.NewApplicationSet(ctx, \"pr_github\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"pr-github\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tPullRequests: argocd.ApplicationSetSpecGeneratorPullRequestArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorPullRequestArgs{\n\t\t\t\t\t\t\t\tGithub: \u0026argocd.ApplicationSetSpecGeneratorPullRequestGithubArgs{\n\t\t\t\t\t\t\t\t\tApi:           pulumi.String(\"https://git.example.com/\"),\n\t\t\t\t\t\t\t\t\tOwner:         pulumi.String(\"myorg\"),\n\t\t\t\t\t\t\t\t\tRepo:          pulumi.String(\"myrepository\"),\n\t\t\t\t\t\t\t\t\tAppSecretName: pulumi.String(\"github-app-repo-creds\"),\n\t\t\t\t\t\t\t\t\tTokenRef: \u0026argocd.ApplicationSetSpecGeneratorPullRequestGithubTokenRefArgs{\n\t\t\t\t\t\t\t\t\t\tSecretName: pulumi.String(\"github-token\"),\n\t\t\t\t\t\t\t\t\t\tKey:        pulumi.String(\"token\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tLabels: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\tpulumi.String(\"preview\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"myapp-{{branch}}-{{number}}\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/myorg/myrepo.git\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"kubernetes/\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"{{head_sha}}\"),\n\t\t\t\t\t\t\t\tHelm: \u0026argocd.ApplicationSetSpecTemplateSpecSourceHelmArgs{\n\t\t\t\t\t\t\t\t\tParameters: argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArray{\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{\n\t\t\t\t\t\t\t\t\t\t\tName:  pulumi.String(\"image.tag\"),\n\t\t\t\t\t\t\t\t\t\t\tValue: pulumi.String(\"pull-{{head_sha}}\"),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// SCM Provider Generator - GitHub\n\t\t_, err = argocd.NewApplicationSet(ctx, \"scm_github\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"scm-github\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tScmProviders: argocd.ApplicationSetSpecGeneratorScmProviderArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorScmProviderArgs{\n\t\t\t\t\t\t\t\tGithub: \u0026argocd.ApplicationSetSpecGeneratorScmProviderGithubArgs{\n\t\t\t\t\t\t\t\t\tAppSecretName: pulumi.String(\"gh-app-repo-creds\"),\n\t\t\t\t\t\t\t\t\tOrganization:  pulumi.String(\"myorg\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{repository}}\"),\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"{{url}}\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"kubernetes/\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"{{branch}}\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Progressive Sync - Rolling Update\n\t\t_, err = argocd.NewApplicationSet(ctx, \"progressive_sync\", \u0026argocd.ApplicationSetArgs{\n\t\t\tMetadata: \u0026argocd.ApplicationSetMetadataArgs{\n\t\t\t\tName: pulumi.String(\"progressive-sync\"),\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ApplicationSetSpecArgs{\n\t\t\t\tGenerators: argocd.ApplicationSetSpecGeneratorArray{\n\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorArgs{\n\t\t\t\t\t\tLists: argocd.ApplicationSetSpecGeneratorListArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecGeneratorListArgs{\n\t\t\t\t\t\t\t\tElements: pulumi.StringMapArray{\n\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"cluster\": pulumi.String(\"engineering-dev\"),\n\t\t\t\t\t\t\t\t\t\t\"url\":     pulumi.String(\"https://1.2.3.4\"),\n\t\t\t\t\t\t\t\t\t\t\"env\":     pulumi.String(\"env-dev\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"cluster\": pulumi.String(\"engineering-qa\"),\n\t\t\t\t\t\t\t\t\t\t\"url\":     pulumi.String(\"https://2.4.6.8\"),\n\t\t\t\t\t\t\t\t\t\t\"env\":     pulumi.String(\"env-qa\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tpulumi.StringMap{\n\t\t\t\t\t\t\t\t\t\t\"cluster\": pulumi.String(\"engineering-prod\"),\n\t\t\t\t\t\t\t\t\t\t\"url\":     pulumi.String(\"https://9.8.7.6/\"),\n\t\t\t\t\t\t\t\t\t\t\"env\":     pulumi.String(\"env-prod\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tStrategy: \u0026argocd.ApplicationSetSpecStrategyArgs{\n\t\t\t\t\tType: pulumi.String(\"RollingSync\"),\n\t\t\t\t\tRollingSyncs: argocd.ApplicationSetSpecStrategyRollingSyncArray{\n\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncArgs{\n\t\t\t\t\t\t\tSteps: argocd.ApplicationSetSpecStrategyRollingSyncStepArray{\n\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{\n\t\t\t\t\t\t\t\t\tMatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:      pulumi.String(\"envLabel\"),\n\t\t\t\t\t\t\t\t\t\t\tOperator: pulumi.String(\"In\"),\n\t\t\t\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\t\t\tpulumi.String(\"env-dev\"),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{\n\t\t\t\t\t\t\t\t\tMatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:      pulumi.String(\"envLabel\"),\n\t\t\t\t\t\t\t\t\t\t\tOperator: pulumi.String(\"In\"),\n\t\t\t\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\t\t\tpulumi.String(\"env-qa\"),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tMaxUpdate: pulumi.String(\"0\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{\n\t\t\t\t\t\t\t\t\tMatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{\n\t\t\t\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{\n\t\t\t\t\t\t\t\t\t\t\tKey:      pulumi.String(\"envLabel\"),\n\t\t\t\t\t\t\t\t\t\t\tOperator: pulumi.String(\"In\"),\n\t\t\t\t\t\t\t\t\t\t\tValues: pulumi.StringArray{\n\t\t\t\t\t\t\t\t\t\t\t\tpulumi.String(\"env-prod\"),\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tMaxUpdate: pulumi.String(\"10%\"),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tGoTemplate: pulumi.Bool(true),\n\t\t\t\tTemplate: \u0026argocd.ApplicationSetSpecTemplateArgs{\n\t\t\t\t\tMetadata: \u0026argocd.ApplicationSetSpecTemplateMetadataArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{.cluster}}-guestbook\"),\n\t\t\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\t\t\"envLabel\": pulumi.String(\"{{.env}}\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tSpec: \u0026argocd.ApplicationSetSpecTemplateSpecArgs{\n\t\t\t\t\t\tProject: pulumi.String(\"default\"),\n\t\t\t\t\t\tSources: argocd.ApplicationSetSpecTemplateSpecSourceArray{\n\t\t\t\t\t\t\t\u0026argocd.ApplicationSetSpecTemplateSpecSourceArgs{\n\t\t\t\t\t\t\t\tRepoUrl:        pulumi.String(\"https://github.com/infra-team/cluster-deployments.git\"),\n\t\t\t\t\t\t\t\tPath:           pulumi.String(\"guestbook/{{.cluster}}\"),\n\t\t\t\t\t\t\t\tTargetRevision: pulumi.String(\"HEAD\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDestination: \u0026argocd.ApplicationSetSpecTemplateSpecDestinationArgs{\n\t\t\t\t\t\t\tServer:    pulumi.String(\"{{.url}}\"),\n\t\t\t\t\t\t\tNamespace: pulumi.String(\"guestbook\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.ApplicationSet;\nimport com.pulumi.argocd.ApplicationSetArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetMetadataArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecTemplateArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecTemplateMetadataArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecTemplateSpecArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecTemplateSpecDestinationArgs;\nimport com.pulumi.argocd.inputs.ApplicationSetSpecStrategyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Clusters Generator\n        var clustersSelector = new ApplicationSet(\"clustersSelector\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"clusters-selector\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .clusters(ApplicationSetSpecGeneratorClusterArgs.builder()\n                        .selector(ApplicationSetSpecGeneratorClusterSelectorArgs.builder()\n                            .matchLabels(Map.of(\"argocd.argoproj.io/secret-type\", \"cluster\"))\n                            .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{name}}-clusters-selector\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argocd-example-apps/\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"guestbook\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{server}}\")\n                            .namespace(\"default\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Cluster Decision Resource Generator\n        var clusterDecisionResource = new ApplicationSet(\"clusterDecisionResource\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"cluster-decision-resource\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .clusterDecisionResources(ApplicationSetSpecGeneratorClusterDecisionResourceArgs.builder()\n                        .configMapRef(\"my-configmap\")\n                        .name(\"quak\")\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{name}}-guestbook\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argocd-example-apps/\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"guestbook\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{server}}\")\n                            .namespace(\"default\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Git Generator - Directories\n        var gitDirectories = new ApplicationSet(\"gitDirectories\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"git-directories\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .gits(ApplicationSetSpecGeneratorGitArgs.builder()\n                        .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                        .revision(\"HEAD\")\n                        .directories(                        \n                            ApplicationSetSpecGeneratorGitDirectoryArgs.builder()\n                                .path(\"applicationset/examples/git-generator-directory/cluster-addons/*\")\n                                .build(),\n                            ApplicationSetSpecGeneratorGitDirectoryArgs.builder()\n                                .path(\"applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\")\n                                .exclude(true)\n                                .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{path.basename}}-git-directories\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"{{path}}\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"https://kubernetes.default.svc\")\n                            .namespace(\"{{path.basename}}\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Git Generator - Files\n        var gitFiles = new ApplicationSet(\"gitFiles\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"git-files\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .gits(ApplicationSetSpecGeneratorGitArgs.builder()\n                        .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                        .revision(\"HEAD\")\n                        .files(ApplicationSetSpecGeneratorGitFileArgs.builder()\n                            .path(\"applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\")\n                            .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{cluster.name}}-git-files\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"applicationset/examples/git-generator-files-discovery/apps/guestbook\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{cluster.address}}\")\n                            .namespace(\"guestbook\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // List Generator\n        var list = new ApplicationSet(\"list\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"list\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .lists(ApplicationSetSpecGeneratorListArgs.builder()\n                        .elements(                        \n                            Map.ofEntries(\n                                Map.entry(\"cluster\", \"engineering-dev\"),\n                                Map.entry(\"url\", \"https://kubernetes.default.svc\")\n                            ),\n                            Map.ofEntries(\n                                Map.entry(\"cluster\", \"engineering-prod\"),\n                                Map.entry(\"url\", \"https://kubernetes.default.svc\"),\n                                Map.entry(\"foo\", \"bar\")\n                            ))\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{cluster}}-guestbook\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"my-project\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"applicationset/examples/list-generator/guestbook/{{cluster}}\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{url}}\")\n                            .namespace(\"guestbook\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Matrix Generator\n        var matrix = new ApplicationSet(\"matrix\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"matrix\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .matrices(ApplicationSetSpecGeneratorMatrixArgs.builder()\n                        .generators(                        \n                            ApplicationSetSpecGeneratorMatrixGeneratorArgs.builder()\n                                .gits(ApplicationSetSpecGeneratorMatrixGeneratorGitArgs.builder()\n                                    .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                                    .revision(\"HEAD\")\n                                    .directories(ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArgs.builder()\n                                        .path(\"applicationset/examples/matrix/cluster-addons/*\")\n                                        .build())\n                                    .build())\n                                .build(),\n                            ApplicationSetSpecGeneratorMatrixGeneratorArgs.builder()\n                                .clusters(ApplicationSetSpecGeneratorMatrixGeneratorClusterArgs.builder()\n                                    .selector(ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorArgs.builder()\n                                        .matchLabels(Map.of(\"argocd.argoproj.io/secret-type\", \"cluster\"))\n                                        .build())\n                                    .build())\n                                .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{path.basename}}-{{name}}\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"default\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                            .targetRevision(\"HEAD\")\n                            .path(\"{{path}}\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{server}}\")\n                            .namespace(\"{{path.basename}}\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Merge Generator\n        var merge = new ApplicationSet(\"merge\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"merge\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .merges(ApplicationSetSpecGeneratorMergeArgs.builder()\n                        .mergeKeys(\"server\")\n                        .generators(                        \n                            ApplicationSetSpecGeneratorMergeGeneratorArgs.builder()\n                                .clusters(ApplicationSetSpecGeneratorMergeGeneratorClusterArgs.builder()\n                                    .values(Map.ofEntries(\n                                        Map.entry(\"kafka\", true),\n                                        Map.entry(\"redis\", false)\n                                    ))\n                                    .build())\n                                .build(),\n                            ApplicationSetSpecGeneratorMergeGeneratorArgs.builder()\n                                .clusters(ApplicationSetSpecGeneratorMergeGeneratorClusterArgs.builder()\n                                    .selector(ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorArgs.builder()\n                                        .matchLabels(Map.of(\"use-kafka\", \"false\"))\n                                        .build())\n                                    .values(Map.of(\"kafka\", \"false\"))\n                                    .build())\n                                .build(),\n                            ApplicationSetSpecGeneratorMergeGeneratorArgs.builder()\n                                .lists(ApplicationSetSpecGeneratorMergeGeneratorListArgs.builder()\n                                    .elements(Map.ofEntries(\n                                        Map.entry(\"server\", \"https://2.4.6.8\"),\n                                        Map.entry(\"values.redis\", \"true\")\n                                    ))\n                                    .build())\n                                .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{name}}\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"default\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/argoproj/argo-cd.git\")\n                            .path(\"app\")\n                            .targetRevision(\"HEAD\")\n                            .helm(ApplicationSetSpecTemplateSpecSourceHelmArgs.builder()\n                                .parameters(                                \n                                    ApplicationSetSpecTemplateSpecSourceHelmParameterArgs.builder()\n                                        .name(\"kafka\")\n                                        .value(\"{{values.kafka}}\")\n                                        .build(),\n                                    ApplicationSetSpecTemplateSpecSourceHelmParameterArgs.builder()\n                                        .name(\"redis\")\n                                        .value(\"{{values.redis}}\")\n                                        .build())\n                                .build())\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{server}}\")\n                            .namespace(\"default\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Pull Request Generator - GitHub\n        var prGithub = new ApplicationSet(\"prGithub\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"pr-github\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .pullRequests(ApplicationSetSpecGeneratorPullRequestArgs.builder()\n                        .github(ApplicationSetSpecGeneratorPullRequestGithubArgs.builder()\n                            .api(\"https://git.example.com/\")\n                            .owner(\"myorg\")\n                            .repo(\"myrepository\")\n                            .appSecretName(\"github-app-repo-creds\")\n                            .tokenRef(ApplicationSetSpecGeneratorPullRequestGithubTokenRefArgs.builder()\n                                .secretName(\"github-token\")\n                                .key(\"token\")\n                                .build())\n                            .labels(\"preview\")\n                            .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"myapp-{{branch}}-{{number}}\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"default\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/myorg/myrepo.git\")\n                            .path(\"kubernetes/\")\n                            .targetRevision(\"{{head_sha}}\")\n                            .helm(ApplicationSetSpecTemplateSpecSourceHelmArgs.builder()\n                                .parameters(ApplicationSetSpecTemplateSpecSourceHelmParameterArgs.builder()\n                                    .name(\"image.tag\")\n                                    .value(\"pull-{{head_sha}}\")\n                                    .build())\n                                .build())\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"https://kubernetes.default.svc\")\n                            .namespace(\"default\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // SCM Provider Generator - GitHub\n        var scmGithub = new ApplicationSet(\"scmGithub\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"scm-github\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .scmProviders(ApplicationSetSpecGeneratorScmProviderArgs.builder()\n                        .github(ApplicationSetSpecGeneratorScmProviderGithubArgs.builder()\n                            .appSecretName(\"gh-app-repo-creds\")\n                            .organization(\"myorg\")\n                            .build())\n                        .build())\n                    .build())\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{repository}}\")\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"default\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"{{url}}\")\n                            .path(\"kubernetes/\")\n                            .targetRevision(\"{{branch}}\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"https://kubernetes.default.svc\")\n                            .namespace(\"default\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n        // Progressive Sync - Rolling Update\n        var progressiveSync = new ApplicationSet(\"progressiveSync\", ApplicationSetArgs.builder()\n            .metadata(ApplicationSetMetadataArgs.builder()\n                .name(\"progressive-sync\")\n                .build())\n            .spec(ApplicationSetSpecArgs.builder()\n                .generators(ApplicationSetSpecGeneratorArgs.builder()\n                    .lists(ApplicationSetSpecGeneratorListArgs.builder()\n                        .elements(                        \n                            Map.ofEntries(\n                                Map.entry(\"cluster\", \"engineering-dev\"),\n                                Map.entry(\"url\", \"https://1.2.3.4\"),\n                                Map.entry(\"env\", \"env-dev\")\n                            ),\n                            Map.ofEntries(\n                                Map.entry(\"cluster\", \"engineering-qa\"),\n                                Map.entry(\"url\", \"https://2.4.6.8\"),\n                                Map.entry(\"env\", \"env-qa\")\n                            ),\n                            Map.ofEntries(\n                                Map.entry(\"cluster\", \"engineering-prod\"),\n                                Map.entry(\"url\", \"https://9.8.7.6/\"),\n                                Map.entry(\"env\", \"env-prod\")\n                            ))\n                        .build())\n                    .build())\n                .strategy(ApplicationSetSpecStrategyArgs.builder()\n                    .type(\"RollingSync\")\n                    .rollingSyncs(ApplicationSetSpecStrategyRollingSyncArgs.builder()\n                        .steps(                        \n                            ApplicationSetSpecStrategyRollingSyncStepArgs.builder()\n                                .matchExpressions(ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs.builder()\n                                    .key(\"envLabel\")\n                                    .operator(\"In\")\n                                    .values(\"env-dev\")\n                                    .build())\n                                .build(),\n                            ApplicationSetSpecStrategyRollingSyncStepArgs.builder()\n                                .matchExpressions(ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs.builder()\n                                    .key(\"envLabel\")\n                                    .operator(\"In\")\n                                    .values(\"env-qa\")\n                                    .build())\n                                .maxUpdate(\"0\")\n                                .build(),\n                            ApplicationSetSpecStrategyRollingSyncStepArgs.builder()\n                                .matchExpressions(ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs.builder()\n                                    .key(\"envLabel\")\n                                    .operator(\"In\")\n                                    .values(\"env-prod\")\n                                    .build())\n                                .maxUpdate(\"10%\")\n                                .build())\n                        .build())\n                    .build())\n                .goTemplate(true)\n                .template(ApplicationSetSpecTemplateArgs.builder()\n                    .metadata(ApplicationSetSpecTemplateMetadataArgs.builder()\n                        .name(\"{{.cluster}}-guestbook\")\n                        .labels(Map.of(\"envLabel\", \"{{.env}}\"))\n                        .build())\n                    .spec(ApplicationSetSpecTemplateSpecArgs.builder()\n                        .project(\"default\")\n                        .sources(ApplicationSetSpecTemplateSpecSourceArgs.builder()\n                            .repoUrl(\"https://github.com/infra-team/cluster-deployments.git\")\n                            .path(\"guestbook/{{.cluster}}\")\n                            .targetRevision(\"HEAD\")\n                            .build())\n                        .destination(ApplicationSetSpecTemplateSpecDestinationArgs.builder()\n                            .server(\"{{.url}}\")\n                            .namespace(\"guestbook\")\n                            .build())\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Clusters Generator\n  clustersSelector:\n    type: argocd:ApplicationSet\n    name: clusters_selector\n    properties:\n      metadata:\n        name: clusters-selector\n      spec:\n        generators:\n          - clusters:\n              - selector:\n                  matchLabels:\n                    argocd.argoproj.io/secret-type: cluster\n        template:\n          metadata:\n            name: '{{name}}-clusters-selector'\n          spec:\n            sources:\n              - repoUrl: https://github.com/argoproj/argocd-example-apps/\n                targetRevision: HEAD\n                path: guestbook\n            destination:\n              server: '{{server}}'\n              namespace: default\n  # Cluster Decision Resource Generator\n  clusterDecisionResource:\n    type: argocd:ApplicationSet\n    name: cluster_decision_resource\n    properties:\n      metadata:\n        name: cluster-decision-resource\n      spec:\n        generators:\n          - clusterDecisionResources:\n              - configMapRef: my-configmap\n                name: quak\n        template:\n          metadata:\n            name: '{{name}}-guestbook'\n          spec:\n            sources:\n              - repoUrl: https://github.com/argoproj/argocd-example-apps/\n                targetRevision: HEAD\n                path: guestbook\n            destination:\n              server: '{{server}}'\n              namespace: default\n  # Git Generator - Directories\n  gitDirectories:\n    type: argocd:ApplicationSet\n    name: git_directories\n    properties:\n      metadata:\n        name: git-directories\n      spec:\n        generators:\n          - gits:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                revision: HEAD\n                directories:\n                  - path: applicationset/examples/git-generator-directory/cluster-addons/*\n                  - path: applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook\n                    exclude: true\n        template:\n          metadata:\n            name: '{{path.basename}}-git-directories'\n          spec:\n            sources:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                targetRevision: HEAD\n                path: '{{path}}'\n            destination:\n              server: https://kubernetes.default.svc\n              namespace: '{{path.basename}}'\n  # Git Generator - Files\n  gitFiles:\n    type: argocd:ApplicationSet\n    name: git_files\n    properties:\n      metadata:\n        name: git-files\n      spec:\n        generators:\n          - gits:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                revision: HEAD\n                files:\n                  - path: applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json\n        template:\n          metadata:\n            name: '{{cluster.name}}-git-files'\n          spec:\n            sources:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                targetRevision: HEAD\n                path: applicationset/examples/git-generator-files-discovery/apps/guestbook\n            destination:\n              server: '{{cluster.address}}'\n              namespace: guestbook\n  # List Generator\n  list:\n    type: argocd:ApplicationSet\n    properties:\n      metadata:\n        name: list\n      spec:\n        generators:\n          - lists:\n              - elements:\n                  - cluster: engineering-dev\n                    url: https://kubernetes.default.svc\n                  - cluster: engineering-prod\n                    url: https://kubernetes.default.svc\n                    foo: bar\n        template:\n          metadata:\n            name: '{{cluster}}-guestbook'\n          spec:\n            project: my-project\n            sources:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                targetRevision: HEAD\n                path: applicationset/examples/list-generator/guestbook/{{cluster}}\n            destination:\n              server: '{{url}}'\n              namespace: guestbook\n  # Matrix Generator\n  matrix:\n    type: argocd:ApplicationSet\n    properties:\n      metadata:\n        name: matrix\n      spec:\n        generators:\n          - matrices:\n              - generators:\n                  - gits:\n                      - repoUrl: https://github.com/argoproj/argo-cd.git\n                        revision: HEAD\n                        directories:\n                          - path: applicationset/examples/matrix/cluster-addons/*\n                  - clusters:\n                      - selector:\n                          matchLabels:\n                            argocd.argoproj.io/secret-type: cluster\n        template:\n          metadata:\n            name: '{{path.basename}}-{{name}}'\n          spec:\n            project: default\n            sources:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                targetRevision: HEAD\n                path: '{{path}}'\n            destination:\n              server: '{{server}}'\n              namespace: '{{path.basename}}'\n  # Merge Generator\n  merge:\n    type: argocd:ApplicationSet\n    properties:\n      metadata:\n        name: merge\n      spec:\n        generators:\n          - merges:\n              - mergeKeys:\n                  - server\n                generators:\n                  - clusters:\n                      - values:\n                          kafka: true\n                          redis: false\n                  - clusters:\n                      - selector:\n                          matchLabels:\n                            use-kafka: 'false'\n                        values:\n                          kafka: 'false'\n                  - lists:\n                      - elements:\n                          - server: https://2.4.6.8\n                            values.redis: 'true'\n        template:\n          metadata:\n            name: '{{name}}'\n          spec:\n            project: default\n            sources:\n              - repoUrl: https://github.com/argoproj/argo-cd.git\n                path: app\n                targetRevision: HEAD\n                helm:\n                  parameters:\n                    - name: kafka\n                      value: '{{values.kafka}}'\n                    - name: redis\n                      value: '{{values.redis}}'\n            destination:\n              server: '{{server}}'\n              namespace: default\n  # Pull Request Generator - GitHub\n  prGithub:\n    type: argocd:ApplicationSet\n    name: pr_github\n    properties:\n      metadata:\n        name: pr-github\n      spec:\n        generators:\n          - pullRequests:\n              - github:\n                  api: https://git.example.com/\n                  owner: myorg\n                  repo: myrepository\n                  appSecretName: github-app-repo-creds\n                  tokenRef:\n                    secretName: github-token\n                    key: token\n                  labels:\n                    - preview\n        template:\n          metadata:\n            name: myapp-{{branch}}-{{number}}\n          spec:\n            project: default\n            sources:\n              - repoUrl: https://github.com/myorg/myrepo.git\n                path: kubernetes/\n                targetRevision: '{{head_sha}}'\n                helm:\n                  parameters:\n                    - name: image.tag\n                      value: pull-{{head_sha}}\n            destination:\n              server: https://kubernetes.default.svc\n              namespace: default\n  # SCM Provider Generator - GitHub\n  scmGithub:\n    type: argocd:ApplicationSet\n    name: scm_github\n    properties:\n      metadata:\n        name: scm-github\n      spec:\n        generators:\n          - scmProviders:\n              - github:\n                  appSecretName: gh-app-repo-creds\n                  organization: myorg\n        template:\n          metadata:\n            name: '{{repository}}'\n          spec:\n            project: default\n            sources:\n              - repoUrl: '{{url}}'\n                path: kubernetes/\n                targetRevision: '{{branch}}'\n            destination:\n              server: https://kubernetes.default.svc\n              namespace: default\n  # Progressive Sync - Rolling Update\n  progressiveSync:\n    type: argocd:ApplicationSet\n    name: progressive_sync\n    properties:\n      metadata:\n        name: progressive-sync\n      spec:\n        generators:\n          - lists:\n              - elements:\n                  - cluster: engineering-dev\n                    url: https://1.2.3.4\n                    env: env-dev\n                  - cluster: engineering-qa\n                    url: https://2.4.6.8\n                    env: env-qa\n                  - cluster: engineering-prod\n                    url: https://9.8.7.6/\n                    env: env-prod\n        strategy:\n          type: RollingSync\n          rollingSyncs:\n            - steps:\n                - matchExpressions:\n                    - key: envLabel\n                      operator: In\n                      values:\n                        - env-dev\n                - matchExpressions:\n                    - key: envLabel\n                      operator: In\n                      values:\n                        - env-qa\n                  maxUpdate: '0'\n                - matchExpressions:\n                    - key: envLabel\n                      operator: In\n                      values:\n                        - env-prod\n                  maxUpdate: 10%\n        goTemplate: true\n        template:\n          metadata:\n            name: '{{.cluster}}-guestbook'\n            labels:\n              envLabel: '{{.env}}'\n          spec:\n            project: default\n            sources:\n              - repoUrl: https://github.com/infra-team/cluster-deployments.git\n                path: guestbook/{{.cluster}}\n                targetRevision: HEAD\n            destination:\n              server: '{{.url}}'\n              namespace: guestbook\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetMetadata:ApplicationSetMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpec:ApplicationSetSpec",
                    "description": "ArgoCD application set resource spec.\n"
                }
            },
            "required": [
                "metadata",
                "spec"
            ],
            "inputProperties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ApplicationSetMetadata:ApplicationSetMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ApplicationSetSpec:ApplicationSetSpec",
                    "description": "ArgoCD application set resource spec.\n"
                }
            },
            "requiredInputs": [
                "metadata",
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationSet resources.\n",
                "properties": {
                    "metadata": {
                        "$ref": "#/types/argocd:index/ApplicationSetMetadata:ApplicationSetMetadata",
                        "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                    },
                    "spec": {
                        "$ref": "#/types/argocd:index/ApplicationSetSpec:ApplicationSetSpec",
                        "description": "ArgoCD application set resource spec.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/cluster:Cluster": {
            "description": "Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\nimport * as aws from \"@pulumi/aws\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as kubernetes from \"@pulumi/kubernetes\";\nimport * as std from \"@pulumi/std\";\n\n//# Bearer token Authentication\nconst kubernetes = new argocd.Cluster(\"kubernetes\", {\n    server: \"https://1.2.3.4:12345\",\n    config: {\n        bearerToken: \"eyJhbGciOiJSUzI...\",\n        tlsClientConfig: {\n            caData: std.file({\n                input: \"path/to/ca.pem\",\n            }).then(invoke =\u003e invoke.result),\n        },\n    },\n});\n//# GCP GKE cluster\nconst cluster = gcp.container.getCluster({\n    name: \"cluster\",\n    location: \"europe-west1\",\n});\nconst argocdManager = new kubernetes.core.v1.ServiceAccount(\"argocd_manager\", {metadata: {\n    name: \"argocd-manager\",\n    namespace: \"kube-system\",\n}});\nconst argocdManagerClusterRole = new kubernetes.rbac.v1.ClusterRole(\"argocd_manager\", {\n    metadata: {\n        name: \"argocd-manager-role\",\n    },\n    rules: [\n        {\n            apiGroups: [\"*\"],\n            resources: [\"*\"],\n            verbs: [\"*\"],\n        },\n        {\n            nonResourceUrls: [\"*\"],\n            verbs: [\"*\"],\n        },\n    ],\n});\nconst argocdManagerClusterRoleBinding = new kubernetes.rbac.v1.ClusterRoleBinding(\"argocd_manager\", {\n    metadata: {\n        name: \"argocd-manager-role-binding\",\n    },\n    roleRef: {\n        apiGroup: \"rbac.authorization.k8s.io\",\n        kind: \"ClusterRole\",\n        name: argocdManagerClusterRole.metadata.apply(metadata =\u003e metadata.name),\n    },\n    subjects: [{\n        kind: \"ServiceAccount\",\n        name: argocdManager.metadata.apply(metadata =\u003e metadata.name),\n        namespace: argocdManager.metadata.apply(metadata =\u003e metadata.namespace),\n    }],\n});\nconst argocdManagerSecret = new kubernetes.core.v1.Secret(\"argocd_manager\", {metadata: {\n    name: argocdManager.defaultSecretName,\n    namespace: argocdManager.metadata.apply(metadata =\u003e metadata.namespace),\n}});\nconst gke = new argocd.Cluster(\"gke\", {\n    server: cluster.then(cluster =\u003e std.join({\n        separator: \"\",\n        input: [\n            \"https://%s\",\n            cluster.endpoint,\n        ],\n    })).then(invoke =\u003e invoke.result),\n    name: \"gke\",\n    config: {\n        bearerToken: argocdManagerKubernetesSecret.data.token,\n        tlsClientConfig: {\n            caData: cluster.then(cluster =\u003e std.base64decode({\n                input: cluster.masterAuths?.[0]?.clusterCaCertificate,\n            })).then(invoke =\u003e invoke.result),\n        },\n    },\n});\n//# AWS EKS cluster\nconst clusterGetCluster = aws.eks.getCluster({\n    name: \"cluster\",\n});\nconst eks = new argocd.Cluster(\"eks\", {\n    server: clusterGetCluster.then(clusterGetCluster =\u003e std.join({\n        separator: \"\",\n        input: [\n            \"https://%s\",\n            clusterGetCluster.endpoint,\n        ],\n    })).then(invoke =\u003e invoke.result),\n    name: \"eks\",\n    namespaces: [\n        \"default\",\n        \"optional\",\n    ],\n    config: {\n        awsAuthConfigs: [{\n            clusterName: \"myekscluster\",\n            roleArn: \"arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\",\n        }],\n        tlsClientConfig: {\n            caData: clusterGetCluster.then(clusterGetCluster =\u003e std.base64decode({\n                input: clusterGetCluster.certificateAuthorities?.[0]?.data,\n            })).then(invoke =\u003e invoke.result),\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\nimport pulumi_aws as aws\nimport pulumi_gcp as gcp\nimport pulumi_kubernetes as kubernetes\nimport pulumi_std as std\n\n## Bearer token Authentication\nkubernetes = argocd.Cluster(\"kubernetes\",\n    server=\"https://1.2.3.4:12345\",\n    config={\n        \"bearer_token\": \"eyJhbGciOiJSUzI...\",\n        \"tls_client_config\": {\n            \"ca_data\": std.file(input=\"path/to/ca.pem\").result,\n        },\n    })\n## GCP GKE cluster\ncluster = gcp.container.get_cluster(name=\"cluster\",\n    location=\"europe-west1\")\nargocd_manager = kubernetes.core.v1.ServiceAccount(\"argocd_manager\", metadata={\n    \"name\": \"argocd-manager\",\n    \"namespace\": \"kube-system\",\n})\nargocd_manager_cluster_role = kubernetes.rbac.v1.ClusterRole(\"argocd_manager\",\n    metadata={\n        \"name\": \"argocd-manager-role\",\n    },\n    rules=[\n        {\n            \"api_groups\": [\"*\"],\n            \"resources\": [\"*\"],\n            \"verbs\": [\"*\"],\n        },\n        {\n            \"non_resource_urls\": [\"*\"],\n            \"verbs\": [\"*\"],\n        },\n    ])\nargocd_manager_cluster_role_binding = kubernetes.rbac.v1.ClusterRoleBinding(\"argocd_manager\",\n    metadata={\n        \"name\": \"argocd-manager-role-binding\",\n    },\n    role_ref={\n        \"api_group\": \"rbac.authorization.k8s.io\",\n        \"kind\": \"ClusterRole\",\n        \"name\": argocd_manager_cluster_role.metadata.name,\n    },\n    subjects=[{\n        \"kind\": \"ServiceAccount\",\n        \"name\": argocd_manager.metadata.name,\n        \"namespace\": argocd_manager.metadata.namespace,\n    }])\nargocd_manager_secret = kubernetes.core.v1.Secret(\"argocd_manager\", metadata={\n    \"name\": argocd_manager.default_secret_name,\n    \"namespace\": argocd_manager.metadata.namespace,\n})\ngke = argocd.Cluster(\"gke\",\n    server=std.join(separator=\"\",\n        input=[\n            \"https://%s\",\n            cluster.endpoint,\n        ]).result,\n    name=\"gke\",\n    config={\n        \"bearer_token\": argocd_manager_kubernetes_secret[\"data\"][\"token\"],\n        \"tls_client_config\": {\n            \"ca_data\": std.base64decode(input=cluster.master_auths[0].cluster_ca_certificate).result,\n        },\n    })\n## AWS EKS cluster\ncluster_get_cluster = aws.eks.get_cluster(name=\"cluster\")\neks = argocd.Cluster(\"eks\",\n    server=std.join(separator=\"\",\n        input=[\n            \"https://%s\",\n            cluster_get_cluster.endpoint,\n        ]).result,\n    name=\"eks\",\n    namespaces=[\n        \"default\",\n        \"optional\",\n    ],\n    config={\n        \"aws_auth_configs\": [{\n            \"cluster_name\": \"myekscluster\",\n            \"role_arn\": \"arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\",\n        }],\n        \"tls_client_config\": {\n            \"ca_data\": std.base64decode(input=cluster_get_cluster.certificate_authorities[0].data).result,\n        },\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\nusing Aws = Pulumi.Aws;\nusing Gcp = Pulumi.Gcp;\nusing Kubernetes = Pulumi.Kubernetes;\nusing Std = Pulumi.Std;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //# Bearer token Authentication\n    var kubernetes = new Argocd.Cluster(\"kubernetes\", new()\n    {\n        Server = \"https://1.2.3.4:12345\",\n        Config = new Argocd.Inputs.ClusterConfigArgs\n        {\n            BearerToken = \"eyJhbGciOiJSUzI...\",\n            TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs\n            {\n                CaData = Std.File.Invoke(new()\n                {\n                    Input = \"path/to/ca.pem\",\n                }).Apply(invoke =\u003e invoke.Result),\n            },\n        },\n    });\n\n    //# GCP GKE cluster\n    var cluster = Gcp.Container.GetCluster.Invoke(new()\n    {\n        Name = \"cluster\",\n        Location = \"europe-west1\",\n    });\n\n    var argocdManager = new Kubernetes.Core.V1.ServiceAccount(\"argocd_manager\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = \"argocd-manager\",\n            Namespace = \"kube-system\",\n        },\n    });\n\n    var argocdManagerClusterRole = new Kubernetes.Rbac.V1.ClusterRole(\"argocd_manager\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = \"argocd-manager-role\",\n        },\n        Rules = new[]\n        {\n            new Kubernetes.Types.Inputs.Rbac.V1.PolicyRuleArgs\n            {\n                ApiGroups = new[]\n                {\n                    \"*\",\n                },\n                Resources = new[]\n                {\n                    \"*\",\n                },\n                Verbs = new[]\n                {\n                    \"*\",\n                },\n            },\n            new Kubernetes.Types.Inputs.Rbac.V1.PolicyRuleArgs\n            {\n                NonResourceUrls = new[]\n                {\n                    \"*\",\n                },\n                Verbs = new[]\n                {\n                    \"*\",\n                },\n            },\n        },\n    });\n\n    var argocdManagerClusterRoleBinding = new Kubernetes.Rbac.V1.ClusterRoleBinding(\"argocd_manager\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = \"argocd-manager-role-binding\",\n        },\n        RoleRef = new Kubernetes.Types.Inputs.Rbac.V1.RoleRefArgs\n        {\n            ApiGroup = \"rbac.authorization.k8s.io\",\n            Kind = \"ClusterRole\",\n            Name = argocdManagerClusterRole.Metadata.Apply(metadata =\u003e metadata.Name),\n        },\n        Subjects = new[]\n        {\n            new Kubernetes.Types.Inputs.Rbac.V1.SubjectArgs\n            {\n                Kind = \"ServiceAccount\",\n                Name = argocdManager.Metadata.Apply(metadata =\u003e metadata.Name),\n                Namespace = argocdManager.Metadata.Apply(metadata =\u003e metadata.Namespace),\n            },\n        },\n    });\n\n    var argocdManagerSecret = new Kubernetes.Core.V1.Secret(\"argocd_manager\", new()\n    {\n        Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs\n        {\n            Name = argocdManager.DefaultSecretName,\n            Namespace = argocdManager.Metadata.Apply(metadata =\u003e metadata.Namespace),\n        },\n    });\n\n    var gke = new Argocd.Cluster(\"gke\", new()\n    {\n        Server = Std.Join.Invoke(new()\n        {\n            Separator = \"\",\n            Input = new[]\n            {\n                \"https://%s\",\n                cluster.Apply(getClusterResult =\u003e getClusterResult.Endpoint),\n            },\n        }).Apply(invoke =\u003e invoke.Result),\n        Name = \"gke\",\n        Config = new Argocd.Inputs.ClusterConfigArgs\n        {\n            BearerToken = argocdManagerKubernetesSecret.Data.Token,\n            TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs\n            {\n                CaData = Std.Base64decode.Invoke(new()\n                {\n                    Input = cluster.Apply(getClusterResult =\u003e getClusterResult.MasterAuths[0]?.ClusterCaCertificate),\n                }).Apply(invoke =\u003e invoke.Result),\n            },\n        },\n    });\n\n    //# AWS EKS cluster\n    var clusterGetCluster = Aws.Eks.GetCluster.Invoke(new()\n    {\n        Name = \"cluster\",\n    });\n\n    var eks = new Argocd.Cluster(\"eks\", new()\n    {\n        Server = Std.Join.Invoke(new()\n        {\n            Separator = \"\",\n            Input = new[]\n            {\n                \"https://%s\",\n                clusterGetCluster.Apply(getClusterResult =\u003e getClusterResult.Endpoint),\n            },\n        }).Apply(invoke =\u003e invoke.Result),\n        Name = \"eks\",\n        Namespaces = new[]\n        {\n            \"default\",\n            \"optional\",\n        },\n        Config = new Argocd.Inputs.ClusterConfigArgs\n        {\n            AwsAuthConfigs = new[]\n            {\n                new Argocd.Inputs.ClusterConfigAwsAuthConfigArgs\n                {\n                    ClusterName = \"myekscluster\",\n                    RoleArn = \"arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\",\n                },\n            },\n            TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs\n            {\n                CaData = Std.Base64decode.Invoke(new()\n                {\n                    Input = clusterGetCluster.Apply(getClusterResult =\u003e getClusterResult.CertificateAuthorities[0]?.Data),\n                }).Apply(invoke =\u003e invoke.Result),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/eks\"\n\t\"github.com/pulumi/pulumi-gcp/sdk/v8/go/gcp/container\"\n\tcorev1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/core/v1\"\n\tmetav1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1\"\n\trbacv1 \"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/rbac/v1\"\n\t\"github.com/pulumi/pulumi-std/sdk/go/std\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinvokeFile, err := std.File(ctx, \u0026std.FileArgs{\n\t\t\tInput: \"path/to/ca.pem\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// # Bearer token Authentication\n\t\t_, err = argocd.NewCluster(ctx, \"kubernetes\", \u0026argocd.ClusterArgs{\n\t\t\tServer: pulumi.String(\"https://1.2.3.4:12345\"),\n\t\t\tConfig: \u0026argocd.ClusterConfigArgs{\n\t\t\t\tBearerToken: pulumi.String(\"eyJhbGciOiJSUzI...\"),\n\t\t\t\tTlsClientConfig: \u0026argocd.ClusterConfigTlsClientConfigArgs{\n\t\t\t\t\tCaData: pulumi.String(invokeFile.Result),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// # GCP GKE cluster\n\t\tcluster, err := container.LookupCluster(ctx, \u0026container.LookupClusterArgs{\n\t\t\tName:     \"cluster\",\n\t\t\tLocation: pulumi.StringRef(\"europe-west1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\targocdManager, err := corev1.NewServiceAccount(ctx, \"argocd_manager\", \u0026corev1.ServiceAccountArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName:      pulumi.String(\"argocd-manager\"),\n\t\t\t\tNamespace: pulumi.String(\"kube-system\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\targocdManagerClusterRole, err := rbacv1.NewClusterRole(ctx, \"argocd_manager\", \u0026rbacv1.ClusterRoleArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName: pulumi.String(\"argocd-manager-role\"),\n\t\t\t},\n\t\t\tRules: rbacv1.PolicyRuleArray{\n\t\t\t\t\u0026rbacv1.PolicyRuleArgs{\n\t\t\t\t\tApiGroups: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t\u0026rbacv1.PolicyRuleArgs{\n\t\t\t\t\tNonResourceUrls: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t\tVerbs: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rbacv1.NewClusterRoleBinding(ctx, \"argocd_manager\", \u0026rbacv1.ClusterRoleBindingArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName: pulumi.String(\"argocd-manager-role-binding\"),\n\t\t\t},\n\t\t\tRoleRef: \u0026rbacv1.RoleRefArgs{\n\t\t\t\tApiGroup: pulumi.String(\"rbac.authorization.k8s.io\"),\n\t\t\t\tKind:     pulumi.String(\"ClusterRole\"),\n\t\t\t\tName: argocdManagerClusterRole.Metadata.ApplyT(func(metadata metav1.ObjectMeta) (*string, error) {\n\t\t\t\t\treturn \u0026metadata.Name, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t\tSubjects: rbacv1.SubjectArray{\n\t\t\t\t\u0026rbacv1.SubjectArgs{\n\t\t\t\t\tKind: pulumi.String(\"ServiceAccount\"),\n\t\t\t\t\tName: argocdManager.Metadata.ApplyT(func(metadata metav1.ObjectMeta) (*string, error) {\n\t\t\t\t\t\treturn \u0026metadata.Name, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t\tNamespace: argocdManager.Metadata.ApplyT(func(metadata metav1.ObjectMeta) (*string, error) {\n\t\t\t\t\t\treturn \u0026metadata.Namespace, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = corev1.NewSecret(ctx, \"argocd_manager\", \u0026corev1.SecretArgs{\n\t\t\tMetadata: \u0026metav1.ObjectMetaArgs{\n\t\t\t\tName: argocdManager.DefaultSecretName,\n\t\t\t\tNamespace: argocdManager.Metadata.ApplyT(func(metadata metav1.ObjectMeta) (*string, error) {\n\t\t\t\t\treturn \u0026metadata.Namespace, nil\n\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeJoin1, err := std.Join(ctx, \u0026std.JoinArgs{\n\t\t\tSeparator: \"\",\n\t\t\tInput: []interface{}{\n\t\t\t\t\"https://%s\",\n\t\t\t\tcluster.Endpoint,\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64decode2, err := std.Base64decode(ctx, \u0026std.Base64decodeArgs{\n\t\t\tInput: cluster.MasterAuths[0].ClusterCaCertificate,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = argocd.NewCluster(ctx, \"gke\", \u0026argocd.ClusterArgs{\n\t\t\tServer: pulumi.String(invokeJoin1.Result),\n\t\t\tName:   pulumi.String(\"gke\"),\n\t\t\tConfig: \u0026argocd.ClusterConfigArgs{\n\t\t\t\tBearerToken: pulumi.Any(argocdManagerKubernetesSecret.Data.Token),\n\t\t\t\tTlsClientConfig: \u0026argocd.ClusterConfigTlsClientConfigArgs{\n\t\t\t\t\tCaData: pulumi.String(invokeBase64decode2.Result),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// # AWS EKS cluster\n\t\tclusterGetCluster, err := eks.LookupCluster(ctx, \u0026eks.LookupClusterArgs{\n\t\t\tName: \"cluster\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeJoin3, err := std.Join(ctx, \u0026std.JoinArgs{\n\t\t\tSeparator: \"\",\n\t\t\tInput: []interface{}{\n\t\t\t\t\"https://%s\",\n\t\t\t\tclusterGetCluster.Endpoint,\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tinvokeBase64decode4, err := std.Base64decode(ctx, \u0026std.Base64decodeArgs{\n\t\t\tInput: clusterGetCluster.CertificateAuthorities[0].Data,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = argocd.NewCluster(ctx, \"eks\", \u0026argocd.ClusterArgs{\n\t\t\tServer: pulumi.String(invokeJoin3.Result),\n\t\t\tName:   pulumi.String(\"eks\"),\n\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"default\"),\n\t\t\t\tpulumi.String(\"optional\"),\n\t\t\t},\n\t\t\tConfig: \u0026argocd.ClusterConfigArgs{\n\t\t\t\tAwsAuthConfigs: argocd.ClusterConfigAwsAuthConfigArray{\n\t\t\t\t\t\u0026argocd.ClusterConfigAwsAuthConfigArgs{\n\t\t\t\t\t\tClusterName: pulumi.String(\"myekscluster\"),\n\t\t\t\t\t\tRoleArn:     pulumi.String(\"arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tTlsClientConfig: \u0026argocd.ClusterConfigTlsClientConfigArgs{\n\t\t\t\t\tCaData: pulumi.String(invokeBase64decode4.Result),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.Cluster;\nimport com.pulumi.argocd.ClusterArgs;\nimport com.pulumi.argocd.inputs.ClusterConfigArgs;\nimport com.pulumi.argocd.inputs.ClusterConfigTlsClientConfigArgs;\nimport com.pulumi.gcp.container.ContainerFunctions;\nimport com.pulumi.gcp.container.inputs.GetClusterArgs;\nimport com.pulumi.kubernetes.core_v1.ServiceAccount;\nimport com.pulumi.kubernetes.core_v1.ServiceAccountArgs;\nimport com.pulumi.kubernetes.meta_v1.inputs.ObjectMetaArgs;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.ClusterRole;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.ClusterRoleArgs;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.inputs.PolicyRuleArgs;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.ClusterRoleBinding;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.ClusterRoleBindingArgs;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.inputs.RoleRefArgs;\nimport com.pulumi.kubernetes.rbac.authorization.k8s.io_v1.inputs.SubjectArgs;\nimport com.pulumi.kubernetes.core_v1.Secret;\nimport com.pulumi.kubernetes.core_v1.SecretArgs;\nimport com.pulumi.aws.eks.EksFunctions;\nimport com.pulumi.aws.eks.inputs.GetClusterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        //# Bearer token Authentication\n        var kubernetes = new Cluster(\"kubernetes\", ClusterArgs.builder()\n            .server(\"https://1.2.3.4:12345\")\n            .config(ClusterConfigArgs.builder()\n                .bearerToken(\"eyJhbGciOiJSUzI...\")\n                .tlsClientConfig(ClusterConfigTlsClientConfigArgs.builder()\n                    .caData(StdFunctions.file(FileArgs.builder()\n                        .input(\"path/to/ca.pem\")\n                        .build()).result())\n                    .build())\n                .build())\n            .build());\n\n        //# GCP GKE cluster\n        final var cluster = ContainerFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"cluster\")\n            .location(\"europe-west1\")\n            .build());\n\n        var argocdManager = new ServiceAccount(\"argocdManager\", ServiceAccountArgs.builder()\n            .metadata(ObjectMetaArgs.builder()\n                .name(\"argocd-manager\")\n                .namespace(\"kube-system\")\n                .build())\n            .build());\n\n        var argocdManagerClusterRole = new ClusterRole(\"argocdManagerClusterRole\", ClusterRoleArgs.builder()\n            .metadata(ObjectMetaArgs.builder()\n                .name(\"argocd-manager-role\")\n                .build())\n            .rules(            \n                PolicyRuleArgs.builder()\n                    .apiGroups(\"*\")\n                    .resources(\"*\")\n                    .verbs(\"*\")\n                    .build(),\n                PolicyRuleArgs.builder()\n                    .nonResourceUrls(\"*\")\n                    .verbs(\"*\")\n                    .build())\n            .build());\n\n        var argocdManagerClusterRoleBinding = new ClusterRoleBinding(\"argocdManagerClusterRoleBinding\", ClusterRoleBindingArgs.builder()\n            .metadata(ObjectMetaArgs.builder()\n                .name(\"argocd-manager-role-binding\")\n                .build())\n            .roleRef(RoleRefArgs.builder()\n                .apiGroup(\"rbac.authorization.k8s.io\")\n                .kind(\"ClusterRole\")\n                .name(argocdManagerClusterRole.metadata().applyValue(metadata -\u003e metadata.name()))\n                .build())\n            .subjects(SubjectArgs.builder()\n                .kind(\"ServiceAccount\")\n                .name(argocdManager.metadata().applyValue(metadata -\u003e metadata.name()))\n                .namespace(argocdManager.metadata().applyValue(metadata -\u003e metadata.namespace()))\n                .build())\n            .build());\n\n        var argocdManagerSecret = new Secret(\"argocdManagerSecret\", SecretArgs.builder()\n            .metadata(ObjectMetaArgs.builder()\n                .name(argocdManager.defaultSecretName())\n                .namespace(argocdManager.metadata().applyValue(metadata -\u003e metadata.namespace()))\n                .build())\n            .build());\n\n        var gke = new Cluster(\"gke\", ClusterArgs.builder()\n            .server(StdFunctions.join(JoinArgs.builder()\n                .separator(\"\")\n                .input(                \n                    \"https://%s\",\n                    cluster.applyValue(getClusterResult -\u003e getClusterResult.endpoint()))\n                .build()).result())\n            .name(\"gke\")\n            .config(ClusterConfigArgs.builder()\n                .bearerToken(argocdManagerKubernetesSecret.data().token())\n                .tlsClientConfig(ClusterConfigTlsClientConfigArgs.builder()\n                    .caData(StdFunctions.base64decode(Base64decodeArgs.builder()\n                        .input(cluster.applyValue(getClusterResult -\u003e getClusterResult.masterAuths()[0].clusterCaCertificate()))\n                        .build()).result())\n                    .build())\n                .build())\n            .build());\n\n        //# AWS EKS cluster\n        final var clusterGetCluster = EksFunctions.getCluster(GetClusterArgs.builder()\n            .name(\"cluster\")\n            .build());\n\n        var eks = new Cluster(\"eks\", ClusterArgs.builder()\n            .server(StdFunctions.join(JoinArgs.builder()\n                .separator(\"\")\n                .input(                \n                    \"https://%s\",\n                    clusterGetCluster.applyValue(getClusterResult -\u003e getClusterResult.endpoint()))\n                .build()).result())\n            .name(\"eks\")\n            .namespaces(            \n                \"default\",\n                \"optional\")\n            .config(ClusterConfigArgs.builder()\n                .awsAuthConfigs(ClusterConfigAwsAuthConfigArgs.builder()\n                    .clusterName(\"myekscluster\")\n                    .roleArn(\"arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\")\n                    .build())\n                .tlsClientConfig(ClusterConfigTlsClientConfigArgs.builder()\n                    .caData(StdFunctions.base64decode(Base64decodeArgs.builder()\n                        .input(clusterGetCluster.applyValue(getClusterResult -\u003e getClusterResult.certificateAuthorities()[0].data()))\n                        .build()).result())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ## Bearer token Authentication\n  kubernetes:\n    type: argocd:Cluster\n    properties:\n      server: https://1.2.3.4:12345\n      config:\n        bearerToken: eyJhbGciOiJSUzI...\n        tlsClientConfig:\n          caData:\n            fn::invoke:\n              function: std:file\n              arguments:\n                input: path/to/ca.pem\n              return: result\n  argocdManager:\n    type: kubernetes:core/v1:ServiceAccount\n    name: argocd_manager\n    properties:\n      metadata:\n        name: argocd-manager\n        namespace: kube-system\n  argocdManagerClusterRole:\n    type: kubernetes:rbac.authorization.k8s.io/v1:ClusterRole\n    name: argocd_manager\n    properties:\n      metadata:\n        name: argocd-manager-role\n      rules:\n        - apiGroups:\n            - '*'\n          resources:\n            - '*'\n          verbs:\n            - '*'\n        - nonResourceUrls:\n            - '*'\n          verbs:\n            - '*'\n  argocdManagerClusterRoleBinding:\n    type: kubernetes:rbac.authorization.k8s.io/v1:ClusterRoleBinding\n    name: argocd_manager\n    properties:\n      metadata:\n        name: argocd-manager-role-binding\n      roleRef:\n        apiGroup: rbac.authorization.k8s.io\n        kind: ClusterRole\n        name: ${argocdManagerClusterRole.metadata.name}\n      subjects:\n        - kind: ServiceAccount\n          name: ${argocdManager.metadata.name}\n          namespace: ${argocdManager.metadata.namespace}\n  argocdManagerSecret:\n    type: kubernetes:core/v1:Secret\n    name: argocd_manager\n    properties:\n      metadata:\n        name: ${argocdManager.defaultSecretName}\n        namespace: ${argocdManager.metadata.namespace}\n  gke:\n    type: argocd:Cluster\n    properties:\n      server:\n        fn::invoke:\n          function: std:join\n          arguments:\n            separator: \"\"\n            input:\n              - https://%s\n              - ${cluster.endpoint}\n          return: result\n      name: gke\n      config:\n        bearerToken: ${argocdManagerKubernetesSecret.data.token}\n        tlsClientConfig:\n          caData:\n            fn::invoke:\n              function: std:base64decode\n              arguments:\n                input: ${cluster.masterAuths[0].clusterCaCertificate}\n              return: result\n  eks:\n    type: argocd:Cluster\n    properties:\n      server:\n        fn::invoke:\n          function: std:join\n          arguments:\n            separator: \"\"\n            input:\n              - https://%s\n              - ${clusterGetCluster.endpoint}\n          return: result\n      name: eks\n      namespaces:\n        - default\n        - optional\n      config:\n        awsAuthConfigs:\n          - clusterName: myekscluster\n            roleArn: arn:aws:iam::\u003c123456789012\u003e:role/\u003crole-name\u003e\n        tlsClientConfig:\n          caData:\n            fn::invoke:\n              function: std:base64decode\n              arguments:\n                input: ${clusterGetCluster.certificateAuthorities[0].data}\n              return: result\nvariables:\n  ## GCP GKE cluster\n  cluster:\n    fn::invoke:\n      function: gcp:container:getCluster\n      arguments:\n        name: cluster\n        location: europe-west1\n  ## AWS EKS cluster\n  clusterGetCluster:\n    fn::invoke:\n      function: aws:eks:getCluster\n      arguments:\n        name: cluster\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nCluster credentials can be imported using the server URL.\n\nExample:\n\n```sh\n$ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443\n```\n\n",
            "properties": {
                "config": {
                    "$ref": "#/types/argocd:index/ClusterConfig:ClusterConfig",
                    "description": "Cluster information for connecting to a cluster.\n"
                },
                "infos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ClusterInfo:ClusterInfo"
                    },
                    "description": "Information about cluster cache and state.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ClusterMetadata:ClusterMetadata"
                    },
                    "description": "Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster. If omitted, will use the server address.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the API server URL of the Kubernetes cluster.\n"
                },
                "shard": {
                    "type": "string",
                    "description": "Optional shard number. Calculated on the fly by the application controller if not specified.\n"
                }
            },
            "required": [
                "config",
                "infos",
                "name"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/argocd:index/ClusterConfig:ClusterConfig",
                    "description": "Cluster information for connecting to a cluster.\n"
                },
                "metadatas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/argocd:index/ClusterMetadata:ClusterMetadata"
                    },
                    "description": "Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster. If omitted, will use the server address.\n"
                },
                "namespaces": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.\n"
                },
                "project": {
                    "type": "string",
                    "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server is the API server URL of the Kubernetes cluster.\n"
                },
                "shard": {
                    "type": "string",
                    "description": "Optional shard number. Calculated on the fly by the application controller if not specified.\n"
                }
            },
            "requiredInputs": [
                "config"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/argocd:index/ClusterConfig:ClusterConfig",
                        "description": "Cluster information for connecting to a cluster.\n"
                    },
                    "infos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/argocd:index/ClusterInfo:ClusterInfo"
                        },
                        "description": "Information about cluster cache and state.\n"
                    },
                    "metadatas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/argocd:index/ClusterMetadata:ClusterMetadata"
                        },
                        "description": "Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster. If omitted, will use the server address.\n"
                    },
                    "namespaces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.\n"
                    },
                    "project": {
                        "type": "string",
                        "description": "Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Server is the API server URL of the Kubernetes cluster.\n"
                    },
                    "shard": {
                        "type": "string",
                        "description": "Optional shard number. Calculated on the fly by the application controller if not specified.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/project:Project": {
            "description": "Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\nconst myproject = new argocd.Project(\"myproject\", {\n    metadata: {\n        name: \"myproject\",\n        namespace: \"argocd\",\n        labels: {\n            acceptance: \"true\",\n        },\n        annotations: {\n            \"this.is.a.really.long.nested.key\": \"yes, really!\",\n        },\n    },\n    spec: {\n        description: \"simple project\",\n        sourceNamespaces: [\"argocd\"],\n        sourceRepos: [\"*\"],\n        destinations: [\n            {\n                server: \"https://kubernetes.default.svc\",\n                namespace: \"default\",\n            },\n            {\n                server: \"https://kubernetes.default.svc\",\n                namespace: \"foo\",\n            },\n            {\n                name: \"anothercluster\",\n                namespace: \"bar\",\n            },\n        ],\n        clusterResourceBlacklists: [{\n            group: \"*\",\n            kind: \"*\",\n        }],\n        clusterResourceWhitelists: [\n            {\n                group: \"rbac.authorization.k8s.io\",\n                kind: \"ClusterRoleBinding\",\n            },\n            {\n                group: \"rbac.authorization.k8s.io\",\n                kind: \"ClusterRole\",\n            },\n        ],\n        namespaceResourceBlacklists: [{\n            group: \"networking.k8s.io\",\n            kind: \"Ingress\",\n        }],\n        namespaceResourceWhitelists: [{\n            group: \"*\",\n            kind: \"*\",\n        }],\n        orphanedResources: {\n            warn: true,\n            ignores: [\n                {\n                    group: \"apps/v1\",\n                    kind: \"Deployment\",\n                    name: \"ignored1\",\n                },\n                {\n                    group: \"apps/v1\",\n                    kind: \"Deployment\",\n                    name: \"ignored2\",\n                },\n            ],\n        },\n        roles: [\n            {\n                name: \"testrole\",\n                policies: [\n                    \"p, proj:myproject:testrole, applications, override, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, applications, sync, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, clusters, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, create, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, delete, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, update, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, logs, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, exec, create, myproject/*, allow\",\n                ],\n            },\n            {\n                name: \"anotherrole\",\n                policies: [\n                    \"p, proj:myproject:testrole, applications, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, applications, sync, myproject/*, deny\",\n                ],\n            },\n        ],\n        syncWindows: [\n            {\n                kind: \"allow\",\n                applications: [\"api-*\"],\n                clusters: [\"*\"],\n                namespaces: [\"*\"],\n                duration: \"3600s\",\n                schedule: \"10 1 * * *\",\n                manualSync: true,\n            },\n            {\n                kind: \"deny\",\n                applications: [\"foo\"],\n                clusters: [\"in-cluster\"],\n                namespaces: [\"default\"],\n                duration: \"12h\",\n                schedule: \"22 1 5 * *\",\n                manualSync: false,\n                timezone: \"Europe/London\",\n            },\n        ],\n        signatureKeys: [\n            \"4AEE18F83AFDEB23\",\n            \"07E34825A909B250\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\nmyproject = argocd.Project(\"myproject\",\n    metadata={\n        \"name\": \"myproject\",\n        \"namespace\": \"argocd\",\n        \"labels\": {\n            \"acceptance\": \"true\",\n        },\n        \"annotations\": {\n            \"this.is.a.really.long.nested.key\": \"yes, really!\",\n        },\n    },\n    spec={\n        \"description\": \"simple project\",\n        \"source_namespaces\": [\"argocd\"],\n        \"source_repos\": [\"*\"],\n        \"destinations\": [\n            {\n                \"server\": \"https://kubernetes.default.svc\",\n                \"namespace\": \"default\",\n            },\n            {\n                \"server\": \"https://kubernetes.default.svc\",\n                \"namespace\": \"foo\",\n            },\n            {\n                \"name\": \"anothercluster\",\n                \"namespace\": \"bar\",\n            },\n        ],\n        \"cluster_resource_blacklists\": [{\n            \"group\": \"*\",\n            \"kind\": \"*\",\n        }],\n        \"cluster_resource_whitelists\": [\n            {\n                \"group\": \"rbac.authorization.k8s.io\",\n                \"kind\": \"ClusterRoleBinding\",\n            },\n            {\n                \"group\": \"rbac.authorization.k8s.io\",\n                \"kind\": \"ClusterRole\",\n            },\n        ],\n        \"namespace_resource_blacklists\": [{\n            \"group\": \"networking.k8s.io\",\n            \"kind\": \"Ingress\",\n        }],\n        \"namespace_resource_whitelists\": [{\n            \"group\": \"*\",\n            \"kind\": \"*\",\n        }],\n        \"orphaned_resources\": {\n            \"warn\": True,\n            \"ignores\": [\n                {\n                    \"group\": \"apps/v1\",\n                    \"kind\": \"Deployment\",\n                    \"name\": \"ignored1\",\n                },\n                {\n                    \"group\": \"apps/v1\",\n                    \"kind\": \"Deployment\",\n                    \"name\": \"ignored2\",\n                },\n            ],\n        },\n        \"roles\": [\n            {\n                \"name\": \"testrole\",\n                \"policies\": [\n                    \"p, proj:myproject:testrole, applications, override, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, applications, sync, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, clusters, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, create, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, delete, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, repositories, update, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, logs, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, exec, create, myproject/*, allow\",\n                ],\n            },\n            {\n                \"name\": \"anotherrole\",\n                \"policies\": [\n                    \"p, proj:myproject:testrole, applications, get, myproject/*, allow\",\n                    \"p, proj:myproject:testrole, applications, sync, myproject/*, deny\",\n                ],\n            },\n        ],\n        \"sync_windows\": [\n            {\n                \"kind\": \"allow\",\n                \"applications\": [\"api-*\"],\n                \"clusters\": [\"*\"],\n                \"namespaces\": [\"*\"],\n                \"duration\": \"3600s\",\n                \"schedule\": \"10 1 * * *\",\n                \"manual_sync\": True,\n            },\n            {\n                \"kind\": \"deny\",\n                \"applications\": [\"foo\"],\n                \"clusters\": [\"in-cluster\"],\n                \"namespaces\": [\"default\"],\n                \"duration\": \"12h\",\n                \"schedule\": \"22 1 5 * *\",\n                \"manual_sync\": False,\n                \"timezone\": \"Europe/London\",\n            },\n        ],\n        \"signature_keys\": [\n            \"4AEE18F83AFDEB23\",\n            \"07E34825A909B250\",\n        ],\n    })\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var myproject = new Argocd.Project(\"myproject\", new()\n    {\n        Metadata = new Argocd.Inputs.ProjectMetadataArgs\n        {\n            Name = \"myproject\",\n            Namespace = \"argocd\",\n            Labels = \n            {\n                { \"acceptance\", \"true\" },\n            },\n            Annotations = \n            {\n                { \"this.is.a.really.long.nested.key\", \"yes, really!\" },\n            },\n        },\n        Spec = new Argocd.Inputs.ProjectSpecArgs\n        {\n            Description = \"simple project\",\n            SourceNamespaces = new[]\n            {\n                \"argocd\",\n            },\n            SourceRepos = new[]\n            {\n                \"*\",\n            },\n            Destinations = new[]\n            {\n                new Argocd.Inputs.ProjectSpecDestinationArgs\n                {\n                    Server = \"https://kubernetes.default.svc\",\n                    Namespace = \"default\",\n                },\n                new Argocd.Inputs.ProjectSpecDestinationArgs\n                {\n                    Server = \"https://kubernetes.default.svc\",\n                    Namespace = \"foo\",\n                },\n                new Argocd.Inputs.ProjectSpecDestinationArgs\n                {\n                    Name = \"anothercluster\",\n                    Namespace = \"bar\",\n                },\n            },\n            ClusterResourceBlacklists = new[]\n            {\n                new Argocd.Inputs.ProjectSpecClusterResourceBlacklistArgs\n                {\n                    Group = \"*\",\n                    Kind = \"*\",\n                },\n            },\n            ClusterResourceWhitelists = new[]\n            {\n                new Argocd.Inputs.ProjectSpecClusterResourceWhitelistArgs\n                {\n                    Group = \"rbac.authorization.k8s.io\",\n                    Kind = \"ClusterRoleBinding\",\n                },\n                new Argocd.Inputs.ProjectSpecClusterResourceWhitelistArgs\n                {\n                    Group = \"rbac.authorization.k8s.io\",\n                    Kind = \"ClusterRole\",\n                },\n            },\n            NamespaceResourceBlacklists = new[]\n            {\n                new Argocd.Inputs.ProjectSpecNamespaceResourceBlacklistArgs\n                {\n                    Group = \"networking.k8s.io\",\n                    Kind = \"Ingress\",\n                },\n            },\n            NamespaceResourceWhitelists = new[]\n            {\n                new Argocd.Inputs.ProjectSpecNamespaceResourceWhitelistArgs\n                {\n                    Group = \"*\",\n                    Kind = \"*\",\n                },\n            },\n            OrphanedResources = new Argocd.Inputs.ProjectSpecOrphanedResourcesArgs\n            {\n                Warn = true,\n                Ignores = new[]\n                {\n                    new Argocd.Inputs.ProjectSpecOrphanedResourcesIgnoreArgs\n                    {\n                        Group = \"apps/v1\",\n                        Kind = \"Deployment\",\n                        Name = \"ignored1\",\n                    },\n                    new Argocd.Inputs.ProjectSpecOrphanedResourcesIgnoreArgs\n                    {\n                        Group = \"apps/v1\",\n                        Kind = \"Deployment\",\n                        Name = \"ignored2\",\n                    },\n                },\n            },\n            Roles = new[]\n            {\n                new Argocd.Inputs.ProjectSpecRoleArgs\n                {\n                    Name = \"testrole\",\n                    Policies = new[]\n                    {\n                        \"p, proj:myproject:testrole, applications, override, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, applications, sync, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, clusters, get, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, repositories, create, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, repositories, delete, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, repositories, update, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, logs, get, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, exec, create, myproject/*, allow\",\n                    },\n                },\n                new Argocd.Inputs.ProjectSpecRoleArgs\n                {\n                    Name = \"anotherrole\",\n                    Policies = new[]\n                    {\n                        \"p, proj:myproject:testrole, applications, get, myproject/*, allow\",\n                        \"p, proj:myproject:testrole, applications, sync, myproject/*, deny\",\n                    },\n                },\n            },\n            SyncWindows = new[]\n            {\n                new Argocd.Inputs.ProjectSpecSyncWindowArgs\n                {\n                    Kind = \"allow\",\n                    Applications = new[]\n                    {\n                        \"api-*\",\n                    },\n                    Clusters = new[]\n                    {\n                        \"*\",\n                    },\n                    Namespaces = new[]\n                    {\n                        \"*\",\n                    },\n                    Duration = \"3600s\",\n                    Schedule = \"10 1 * * *\",\n                    ManualSync = true,\n                },\n                new Argocd.Inputs.ProjectSpecSyncWindowArgs\n                {\n                    Kind = \"deny\",\n                    Applications = new[]\n                    {\n                        \"foo\",\n                    },\n                    Clusters = new[]\n                    {\n                        \"in-cluster\",\n                    },\n                    Namespaces = new[]\n                    {\n                        \"default\",\n                    },\n                    Duration = \"12h\",\n                    Schedule = \"22 1 5 * *\",\n                    ManualSync = false,\n                    Timezone = \"Europe/London\",\n                },\n            },\n            SignatureKeys = new[]\n            {\n                \"4AEE18F83AFDEB23\",\n                \"07E34825A909B250\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := argocd.NewProject(ctx, \"myproject\", \u0026argocd.ProjectArgs{\n\t\t\tMetadata: \u0026argocd.ProjectMetadataArgs{\n\t\t\t\tName:      pulumi.String(\"myproject\"),\n\t\t\t\tNamespace: pulumi.String(\"argocd\"),\n\t\t\t\tLabels: pulumi.StringMap{\n\t\t\t\t\t\"acceptance\": pulumi.String(\"true\"),\n\t\t\t\t},\n\t\t\t\tAnnotations: pulumi.StringMap{\n\t\t\t\t\t\"this.is.a.really.long.nested.key\": pulumi.String(\"yes, really!\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSpec: \u0026argocd.ProjectSpecArgs{\n\t\t\t\tDescription: pulumi.String(\"simple project\"),\n\t\t\t\tSourceNamespaces: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"argocd\"),\n\t\t\t\t},\n\t\t\t\tSourceRepos: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t},\n\t\t\t\tDestinations: argocd.ProjectSpecDestinationArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecDestinationArgs{\n\t\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\tNamespace: pulumi.String(\"default\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ProjectSpecDestinationArgs{\n\t\t\t\t\t\tServer:    pulumi.String(\"https://kubernetes.default.svc\"),\n\t\t\t\t\t\tNamespace: pulumi.String(\"foo\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ProjectSpecDestinationArgs{\n\t\t\t\t\t\tName:      pulumi.String(\"anothercluster\"),\n\t\t\t\t\t\tNamespace: pulumi.String(\"bar\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tClusterResourceBlacklists: argocd.ProjectSpecClusterResourceBlacklistArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecClusterResourceBlacklistArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"*\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tClusterResourceWhitelists: argocd.ProjectSpecClusterResourceWhitelistArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecClusterResourceWhitelistArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"rbac.authorization.k8s.io\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"ClusterRoleBinding\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ProjectSpecClusterResourceWhitelistArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"rbac.authorization.k8s.io\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"ClusterRole\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tNamespaceResourceBlacklists: argocd.ProjectSpecNamespaceResourceBlacklistArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecNamespaceResourceBlacklistArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"networking.k8s.io\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"Ingress\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tNamespaceResourceWhitelists: argocd.ProjectSpecNamespaceResourceWhitelistArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecNamespaceResourceWhitelistArgs{\n\t\t\t\t\t\tGroup: pulumi.String(\"*\"),\n\t\t\t\t\t\tKind:  pulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tOrphanedResources: \u0026argocd.ProjectSpecOrphanedResourcesArgs{\n\t\t\t\t\tWarn: pulumi.Bool(true),\n\t\t\t\t\tIgnores: argocd.ProjectSpecOrphanedResourcesIgnoreArray{\n\t\t\t\t\t\t\u0026argocd.ProjectSpecOrphanedResourcesIgnoreArgs{\n\t\t\t\t\t\t\tGroup: pulumi.String(\"apps/v1\"),\n\t\t\t\t\t\t\tKind:  pulumi.String(\"Deployment\"),\n\t\t\t\t\t\t\tName:  pulumi.String(\"ignored1\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026argocd.ProjectSpecOrphanedResourcesIgnoreArgs{\n\t\t\t\t\t\t\tGroup: pulumi.String(\"apps/v1\"),\n\t\t\t\t\t\t\tKind:  pulumi.String(\"Deployment\"),\n\t\t\t\t\t\t\tName:  pulumi.String(\"ignored2\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tRoles: argocd.ProjectSpecRoleArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecRoleArgs{\n\t\t\t\t\t\tName: pulumi.String(\"testrole\"),\n\t\t\t\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, applications, override, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, applications, sync, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, clusters, get, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, repositories, create, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, repositories, delete, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, repositories, update, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, logs, get, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, exec, create, myproject/*, allow\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ProjectSpecRoleArgs{\n\t\t\t\t\t\tName: pulumi.String(\"anotherrole\"),\n\t\t\t\t\t\tPolicies: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, applications, get, myproject/*, allow\"),\n\t\t\t\t\t\t\tpulumi.String(\"p, proj:myproject:testrole, applications, sync, myproject/*, deny\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSyncWindows: argocd.ProjectSpecSyncWindowArray{\n\t\t\t\t\t\u0026argocd.ProjectSpecSyncWindowArgs{\n\t\t\t\t\t\tKind: pulumi.String(\"allow\"),\n\t\t\t\t\t\tApplications: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"api-*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tClusters: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDuration:   pulumi.String(\"3600s\"),\n\t\t\t\t\t\tSchedule:   pulumi.String(\"10 1 * * *\"),\n\t\t\t\t\t\tManualSync: pulumi.Bool(true),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026argocd.ProjectSpecSyncWindowArgs{\n\t\t\t\t\t\tKind: pulumi.String(\"deny\"),\n\t\t\t\t\t\tApplications: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"foo\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tClusters: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"in-cluster\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tNamespaces: pulumi.StringArray{\n\t\t\t\t\t\t\tpulumi.String(\"default\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tDuration:   pulumi.String(\"12h\"),\n\t\t\t\t\t\tSchedule:   pulumi.String(\"22 1 5 * *\"),\n\t\t\t\t\t\tManualSync: pulumi.Bool(false),\n\t\t\t\t\t\tTimezone:   pulumi.String(\"Europe/London\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSignatureKeys: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"4AEE18F83AFDEB23\"),\n\t\t\t\t\tpulumi.String(\"07E34825A909B250\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.Project;\nimport com.pulumi.argocd.ProjectArgs;\nimport com.pulumi.argocd.inputs.ProjectMetadataArgs;\nimport com.pulumi.argocd.inputs.ProjectSpecArgs;\nimport com.pulumi.argocd.inputs.ProjectSpecOrphanedResourcesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var myproject = new Project(\"myproject\", ProjectArgs.builder()\n            .metadata(ProjectMetadataArgs.builder()\n                .name(\"myproject\")\n                .namespace(\"argocd\")\n                .labels(Map.of(\"acceptance\", \"true\"))\n                .annotations(Map.of(\"this.is.a.really.long.nested.key\", \"yes, really!\"))\n                .build())\n            .spec(ProjectSpecArgs.builder()\n                .description(\"simple project\")\n                .sourceNamespaces(\"argocd\")\n                .sourceRepos(\"*\")\n                .destinations(                \n                    ProjectSpecDestinationArgs.builder()\n                        .server(\"https://kubernetes.default.svc\")\n                        .namespace(\"default\")\n                        .build(),\n                    ProjectSpecDestinationArgs.builder()\n                        .server(\"https://kubernetes.default.svc\")\n                        .namespace(\"foo\")\n                        .build(),\n                    ProjectSpecDestinationArgs.builder()\n                        .name(\"anothercluster\")\n                        .namespace(\"bar\")\n                        .build())\n                .clusterResourceBlacklists(ProjectSpecClusterResourceBlacklistArgs.builder()\n                    .group(\"*\")\n                    .kind(\"*\")\n                    .build())\n                .clusterResourceWhitelists(                \n                    ProjectSpecClusterResourceWhitelistArgs.builder()\n                        .group(\"rbac.authorization.k8s.io\")\n                        .kind(\"ClusterRoleBinding\")\n                        .build(),\n                    ProjectSpecClusterResourceWhitelistArgs.builder()\n                        .group(\"rbac.authorization.k8s.io\")\n                        .kind(\"ClusterRole\")\n                        .build())\n                .namespaceResourceBlacklists(ProjectSpecNamespaceResourceBlacklistArgs.builder()\n                    .group(\"networking.k8s.io\")\n                    .kind(\"Ingress\")\n                    .build())\n                .namespaceResourceWhitelists(ProjectSpecNamespaceResourceWhitelistArgs.builder()\n                    .group(\"*\")\n                    .kind(\"*\")\n                    .build())\n                .orphanedResources(ProjectSpecOrphanedResourcesArgs.builder()\n                    .warn(true)\n                    .ignores(                    \n                        ProjectSpecOrphanedResourcesIgnoreArgs.builder()\n                            .group(\"apps/v1\")\n                            .kind(\"Deployment\")\n                            .name(\"ignored1\")\n                            .build(),\n                        ProjectSpecOrphanedResourcesIgnoreArgs.builder()\n                            .group(\"apps/v1\")\n                            .kind(\"Deployment\")\n                            .name(\"ignored2\")\n                            .build())\n                    .build())\n                .roles(                \n                    ProjectSpecRoleArgs.builder()\n                        .name(\"testrole\")\n                        .policies(                        \n                            \"p, proj:myproject:testrole, applications, override, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, applications, sync, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, clusters, get, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, repositories, create, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, repositories, delete, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, repositories, update, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, logs, get, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, exec, create, myproject/*, allow\")\n                        .build(),\n                    ProjectSpecRoleArgs.builder()\n                        .name(\"anotherrole\")\n                        .policies(                        \n                            \"p, proj:myproject:testrole, applications, get, myproject/*, allow\",\n                            \"p, proj:myproject:testrole, applications, sync, myproject/*, deny\")\n                        .build())\n                .syncWindows(                \n                    ProjectSpecSyncWindowArgs.builder()\n                        .kind(\"allow\")\n                        .applications(\"api-*\")\n                        .clusters(\"*\")\n                        .namespaces(\"*\")\n                        .duration(\"3600s\")\n                        .schedule(\"10 1 * * *\")\n                        .manualSync(true)\n                        .build(),\n                    ProjectSpecSyncWindowArgs.builder()\n                        .kind(\"deny\")\n                        .applications(\"foo\")\n                        .clusters(\"in-cluster\")\n                        .namespaces(\"default\")\n                        .duration(\"12h\")\n                        .schedule(\"22 1 5 * *\")\n                        .manualSync(false)\n                        .timezone(\"Europe/London\")\n                        .build())\n                .signatureKeys(                \n                    \"4AEE18F83AFDEB23\",\n                    \"07E34825A909B250\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  myproject:\n    type: argocd:Project\n    properties:\n      metadata:\n        name: myproject\n        namespace: argocd\n        labels:\n          acceptance: 'true'\n        annotations:\n          this.is.a.really.long.nested.key: yes, really!\n      spec:\n        description: simple project\n        sourceNamespaces:\n          - argocd\n        sourceRepos:\n          - '*'\n        destinations:\n          - server: https://kubernetes.default.svc\n            namespace: default\n          - server: https://kubernetes.default.svc\n            namespace: foo\n          - name: anothercluster\n            namespace: bar\n        clusterResourceBlacklists:\n          - group: '*'\n            kind: '*'\n        clusterResourceWhitelists:\n          - group: rbac.authorization.k8s.io\n            kind: ClusterRoleBinding\n          - group: rbac.authorization.k8s.io\n            kind: ClusterRole\n        namespaceResourceBlacklists:\n          - group: networking.k8s.io\n            kind: Ingress\n        namespaceResourceWhitelists:\n          - group: '*'\n            kind: '*'\n        orphanedResources:\n          warn: true\n          ignores:\n            - group: apps/v1\n              kind: Deployment\n              name: ignored1\n            - group: apps/v1\n              kind: Deployment\n              name: ignored2\n        roles:\n          - name: testrole\n            policies:\n              - p, proj:myproject:testrole, applications, override, myproject/*, allow\n              - p, proj:myproject:testrole, applications, sync, myproject/*, allow\n              - p, proj:myproject:testrole, clusters, get, myproject/*, allow\n              - p, proj:myproject:testrole, repositories, create, myproject/*, allow\n              - p, proj:myproject:testrole, repositories, delete, myproject/*, allow\n              - p, proj:myproject:testrole, repositories, update, myproject/*, allow\n              - p, proj:myproject:testrole, logs, get, myproject/*, allow\n              - p, proj:myproject:testrole, exec, create, myproject/*, allow\n          - name: anotherrole\n            policies:\n              - p, proj:myproject:testrole, applications, get, myproject/*, allow\n              - p, proj:myproject:testrole, applications, sync, myproject/*, deny\n        syncWindows:\n          - kind: allow\n            applications:\n              - api-*\n            clusters:\n              - '*'\n            namespaces:\n              - '*'\n            duration: 3600s\n            schedule: 10 1 * * *\n            manualSync: true\n          - kind: deny\n            applications:\n              - foo\n            clusters:\n              - in-cluster\n            namespaces:\n              - default\n            duration: 12h\n            schedule: 22 1 5 * *\n            manualSync: false\n            timezone: Europe/London\n        signatureKeys:\n          - 4AEE18F83AFDEB23\n          - 07E34825A909B250\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nProjects can be imported using the project name.\n\nExample:\n\n```sh\n$ pulumi import argocd:index/project:Project myproject myproject\n```\n\n",
            "properties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ProjectMetadata:ProjectMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ProjectSpec:ProjectSpec",
                    "description": "ArgoCD AppProject spec.\n"
                }
            },
            "required": [
                "metadata",
                "spec"
            ],
            "inputProperties": {
                "metadata": {
                    "$ref": "#/types/argocd:index/ProjectMetadata:ProjectMetadata",
                    "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                },
                "spec": {
                    "$ref": "#/types/argocd:index/ProjectSpec:ProjectSpec",
                    "description": "ArgoCD AppProject spec.\n"
                }
            },
            "requiredInputs": [
                "metadata",
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "metadata": {
                        "$ref": "#/types/argocd:index/ProjectMetadata:ProjectMetadata",
                        "description": "Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).\n"
                    },
                    "spec": {
                        "$ref": "#/types/argocd:index/ProjectSpec:ProjectSpec",
                        "description": "ArgoCD AppProject spec.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/projectToken:ProjectToken": {
            "description": "Manages ArgoCD project role JWT tokens. See [Project Roles](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-roles) for more info.\n\n\n\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\nconst secret = new argocd.ProjectToken(\"secret\", {\n    project: \"someproject\",\n    role: \"foobar\",\n    description: \"short lived token\",\n    expiresIn: \"1h\",\n    renewBefore: \"30m\",\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\nsecret = argocd.ProjectToken(\"secret\",\n    project=\"someproject\",\n    role=\"foobar\",\n    description=\"short lived token\",\n    expires_in=\"1h\",\n    renew_before=\"30m\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var secret = new Argocd.ProjectToken(\"secret\", new()\n    {\n        Project = \"someproject\",\n        Role = \"foobar\",\n        Description = \"short lived token\",\n        ExpiresIn = \"1h\",\n        RenewBefore = \"30m\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := argocd.NewProjectToken(ctx, \"secret\", \u0026argocd.ProjectTokenArgs{\n\t\t\tProject:     pulumi.String(\"someproject\"),\n\t\t\tRole:        pulumi.String(\"foobar\"),\n\t\t\tDescription: pulumi.String(\"short lived token\"),\n\t\t\tExpiresIn:   pulumi.String(\"1h\"),\n\t\t\tRenewBefore: pulumi.String(\"30m\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.ProjectToken;\nimport com.pulumi.argocd.ProjectTokenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var secret = new ProjectToken(\"secret\", ProjectTokenArgs.builder()\n            .project(\"someproject\")\n            .role(\"foobar\")\n            .description(\"short lived token\")\n            .expiresIn(\"1h\")\n            .renewBefore(\"30m\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  secret:\n    type: argocd:ProjectToken\n    properties:\n      project: someproject\n      role: foobar\n      description: short lived token\n      expiresIn: 1h\n      renewBefore: 30m\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the token.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "If `expires_in` is set, Unix timestamp upon which the token will expire.\n"
                },
                "expiresIn": {
                    "type": "string",
                    "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n"
                },
                "issuedAt": {
                    "type": "string",
                    "description": "Unix timestamp at which the token was issued.\n"
                },
                "jwt": {
                    "type": "string",
                    "description": "The raw JWT.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The project associated with the token.\n"
                },
                "renewAfter": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                },
                "renewBefore": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, the provider will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role in the project associated with the token.\n"
                }
            },
            "required": [
                "expiresAt",
                "issuedAt",
                "jwt",
                "project",
                "role"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the token.\n",
                    "willReplaceOnChanges": true
                },
                "expiresIn": {
                    "type": "string",
                    "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n",
                    "willReplaceOnChanges": true
                },
                "project": {
                    "type": "string",
                    "description": "The project associated with the token.\n",
                    "willReplaceOnChanges": true
                },
                "renewAfter": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                },
                "renewBefore": {
                    "type": "string",
                    "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, the provider will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The name of the role in the project associated with the token.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "project",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectToken resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "If `expires_in` is set, Unix timestamp upon which the token will expire.\n",
                        "willReplaceOnChanges": true
                    },
                    "expiresIn": {
                        "type": "string",
                        "description": "Duration before the token will expire. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. E.g. `12h`, `7d`. Default: No expiration.\n",
                        "willReplaceOnChanges": true
                    },
                    "issuedAt": {
                        "type": "string",
                        "description": "Unix timestamp at which the token was issued.\n",
                        "willReplaceOnChanges": true
                    },
                    "jwt": {
                        "type": "string",
                        "description": "The raw JWT.\n",
                        "secret": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The project associated with the token.\n",
                        "willReplaceOnChanges": true
                    },
                    "renewAfter": {
                        "type": "string",
                        "description": "Duration to control token silent regeneration based on token age. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. If set, then the token will be regenerated if it is older than `renew_after`. I.e. if `currentDate - issued_at \u003e renew_after`.\n"
                    },
                    "renewBefore": {
                        "type": "string",
                        "description": "Duration to control token silent regeneration based on remaining token lifetime. If `expires_in` is set, the provider will regenerate the token if `expires_at - currentDate \u003c renew_before`. Valid time units are `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`.\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The name of the role in the project associated with the token.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/repository:Repository": {
            "description": "Manages [repositories](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#repositories) within ArgoCD.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\n// Public Helm repository\nconst publicNginxHelm = new argocd.Repository(\"public_nginx_helm\", {\n    repo: \"https://helm.nginx.com/stable\",\n    name: \"nginx-stable\",\n    type: \"helm\",\n});\n// Public Git repository\nconst publicGit = new argocd.Repository(\"public_git\", {repo: \"git@github.com:user/somerepo.git\"});\n// Private Git repository\nconst _private = new argocd.Repository(\"private\", {\n    repo: \"git@private-git-repository.local:somerepo.git\",\n    username: \"git\",\n    sshPrivateKey: `-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----`,\n    insecure: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\n# Public Helm repository\npublic_nginx_helm = argocd.Repository(\"public_nginx_helm\",\n    repo=\"https://helm.nginx.com/stable\",\n    name=\"nginx-stable\",\n    type=\"helm\")\n# Public Git repository\npublic_git = argocd.Repository(\"public_git\", repo=\"git@github.com:user/somerepo.git\")\n# Private Git repository\nprivate = argocd.Repository(\"private\",\n    repo=\"git@private-git-repository.local:somerepo.git\",\n    username=\"git\",\n    ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\"\"\",\n    insecure=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Public Helm repository\n    var publicNginxHelm = new Argocd.Repository(\"public_nginx_helm\", new()\n    {\n        Repo = \"https://helm.nginx.com/stable\",\n        Name = \"nginx-stable\",\n        Type = \"helm\",\n    });\n\n    // Public Git repository\n    var publicGit = new Argocd.Repository(\"public_git\", new()\n    {\n        Repo = \"git@github.com:user/somerepo.git\",\n    });\n\n    // Private Git repository\n    var @private = new Argocd.Repository(\"private\", new()\n    {\n        Repo = \"git@private-git-repository.local:somerepo.git\",\n        Username = \"git\",\n        SshPrivateKey = @\"-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\",\n        Insecure = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Public Helm repository\n\t\t_, err := argocd.NewRepository(ctx, \"public_nginx_helm\", \u0026argocd.RepositoryArgs{\n\t\t\tRepo: pulumi.String(\"https://helm.nginx.com/stable\"),\n\t\t\tName: pulumi.String(\"nginx-stable\"),\n\t\t\tType: pulumi.String(\"helm\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Public Git repository\n\t\t_, err = argocd.NewRepository(ctx, \"public_git\", \u0026argocd.RepositoryArgs{\n\t\t\tRepo: pulumi.String(\"git@github.com:user/somerepo.git\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Private Git repository\n\t\t_, err = argocd.NewRepository(ctx, \"private\", \u0026argocd.RepositoryArgs{\n\t\t\tRepo:          pulumi.String(\"git@private-git-repository.local:somerepo.git\"),\n\t\t\tUsername:      pulumi.String(\"git\"),\n\t\t\tSshPrivateKey: pulumi.String(\"-----BEGIN OPENSSH PRIVATE KEY-----\\nfoo\\nbar\\n-----END OPENSSH PRIVATE KEY-----\"),\n\t\t\tInsecure:      pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.Repository;\nimport com.pulumi.argocd.RepositoryArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // Public Helm repository\n        var publicNginxHelm = new Repository(\"publicNginxHelm\", RepositoryArgs.builder()\n            .repo(\"https://helm.nginx.com/stable\")\n            .name(\"nginx-stable\")\n            .type(\"helm\")\n            .build());\n\n        // Public Git repository\n        var publicGit = new Repository(\"publicGit\", RepositoryArgs.builder()\n            .repo(\"git@github.com:user/somerepo.git\")\n            .build());\n\n        // Private Git repository\n        var private_ = new Repository(\"private\", RepositoryArgs.builder()\n            .repo(\"git@private-git-repository.local:somerepo.git\")\n            .username(\"git\")\n            .sshPrivateKey(\"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----            \"\"\")\n            .insecure(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Public Helm repository\n  publicNginxHelm:\n    type: argocd:Repository\n    name: public_nginx_helm\n    properties:\n      repo: https://helm.nginx.com/stable\n      name: nginx-stable\n      type: helm\n  # Public Git repository\n  publicGit:\n    type: argocd:Repository\n    name: public_git\n    properties:\n      repo: git@github.com:user/somerepo.git\n  # Private Git repository\n  private:\n    type: argocd:Repository\n    properties:\n      repo: git@private-git-repository.local:somerepo.git\n      username: git\n      sshPrivateKey: |-\n        -----BEGIN OPENSSH PRIVATE KEY-----\n        foo\n        bar\n        -----END OPENSSH PRIVATE KEY-----\n      insecure: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRepositories can be imported using the repository URL.\n\nNote: as the ArgoCD API does not return any sensitive information, a\n\nsubsequent `pulumi up` should be executed to make the `password`,\n\n`ssh_private_key` and `tls_client_cert_key` attributes converge to their\n\nexpected values defined within the plan.\n\nExample:\n\n```sh\n$ pulumi import argocd:index/repository:Repository myrepo git@private-git-repository.local:somerepo.git\n```\n\n",
            "properties": {
                "connectionStateStatus": {
                    "type": "string",
                    "description": "Contains information about the current state of connection to the repository server.\n"
                },
                "enableLfs": {
                    "type": "boolean",
                    "description": "Whether `git-lfs` support should be enabled for this repository.\n"
                },
                "enableOci": {
                    "type": "boolean",
                    "description": "Whether `helm-oci` support should be enabled for this repository.\n"
                },
                "githubappEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "GitHub API URL for GitHub app authentication.\n"
                },
                "githubappId": {
                    "type": "string",
                    "description": "ID of the GitHub app used to access the repo.\n"
                },
                "githubappInstallationId": {
                    "type": "string",
                    "description": "The installation ID of the GitHub App used to access the repo.\n"
                },
                "githubappPrivateKey": {
                    "type": "string",
                    "description": "Private key data (PEM) for authentication via GitHub app.\n",
                    "secret": true
                },
                "inheritedCreds": {
                    "type": "boolean",
                    "description": "Whether credentials were inherited from a credential set.\n"
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name to be used for this repo. Only used with Helm repos.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password or PAT used for authenticating at the remote repository.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The project name, in case the repository is project scoped.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "URL of the repository.\n"
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n",
                    "secret": true
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "TLS client certificate in PEM format for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "TLS client certificate private key in PEM format for authenticating at the repo server.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used for authenticating at the remote repository.\n"
                }
            },
            "required": [
                "connectionStateStatus",
                "inheritedCreds",
                "name",
                "repo"
            ],
            "inputProperties": {
                "enableLfs": {
                    "type": "boolean",
                    "description": "Whether `git-lfs` support should be enabled for this repository.\n"
                },
                "enableOci": {
                    "type": "boolean",
                    "description": "Whether `helm-oci` support should be enabled for this repository.\n"
                },
                "githubappEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "GitHub API URL for GitHub app authentication.\n"
                },
                "githubappId": {
                    "type": "string",
                    "description": "ID of the GitHub app used to access the repo.\n"
                },
                "githubappInstallationId": {
                    "type": "string",
                    "description": "The installation ID of the GitHub App used to access the repo.\n"
                },
                "githubappPrivateKey": {
                    "type": "string",
                    "description": "Private key data (PEM) for authentication via GitHub app.\n",
                    "secret": true
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name to be used for this repo. Only used with Helm repos.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password or PAT used for authenticating at the remote repository.\n",
                    "secret": true
                },
                "project": {
                    "type": "string",
                    "description": "The project name, in case the repository is project scoped.\n"
                },
                "repo": {
                    "type": "string",
                    "description": "URL of the repository.\n",
                    "willReplaceOnChanges": true
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n",
                    "secret": true
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "TLS client certificate in PEM format for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "TLS client certificate private key in PEM format for authenticating at the repo server.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username used for authenticating at the remote repository.\n"
                }
            },
            "requiredInputs": [
                "repo"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Repository resources.\n",
                "properties": {
                    "connectionStateStatus": {
                        "type": "string",
                        "description": "Contains information about the current state of connection to the repository server.\n"
                    },
                    "enableLfs": {
                        "type": "boolean",
                        "description": "Whether `git-lfs` support should be enabled for this repository.\n"
                    },
                    "enableOci": {
                        "type": "boolean",
                        "description": "Whether `helm-oci` support should be enabled for this repository.\n"
                    },
                    "githubappEnterpriseBaseUrl": {
                        "type": "string",
                        "description": "GitHub API URL for GitHub app authentication.\n"
                    },
                    "githubappId": {
                        "type": "string",
                        "description": "ID of the GitHub app used to access the repo.\n"
                    },
                    "githubappInstallationId": {
                        "type": "string",
                        "description": "The installation ID of the GitHub App used to access the repo.\n"
                    },
                    "githubappPrivateKey": {
                        "type": "string",
                        "description": "Private key data (PEM) for authentication via GitHub app.\n",
                        "secret": true
                    },
                    "inheritedCreds": {
                        "type": "boolean",
                        "description": "Whether credentials were inherited from a credential set.\n"
                    },
                    "insecure": {
                        "type": "boolean",
                        "description": "Whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name to be used for this repo. Only used with Helm repos.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password or PAT used for authenticating at the remote repository.\n",
                        "secret": true
                    },
                    "project": {
                        "type": "string",
                        "description": "The project name, in case the repository is project scoped.\n"
                    },
                    "repo": {
                        "type": "string",
                        "description": "URL of the repository.\n",
                        "willReplaceOnChanges": true
                    },
                    "sshPrivateKey": {
                        "type": "string",
                        "description": "PEM data for authenticating at the repo server. Only used with Git repos.\n",
                        "secret": true
                    },
                    "tlsClientCertData": {
                        "type": "string",
                        "description": "TLS client certificate in PEM format for authenticating at the repo server.\n"
                    },
                    "tlsClientCertKey": {
                        "type": "string",
                        "description": "TLS client certificate private key in PEM format for authenticating at the repo server.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the repo. Can be either `git` or `helm`. `git` is assumed if empty or absent.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username used for authenticating at the remote repository.\n"
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/repositoryCertificate:RepositoryCertificate": {
            "description": "Manages [custom TLS certificates](https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/#self-signed-untrusted-tls-certificates) used by ArgoCD for connecting Git repositories.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\n// HTTPS certificate\nconst private_git_repository_https = new argocd.RepositoryCertificate(\"private-git-repository-https\", {https: {\n    serverName: \"private-git-repository.local\",\n    certData: \"-----BEGIN CERTIFICATE-----\\\\nfoo\\\\nbar\\\\n-----END CERTIFICATE-----\\n\",\n}});\n// SSH certificate\nconst private_git_repository_ssh = new argocd.RepositoryCertificate(\"private-git-repository-ssh\", {ssh: {\n    serverName: \"private-git-repository.local\",\n    certSubtype: \"ssh-rsa\",\n    certData: \"AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\\n\",\n}});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\n# HTTPS certificate\nprivate_git_repository_https = argocd.RepositoryCertificate(\"private-git-repository-https\", https={\n    \"server_name\": \"private-git-repository.local\",\n    \"cert_data\": \"-----BEGIN CERTIFICATE-----\\\\nfoo\\\\nbar\\\\n-----END CERTIFICATE-----\\n\",\n})\n# SSH certificate\nprivate_git_repository_ssh = argocd.RepositoryCertificate(\"private-git-repository-ssh\", ssh={\n    \"server_name\": \"private-git-repository.local\",\n    \"cert_subtype\": \"ssh-rsa\",\n    \"cert_data\": \"AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\\n\",\n})\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // HTTPS certificate\n    var private_git_repository_https = new Argocd.RepositoryCertificate(\"private-git-repository-https\", new()\n    {\n        Https = new Argocd.Inputs.RepositoryCertificateHttpsArgs\n        {\n            ServerName = \"private-git-repository.local\",\n            CertData = @\"-----BEGIN CERTIFICATE-----\\nfoo\\nbar\\n-----END CERTIFICATE-----\n\",\n        },\n    });\n\n    // SSH certificate\n    var private_git_repository_ssh = new Argocd.RepositoryCertificate(\"private-git-repository-ssh\", new()\n    {\n        Ssh = new Argocd.Inputs.RepositoryCertificateSshArgs\n        {\n            ServerName = \"private-git-repository.local\",\n            CertSubtype = \"ssh-rsa\",\n            CertData = @\"AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\n\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// HTTPS certificate\n\t\t_, err := argocd.NewRepositoryCertificate(ctx, \"private-git-repository-https\", \u0026argocd.RepositoryCertificateArgs{\n\t\t\tHttps: \u0026argocd.RepositoryCertificateHttpsArgs{\n\t\t\t\tServerName: pulumi.String(\"private-git-repository.local\"),\n\t\t\t\tCertData:   pulumi.String(\"-----BEGIN CERTIFICATE-----\\\\nfoo\\\\nbar\\\\n-----END CERTIFICATE-----\\n\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// SSH certificate\n\t\t_, err = argocd.NewRepositoryCertificate(ctx, \"private-git-repository-ssh\", \u0026argocd.RepositoryCertificateArgs{\n\t\t\tSsh: \u0026argocd.RepositoryCertificateSshArgs{\n\t\t\t\tServerName:  pulumi.String(\"private-git-repository.local\"),\n\t\t\t\tCertSubtype: pulumi.String(\"ssh-rsa\"),\n\t\t\t\tCertData:    pulumi.String(\"AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\\n\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.RepositoryCertificate;\nimport com.pulumi.argocd.RepositoryCertificateArgs;\nimport com.pulumi.argocd.inputs.RepositoryCertificateHttpsArgs;\nimport com.pulumi.argocd.inputs.RepositoryCertificateSshArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // HTTPS certificate\n        var private_git_repository_https = new RepositoryCertificate(\"private-git-repository-https\", RepositoryCertificateArgs.builder()\n            .https(RepositoryCertificateHttpsArgs.builder()\n                .serverName(\"private-git-repository.local\")\n                .certData(\"\"\"\n-----BEGIN CERTIFICATE-----\\nfoo\\nbar\\n-----END CERTIFICATE-----\n                \"\"\")\n                .build())\n            .build());\n\n        // SSH certificate\n        var private_git_repository_ssh = new RepositoryCertificate(\"private-git-repository-ssh\", RepositoryCertificateArgs.builder()\n            .ssh(RepositoryCertificateSshArgs.builder()\n                .serverName(\"private-git-repository.local\")\n                .certSubtype(\"ssh-rsa\")\n                .certData(\"\"\"\nAAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\n                \"\"\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # HTTPS certificate\n  private-git-repository-https:\n    type: argocd:RepositoryCertificate\n    properties:\n      https:\n        serverName: private-git-repository.local\n        certData: |\n          -----BEGIN CERTIFICATE-----\\nfoo\\nbar\\n-----END CERTIFICATE-----\n  # SSH certificate\n  private-git-repository-ssh:\n    type: argocd:RepositoryCertificate\n    properties:\n      ssh:\n        serverName: private-git-repository.local\n        certSubtype: ssh-rsa\n        certData: |\n          AAAAB3NzaC1yc2EAAAADAQABAAABgQCiPZAufKgxwRgxP9qy2Gtub0FI8qJGtL8Ldb7KatBeRUQQPn8QK7ZYjzYDvP1GOutFMaQT0rKIqaGImIBsztNCno...\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "https": {
                    "$ref": "#/types/argocd:index/RepositoryCertificateHttps:RepositoryCertificateHttps",
                    "description": "Defines a `https` certificate.\n"
                },
                "ssh": {
                    "$ref": "#/types/argocd:index/RepositoryCertificateSsh:RepositoryCertificateSsh",
                    "description": "Defines a `ssh` certificate.\n"
                }
            },
            "inputProperties": {
                "https": {
                    "$ref": "#/types/argocd:index/RepositoryCertificateHttps:RepositoryCertificateHttps",
                    "description": "Defines a `https` certificate.\n",
                    "willReplaceOnChanges": true
                },
                "ssh": {
                    "$ref": "#/types/argocd:index/RepositoryCertificateSsh:RepositoryCertificateSsh",
                    "description": "Defines a `ssh` certificate.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryCertificate resources.\n",
                "properties": {
                    "https": {
                        "$ref": "#/types/argocd:index/RepositoryCertificateHttps:RepositoryCertificateHttps",
                        "description": "Defines a `https` certificate.\n",
                        "willReplaceOnChanges": true
                    },
                    "ssh": {
                        "$ref": "#/types/argocd:index/RepositoryCertificateSsh:RepositoryCertificateSsh",
                        "description": "Defines a `ssh` certificate.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "argocd:index/repositoryCredentials:RepositoryCredentials": {
            "description": "Manages [repository credentials](https://argo-cd.readthedocs.io/en/stable/user-guide/private-repositories/#credentials) within ArgoCD.\n\n**Note**: due to restrictions in the ArgoCD API the provider is unable to track drift in this resource to fields other than `username`. I.e. the provider is unable to detect changes to repository credentials that are made outside of Pulumi (e.g. manual updates to the underlying Kubernetes Secrets).\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as argocd from \"@pulumi/argocd\";\n\nconst _private = new argocd.RepositoryCredentials(\"private\", {\n    url: \"git@private-git-repository.local\",\n    username: \"git\",\n    sshPrivateKey: `-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----`,\n});\n```\n```python\nimport pulumi\nimport pulumi_argocd as argocd\n\nprivate = argocd.RepositoryCredentials(\"private\",\n    url=\"git@private-git-repository.local\",\n    username=\"git\",\n    ssh_private_key=\"\"\"-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\"\"\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Argocd = Three14.Argocd;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @private = new Argocd.RepositoryCredentials(\"private\", new()\n    {\n        Url = \"git@private-git-repository.local\",\n        Username = \"git\",\n        SshPrivateKey = @\"-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/Three141/pulumi-argocd/sdk/go/argocd\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := argocd.NewRepositoryCredentials(ctx, \"private\", \u0026argocd.RepositoryCredentialsArgs{\n\t\t\tUrl:           pulumi.String(\"git@private-git-repository.local\"),\n\t\t\tUsername:      pulumi.String(\"git\"),\n\t\t\tSshPrivateKey: pulumi.String(\"-----BEGIN OPENSSH PRIVATE KEY-----\\nfoo\\nbar\\n-----END OPENSSH PRIVATE KEY-----\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.argocd.RepositoryCredentials;\nimport com.pulumi.argocd.RepositoryCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var private_ = new RepositoryCredentials(\"private\", RepositoryCredentialsArgs.builder()\n            .url(\"git@private-git-repository.local\")\n            .username(\"git\")\n            .sshPrivateKey(\"\"\"\n-----BEGIN OPENSSH PRIVATE KEY-----\nfoo\nbar\n-----END OPENSSH PRIVATE KEY-----            \"\"\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  private:\n    type: argocd:RepositoryCredentials\n    properties:\n      url: git@private-git-repository.local\n      username: git\n      sshPrivateKey: |-\n        -----BEGIN OPENSSH PRIVATE KEY-----\n        foo\n        bar\n        -----END OPENSSH PRIVATE KEY-----\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nRepository credentials can be imported using the repository URL.\n\nNote: as the ArgoCD API does not return any sensitive information, a\n\nsubsequent `pulumi up` should be executed to make the `password`,\n\n`ssh_private_key` and `tls_client_cert_key` attributes converge to their\n\nexpected values defined within the plan.\n\nExample:\n\n```sh\n$ pulumi import argocd:index/repositoryCredentials:RepositoryCredentials myrepocreds git@private-git-repository.local:somerepo.git\n```\n\n",
            "properties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Whether `helm-oci` support should be enabled for this repo.\n"
                },
                "githubappEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "GitHub API URL for GitHub app authentication.\n"
                },
                "githubappId": {
                    "type": "string",
                    "description": "Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubappInstallationId": {
                    "type": "string",
                    "description": "ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubappPrivateKey": {
                    "type": "string",
                    "description": "Private key data (PEM) for authentication via GitHub app.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n",
                    "secret": true
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Private key data for authenticating at the repo server using SSH (only Git repos).\n",
                    "secret": true
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "TLS client cert key for authenticating at the repo server.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "URL that these credentials matches to.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "required": [
                "url"
            ],
            "inputProperties": {
                "enableOci": {
                    "type": "boolean",
                    "description": "Whether `helm-oci` support should be enabled for this repo.\n"
                },
                "githubappEnterpriseBaseUrl": {
                    "type": "string",
                    "description": "GitHub API URL for GitHub app authentication.\n"
                },
                "githubappId": {
                    "type": "string",
                    "description": "Github App ID of the app used to access the repo for GitHub app authentication.\n"
                },
                "githubappInstallationId": {
                    "type": "string",
                    "description": "ID of the installed GitHub App for GitHub app authentication.\n"
                },
                "githubappPrivateKey": {
                    "type": "string",
                    "description": "Private key data (PEM) for authentication via GitHub app.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password for authenticating at the repo server.\n",
                    "secret": true
                },
                "sshPrivateKey": {
                    "type": "string",
                    "description": "Private key data for authenticating at the repo server using SSH (only Git repos).\n",
                    "secret": true
                },
                "tlsClientCertData": {
                    "type": "string",
                    "description": "TLS client cert data for authenticating at the repo server.\n"
                },
                "tlsClientCertKey": {
                    "type": "string",
                    "description": "TLS client cert key for authenticating at the repo server.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "URL that these credentials matches to.\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating at the repo server.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RepositoryCredentials resources.\n",
                "properties": {
                    "enableOci": {
                        "type": "boolean",
                        "description": "Whether `helm-oci` support should be enabled for this repo.\n"
                    },
                    "githubappEnterpriseBaseUrl": {
                        "type": "string",
                        "description": "GitHub API URL for GitHub app authentication.\n"
                    },
                    "githubappId": {
                        "type": "string",
                        "description": "Github App ID of the app used to access the repo for GitHub app authentication.\n"
                    },
                    "githubappInstallationId": {
                        "type": "string",
                        "description": "ID of the installed GitHub App for GitHub app authentication.\n"
                    },
                    "githubappPrivateKey": {
                        "type": "string",
                        "description": "Private key data (PEM) for authentication via GitHub app.\n",
                        "secret": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for authenticating at the repo server.\n",
                        "secret": true
                    },
                    "sshPrivateKey": {
                        "type": "string",
                        "description": "Private key data for authenticating at the repo server using SSH (only Git repos).\n",
                        "secret": true
                    },
                    "tlsClientCertData": {
                        "type": "string",
                        "description": "TLS client cert data for authenticating at the repo server.\n"
                    },
                    "tlsClientCertKey": {
                        "type": "string",
                        "description": "TLS client cert key for authenticating at the repo server.\n",
                        "secret": true
                    },
                    "url": {
                        "type": "string",
                        "description": "URL that these credentials matches to.\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for authenticating at the repo server.\n"
                    }
                },
                "type": "object"
            }
        }
    }
}