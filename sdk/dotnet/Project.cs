// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Three14.Argocd
{
    /// <summary>
    /// Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Three14.Argocd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myproject = new Argocd.Project("myproject", new()
    ///     {
    ///         Metadata = new Argocd.Inputs.ProjectMetadataArgs
    ///         {
    ///             Name = "myproject",
    ///             Namespace = "argocd",
    ///             Labels = 
    ///             {
    ///                 { "acceptance", "true" },
    ///             },
    ///             Annotations = 
    ///             {
    ///                 { "this.is.a.really.long.nested.key", "yes, really!" },
    ///             },
    ///         },
    ///         Spec = new Argocd.Inputs.ProjectSpecArgs
    ///         {
    ///             Description = "simple project",
    ///             SourceNamespaces = new[]
    ///             {
    ///                 "argocd",
    ///             },
    ///             SourceRepos = new[]
    ///             {
    ///                 "*",
    ///             },
    ///             Destinations = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecDestinationArgs
    ///                 {
    ///                     Server = "https://kubernetes.default.svc",
    ///                     Namespace = "default",
    ///                 },
    ///                 new Argocd.Inputs.ProjectSpecDestinationArgs
    ///                 {
    ///                     Server = "https://kubernetes.default.svc",
    ///                     Namespace = "foo",
    ///                 },
    ///                 new Argocd.Inputs.ProjectSpecDestinationArgs
    ///                 {
    ///                     Name = "anothercluster",
    ///                     Namespace = "bar",
    ///                 },
    ///             },
    ///             ClusterResourceBlacklists = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecClusterResourceBlacklistArgs
    ///                 {
    ///                     Group = "*",
    ///                     Kind = "*",
    ///                 },
    ///             },
    ///             ClusterResourceWhitelists = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecClusterResourceWhitelistArgs
    ///                 {
    ///                     Group = "rbac.authorization.k8s.io",
    ///                     Kind = "ClusterRoleBinding",
    ///                 },
    ///                 new Argocd.Inputs.ProjectSpecClusterResourceWhitelistArgs
    ///                 {
    ///                     Group = "rbac.authorization.k8s.io",
    ///                     Kind = "ClusterRole",
    ///                 },
    ///             },
    ///             NamespaceResourceBlacklists = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecNamespaceResourceBlacklistArgs
    ///                 {
    ///                     Group = "networking.k8s.io",
    ///                     Kind = "Ingress",
    ///                 },
    ///             },
    ///             NamespaceResourceWhitelists = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecNamespaceResourceWhitelistArgs
    ///                 {
    ///                     Group = "*",
    ///                     Kind = "*",
    ///                 },
    ///             },
    ///             OrphanedResources = new Argocd.Inputs.ProjectSpecOrphanedResourcesArgs
    ///             {
    ///                 Warn = true,
    ///                 Ignores = new[]
    ///                 {
    ///                     new Argocd.Inputs.ProjectSpecOrphanedResourcesIgnoreArgs
    ///                     {
    ///                         Group = "apps/v1",
    ///                         Kind = "Deployment",
    ///                         Name = "ignored1",
    ///                     },
    ///                     new Argocd.Inputs.ProjectSpecOrphanedResourcesIgnoreArgs
    ///                     {
    ///                         Group = "apps/v1",
    ///                         Kind = "Deployment",
    ///                         Name = "ignored2",
    ///                     },
    ///                 },
    ///             },
    ///             Roles = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecRoleArgs
    ///                 {
    ///                     Name = "testrole",
    ///                     Policies = new[]
    ///                     {
    ///                         "p, proj:myproject:testrole, applications, override, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, applications, sync, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, clusters, get, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, repositories, create, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, repositories, delete, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, repositories, update, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, logs, get, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, exec, create, myproject/*, allow",
    ///                     },
    ///                 },
    ///                 new Argocd.Inputs.ProjectSpecRoleArgs
    ///                 {
    ///                     Name = "anotherrole",
    ///                     Policies = new[]
    ///                     {
    ///                         "p, proj:myproject:testrole, applications, get, myproject/*, allow",
    ///                         "p, proj:myproject:testrole, applications, sync, myproject/*, deny",
    ///                     },
    ///                 },
    ///             },
    ///             SyncWindows = new[]
    ///             {
    ///                 new Argocd.Inputs.ProjectSpecSyncWindowArgs
    ///                 {
    ///                     Kind = "allow",
    ///                     Applications = new[]
    ///                     {
    ///                         "api-*",
    ///                     },
    ///                     Clusters = new[]
    ///                     {
    ///                         "*",
    ///                     },
    ///                     Namespaces = new[]
    ///                     {
    ///                         "*",
    ///                     },
    ///                     Duration = "3600s",
    ///                     Schedule = "10 1 * * *",
    ///                     ManualSync = true,
    ///                 },
    ///                 new Argocd.Inputs.ProjectSpecSyncWindowArgs
    ///                 {
    ///                     Kind = "deny",
    ///                     Applications = new[]
    ///                     {
    ///                         "foo",
    ///                     },
    ///                     Clusters = new[]
    ///                     {
    ///                         "in-cluster",
    ///                     },
    ///                     Namespaces = new[]
    ///                     {
    ///                         "default",
    ///                     },
    ///                     Duration = "12h",
    ///                     Schedule = "22 1 5 * *",
    ///                     ManualSync = false,
    ///                     Timezone = "Europe/London",
    ///                 },
    ///             },
    ///             SignatureKeys = new[]
    ///             {
    ///                 "4AEE18F83AFDEB23",
    ///                 "07E34825A909B250",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Projects can be imported using the project name.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/project:Project myproject myproject
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ProjectMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// ArgoCD AppProject spec.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.ProjectSpec> Spec { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/Three141/pulumi-argocd/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Input("metadata", required: true)]
        public Input<Inputs.ProjectMetadataArgs> Metadata { get; set; } = null!;

        /// <summary>
        /// ArgoCD AppProject spec.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.ProjectSpecArgs> Spec { get; set; } = null!;

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ProjectMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// ArgoCD AppProject spec.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.ProjectSpecGetArgs>? Spec { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
