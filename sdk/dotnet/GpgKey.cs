// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// Manages [GPG keys](https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/) within ArgoCD.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Pulumi.Argocd;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Argocd.GpgKey("this", new()
    ///     {
    ///         PublicKey = @"-----BEGIN PGP PUBLIC KEY BLOCK-----
    /// 
    /// mQINBGSJdlcBEACnza+KvWLyKWUHJPhgs//HRL0EEmA/EcFKioBlrgPNYf/O7hNg
    /// KT3NDaNrD26pr+bOb4mfaqNNS9no8b9EP3C7Co3Wf2d4xpJ5/hlpIm3V652S5daZ
    /// I7ylVT8QOrhaqEnHH2hEcOfDaqjrYfrx3qiI8v7DmV6jfGi1tDUUgfJwiOyZk4q1
    /// jiPo5k4+XNp9mCtUAGyidLFcUqQ9XbHKgBwgAoxtIKNSbdPCGhsjgTHHhzswMH/Z
    /// DhhtcraqrfOhoP9lI4/zyCS+B9OfUy7BS/1SqWKIgdsjFIR+zHIOI69lh77+ZAVE
    /// MVYJBdFke5/g/tTPaQGuBqaIJ3d/Mi/ZlbTsoBcq5qam73uh7fcgBV5la6NeuNcR
    /// tvKMVl4DlnkJS8LBtElLEeHEylTCdNltrUFwshDKDBtq6ilTKCK14R6g4lkn8VcE
    /// 9xx7Mhdh77tp66FRZ6ge1E8EUEFwEeFhp240KRyaA5U1/kAarn8083zZ7d4+QObp
    /// L4KMqgrwLaxyPLgu0J/f946qLewV7XsbZRXE1jQa9Z7W5TEoJwjcC79DXe1wChc6
    /// cBfCtluDsnklwvldpKTEZU0q/hKE6Zt7NjLUyExV+5guoHllxoVxx7sh+jtKm/J+
    /// 5gh+B3xOTDxRV2XYIx1TM6U1iLxAqchzFec8dfkuTbs/5f++PrddvZfiUQARAQAB
    /// tD1BcmdvQ0QgVGVycmFmb3JtIFByb3ZpZGVyIDxmYWtldXNlckB1c2Vycy5ub3Jl
    /// cGx5LmdpdGh1Yi5jb20+iQJOBBMBCgA4FiEEvK9bNlncXDhFAk6kmtkpVUAdOI0F
    /// AmSJdlcCGwMFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQmtkpVUAdOI2FdA//
    /// YuFYsX6SUVgI4l68ZHE34jLTWU5R2ujB6luErcguAlLyDtrD3melva3V/ETc69/1
    /// 5o7Ayn3a7uz5lCEvUSLsCN+V2o3EjrA81pt8Zs+Z9WYeZE5F5DnKzq81PObdASB7
    /// Po2X0qLqqKIhpQxc/E7m26xmePCf82H36gtvPiEVmVA5yduk1lLG3aZtNIRCa4VK
    /// gmDjR8Se+OZeAw7JQCOeJB9/Y8oQ8nVkj1SWNIICaUwIXHtrj7r1z6XTDAEkGeBg
    /// HXW8IEhZDE1Nq3vQtZvgwftEoPT/Ff+8DwvL1JUov2ObQDolallzKaiiVfGZhPJZ
    /// 4PMtEPEmSL9QWJAG5jiBVC3BdVZtXBNkC1HqTCXwZc/wzp5O9MmMXmCrUFr4FfHu
    /// IZ560MNpp/SrtUrOahLmvuG0B+Ze96e2nm5ap5wkCDaQouOIqM7Lj+FGq64cu2B/
    /// oSsl7joBZQUYXv8meNOQssm6jArRLG2oFoiEdRqzd2/RjvvJliLN9OCNvV43f38h
    /// 8Ep8RDi9RiHhSKvwrvDD9x/JRm6zQUetjrctmjdIYp8k129LrD0Qr9ULXfphZdrv
    /// xga7/lyQLmukLu7Mxwp+ss2bY/wjT8mlT5P55kBpXXyYILhLsUESCHG6D8/Ov+vv
    /// OoZS+BSfe/0vc1aTfDKxj5wAx27a6z5o25X27feEl3U=
    /// =kqkH
    /// -----END PGP PUBLIC KEY BLOCK-----
    /// ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// GPG Keys can be imported using the key ID.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/gpgKey:GpgKey this 9AD92955401D388D
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/gpgKey:GpgKey")]
    public partial class GpgKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Fingerprint is the fingerprint of the key
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Owner holds the owner identification, e.g. a name and e-mail address
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Raw key data of the GPG key to create
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// SubType holds the key's sub type (e.g. rsa4096)
        /// </summary>
        [Output("subType")]
        public Output<string> SubType { get; private set; } = null!;

        /// <summary>
        /// Trust holds the level of trust assigned to this key
        /// </summary>
        [Output("trust")]
        public Output<string> Trust { get; private set; } = null!;


        /// <summary>
        /// Create a GpgKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GpgKey(string name, GpgKeyArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/gpgKey:GpgKey", name, args ?? new GpgKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GpgKey(string name, Input<string> id, GpgKeyState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/gpgKey:GpgKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GpgKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GpgKey Get(string name, Input<string> id, GpgKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new GpgKey(name, id, state, options);
        }
    }

    public sealed class GpgKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Raw key data of the GPG key to create
        /// </summary>
        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        public GpgKeyArgs()
        {
        }
        public static new GpgKeyArgs Empty => new GpgKeyArgs();
    }

    public sealed class GpgKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Fingerprint is the fingerprint of the key
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        /// <summary>
        /// Owner holds the owner identification, e.g. a name and e-mail address
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Raw key data of the GPG key to create
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// SubType holds the key's sub type (e.g. rsa4096)
        /// </summary>
        [Input("subType")]
        public Input<string>? SubType { get; set; }

        /// <summary>
        /// Trust holds the level of trust assigned to this key
        /// </summary>
        [Input("trust")]
        public Input<string>? Trust { get; set; }

        public GpgKeyState()
        {
        }
        public static new GpgKeyState Empty => new GpgKeyState();
    }
}
