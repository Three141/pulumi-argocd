// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Argocd
{
    /// <summary>
    /// Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.
    /// 
    /// ## Import
    /// 
    /// Cluster credentials can be imported using the server URL.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ClusterConfig> Config { get; private set; } = null!;

        /// <summary>
        /// Information about cluster cache and state.
        /// </summary>
        [Output("infos")]
        public Output<ImmutableArray<Outputs.ClusterInfo>> Infos { get; private set; } = null!;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.ClusterMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<string>> Namespaces { get; private set; } = null!;

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Output("server")]
        public Output<string?> Server { get; private set; } = null!;

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Output("shard")]
        public Output<string?> Shard { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.ClusterConfigArgs> Config { get; set; } = null!;

        [Input("metadatas")]
        private InputList<Inputs.ClusterMetadataArgs>? _metadatas;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public InputList<Inputs.ClusterMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ClusterMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Input("shard")]
        public Input<string>? Shard { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ClusterConfigGetArgs>? Config { get; set; }

        [Input("infos")]
        private InputList<Inputs.ClusterInfoGetArgs>? _infos;

        /// <summary>
        /// Information about cluster cache and state.
        /// </summary>
        public InputList<Inputs.ClusterInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.ClusterInfoGetArgs>());
            set => _infos = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.ClusterMetadataGetArgs>? _metadatas;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public InputList<Inputs.ClusterMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ClusterMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Input("shard")]
        public Input<string>? Shard { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
