// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Three14.Argocd
{
    /// <summary>
    /// Manages [clusters](https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters) within ArgoCD.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Argocd = Three14.Argocd;
    /// using Aws = Pulumi.Aws;
    /// using Gcp = Pulumi.Gcp;
    /// using Kubernetes = Pulumi.Kubernetes;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     //# Bearer token Authentication
    ///     var kubernetes = new Argocd.Cluster("kubernetes", new()
    ///     {
    ///         Server = "https://1.2.3.4:12345",
    ///         Config = new Argocd.Inputs.ClusterConfigArgs
    ///         {
    ///             BearerToken = "eyJhbGciOiJSUzI...",
    ///             TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs
    ///             {
    ///                 CaData = Std.File.Invoke(new()
    ///                 {
    ///                     Input = "path/to/ca.pem",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///         },
    ///     });
    /// 
    ///     //# GCP GKE cluster
    ///     var cluster = Gcp.Container.GetCluster.Invoke(new()
    ///     {
    ///         Name = "cluster",
    ///         Location = "europe-west1",
    ///     });
    /// 
    ///     var argocdManager = new Kubernetes.Core.V1.ServiceAccount("argocd_manager", new()
    ///     {
    ///         Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
    ///         {
    ///             Name = "argocd-manager",
    ///             Namespace = "kube-system",
    ///         },
    ///     });
    /// 
    ///     var argocdManagerClusterRole = new Kubernetes.Rbac.V1.ClusterRole("argocd_manager", new()
    ///     {
    ///         Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
    ///         {
    ///             Name = "argocd-manager-role",
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Kubernetes.Types.Inputs.Rbac.V1.PolicyRuleArgs
    ///             {
    ///                 ApiGroups = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Verbs = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///             new Kubernetes.Types.Inputs.Rbac.V1.PolicyRuleArgs
    ///             {
    ///                 NonResourceUrls = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Verbs = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var argocdManagerClusterRoleBinding = new Kubernetes.Rbac.V1.ClusterRoleBinding("argocd_manager", new()
    ///     {
    ///         Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
    ///         {
    ///             Name = "argocd-manager-role-binding",
    ///         },
    ///         RoleRef = new Kubernetes.Types.Inputs.Rbac.V1.RoleRefArgs
    ///         {
    ///             ApiGroup = "rbac.authorization.k8s.io",
    ///             Kind = "ClusterRole",
    ///             Name = argocdManagerClusterRole.Metadata.Apply(metadata =&gt; metadata.Name),
    ///         },
    ///         Subjects = new[]
    ///         {
    ///             new Kubernetes.Types.Inputs.Rbac.V1.SubjectArgs
    ///             {
    ///                 Kind = "ServiceAccount",
    ///                 Name = argocdManager.Metadata.Apply(metadata =&gt; metadata.Name),
    ///                 Namespace = argocdManager.Metadata.Apply(metadata =&gt; metadata.Namespace),
    ///             },
    ///         },
    ///     });
    /// 
    ///     var argocdManagerSecret = new Kubernetes.Core.V1.Secret("argocd_manager", new()
    ///     {
    ///         Metadata = new Kubernetes.Types.Inputs.Meta.V1.ObjectMetaArgs
    ///         {
    ///             Name = argocdManager.DefaultSecretName,
    ///             Namespace = argocdManager.Metadata.Apply(metadata =&gt; metadata.Namespace),
    ///         },
    ///     });
    /// 
    ///     var gke = new Argocd.Cluster("gke", new()
    ///     {
    ///         Server = Std.Join.Invoke(new()
    ///         {
    ///             Separator = "",
    ///             Input = new[]
    ///             {
    ///                 "https://%s",
    ///                 cluster.Apply(getClusterResult =&gt; getClusterResult.Endpoint),
    ///             },
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Name = "gke",
    ///         Config = new Argocd.Inputs.ClusterConfigArgs
    ///         {
    ///             BearerToken = argocdManagerKubernetesSecret.Data.Token,
    ///             TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs
    ///             {
    ///                 CaData = Std.Base64decode.Invoke(new()
    ///                 {
    ///                     Input = cluster.Apply(getClusterResult =&gt; getClusterResult.MasterAuths[0]?.ClusterCaCertificate),
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///         },
    ///     });
    /// 
    ///     //# AWS EKS cluster
    ///     var clusterGetCluster = Aws.Eks.GetCluster.Invoke(new()
    ///     {
    ///         Name = "cluster",
    ///     });
    /// 
    ///     var eks = new Argocd.Cluster("eks", new()
    ///     {
    ///         Server = Std.Join.Invoke(new()
    ///         {
    ///             Separator = "",
    ///             Input = new[]
    ///             {
    ///                 "https://%s",
    ///                 clusterGetCluster.Apply(getClusterResult =&gt; getClusterResult.Endpoint),
    ///             },
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         Name = "eks",
    ///         Namespaces = new[]
    ///         {
    ///             "default",
    ///             "optional",
    ///         },
    ///         Config = new Argocd.Inputs.ClusterConfigArgs
    ///         {
    ///             AwsAuthConfigs = new[]
    ///             {
    ///                 new Argocd.Inputs.ClusterConfigAwsAuthConfigArgs
    ///                 {
    ///                     ClusterName = "myekscluster",
    ///                     RoleArn = "arn:aws:iam::&lt;123456789012&gt;:role/&lt;role-name&gt;",
    ///                 },
    ///             },
    ///             TlsClientConfig = new Argocd.Inputs.ClusterConfigTlsClientConfigArgs
    ///             {
    ///                 CaData = Std.Base64decode.Invoke(new()
    ///                 {
    ///                     Input = clusterGetCluster.Apply(getClusterResult =&gt; getClusterResult.CertificateAuthorities[0]?.Data),
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Cluster credentials can be imported using the server URL.
    /// 
    /// Example:
    /// 
    /// ```sh
    /// $ pulumi import argocd:index/cluster:Cluster mycluster https://mycluster.io:443
    /// ```
    /// </summary>
    [ArgocdResourceType("argocd:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Output("config")]
        public Output<Outputs.ClusterConfig> Config { get; private set; } = null!;

        /// <summary>
        /// Information about cluster cache and state.
        /// </summary>
        [Output("infos")]
        public Output<ImmutableArray<Outputs.ClusterInfo>> Infos { get; private set; } = null!;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        [Output("metadatas")]
        public Output<ImmutableArray<Outputs.ClusterMetadata>> Metadatas { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<string>> Namespaces { get; private set; } = null!;

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Output("server")]
        public Output<string?> Server { get; private set; } = null!;

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Output("shard")]
        public Output<string?> Shard { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("argocd:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("argocd:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/Three141/pulumi-argocd/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Input("config", required: true)]
        public Input<Inputs.ClusterConfigArgs> Config { get; set; } = null!;

        [Input("metadatas")]
        private InputList<Inputs.ClusterMetadataArgs>? _metadatas;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public InputList<Inputs.ClusterMetadataArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ClusterMetadataArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Input("shard")]
        public Input<string>? Shard { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster information for connecting to a cluster.
        /// </summary>
        [Input("config")]
        public Input<Inputs.ClusterConfigGetArgs>? Config { get; set; }

        [Input("infos")]
        private InputList<Inputs.ClusterInfoGetArgs>? _infos;

        /// <summary>
        /// Information about cluster cache and state.
        /// </summary>
        public InputList<Inputs.ClusterInfoGetArgs> Infos
        {
            get => _infos ?? (_infos = new InputList<Inputs.ClusterInfoGetArgs>());
            set => _infos = value;
        }

        [Input("metadatas")]
        private InputList<Inputs.ClusterMetadataGetArgs>? _metadatas;

        /// <summary>
        /// Standard cluster secret's metadata. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata
        /// </summary>
        public InputList<Inputs.ClusterMetadataGetArgs> Metadatas
        {
            get => _metadatas ?? (_metadatas = new InputList<Inputs.ClusterMetadataGetArgs>());
            set => _metadatas = value;
        }

        /// <summary>
        /// Name of the cluster. If omitted, will use the server address.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// List of namespaces which are accessible in that cluster. Cluster level resources would be ignored if namespace list is not empty.
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/projects/#project-scoped-repositories-and-clusters.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// Server is the API server URL of the Kubernetes cluster.
        /// </summary>
        [Input("server")]
        public Input<string>? Server { get; set; }

        /// <summary>
        /// Optional shard number. Calculated on the fly by the application controller if not specified.
        /// </summary>
        [Input("shard")]
        public Input<string>? Shard { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
