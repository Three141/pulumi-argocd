// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as argocd from "@three14/pulumi-argocd";
 *
 * const myproject = new argocd.Project("myproject", {
 *     metadata: {
 *         name: "myproject",
 *         namespace: "argocd",
 *         labels: {
 *             acceptance: "true",
 *         },
 *         annotations: {
 *             "this.is.a.really.long.nested.key": "yes, really!",
 *         },
 *     },
 *     spec: {
 *         description: "simple project",
 *         sourceNamespaces: ["argocd"],
 *         sourceRepos: ["*"],
 *         destinations: [
 *             {
 *                 server: "https://kubernetes.default.svc",
 *                 namespace: "default",
 *             },
 *             {
 *                 server: "https://kubernetes.default.svc",
 *                 namespace: "foo",
 *             },
 *             {
 *                 name: "anothercluster",
 *                 namespace: "bar",
 *             },
 *         ],
 *         clusterResourceBlacklists: [{
 *             group: "*",
 *             kind: "*",
 *         }],
 *         clusterResourceWhitelists: [
 *             {
 *                 group: "rbac.authorization.k8s.io",
 *                 kind: "ClusterRoleBinding",
 *             },
 *             {
 *                 group: "rbac.authorization.k8s.io",
 *                 kind: "ClusterRole",
 *             },
 *         ],
 *         namespaceResourceBlacklists: [{
 *             group: "networking.k8s.io",
 *             kind: "Ingress",
 *         }],
 *         namespaceResourceWhitelists: [{
 *             group: "*",
 *             kind: "*",
 *         }],
 *         orphanedResources: {
 *             warn: true,
 *             ignores: [
 *                 {
 *                     group: "apps/v1",
 *                     kind: "Deployment",
 *                     name: "ignored1",
 *                 },
 *                 {
 *                     group: "apps/v1",
 *                     kind: "Deployment",
 *                     name: "ignored2",
 *                 },
 *             ],
 *         },
 *         roles: [
 *             {
 *                 name: "testrole",
 *                 policies: [
 *                     "p, proj:myproject:testrole, applications, override, myproject/*, allow",
 *                     "p, proj:myproject:testrole, applications, sync, myproject/*, allow",
 *                     "p, proj:myproject:testrole, clusters, get, myproject/*, allow",
 *                     "p, proj:myproject:testrole, repositories, create, myproject/*, allow",
 *                     "p, proj:myproject:testrole, repositories, delete, myproject/*, allow",
 *                     "p, proj:myproject:testrole, repositories, update, myproject/*, allow",
 *                     "p, proj:myproject:testrole, logs, get, myproject/*, allow",
 *                     "p, proj:myproject:testrole, exec, create, myproject/*, allow",
 *                 ],
 *             },
 *             {
 *                 name: "anotherrole",
 *                 policies: [
 *                     "p, proj:myproject:testrole, applications, get, myproject/*, allow",
 *                     "p, proj:myproject:testrole, applications, sync, myproject/*, deny",
 *                 ],
 *             },
 *         ],
 *         syncWindows: [
 *             {
 *                 kind: "allow",
 *                 applications: ["api-*"],
 *                 clusters: ["*"],
 *                 namespaces: ["*"],
 *                 duration: "3600s",
 *                 schedule: "10 1 * * *",
 *                 manualSync: true,
 *             },
 *             {
 *                 kind: "deny",
 *                 applications: ["foo"],
 *                 clusters: ["in-cluster"],
 *                 namespaces: ["default"],
 *                 duration: "12h",
 *                 schedule: "22 1 5 * *",
 *                 manualSync: false,
 *                 timezone: "Europe/London",
 *             },
 *         ],
 *         signatureKeys: [
 *             "4AEE18F83AFDEB23",
 *             "07E34825A909B250",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Projects can be imported using the project name.
 *
 * Example:
 *
 * ```sh
 * $ pulumi import argocd:index/project:Project myproject myproject
 * ```
 */
export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectState, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'argocd:index/project:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    public readonly metadata!: pulumi.Output<outputs.ProjectMetadata>;
    /**
     * ArgoCD AppProject spec.
     */
    public readonly spec!: pulumi.Output<outputs.ProjectSpec>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectArgs | ProjectState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as ProjectArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Project resources.
 */
export interface ProjectState {
    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    metadata?: pulumi.Input<inputs.ProjectMetadata>;
    /**
     * ArgoCD AppProject spec.
     */
    spec?: pulumi.Input<inputs.ProjectSpec>;
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    metadata: pulumi.Input<inputs.ProjectMetadata>;
    /**
     * ArgoCD AppProject spec.
     */
    spec: pulumi.Input<inputs.ProjectSpec>;
}
