// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as argocd from "@pulumi/argocd";
 *
 * // Clusters Generator
 * const clustersSelector = new argocd.ApplicationSet("clusters_selector", {
 *     metadata: {
 *         name: "clusters-selector",
 *     },
 *     spec: {
 *         generators: [{
 *             clusters: [{
 *                 selector: {
 *                     matchLabels: {
 *                         "argocd.argoproj.io/secret-type": "cluster",
 *                     },
 *                 },
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{name}}-clusters-selector",
 *             },
 *             spec: {
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argocd-example-apps/",
 *                     targetRevision: "HEAD",
 *                     path: "guestbook",
 *                 }],
 *                 destination: {
 *                     server: "{{server}}",
 *                     namespace: "default",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Cluster Decision Resource Generator
 * const clusterDecisionResource = new argocd.ApplicationSet("cluster_decision_resource", {
 *     metadata: {
 *         name: "cluster-decision-resource",
 *     },
 *     spec: {
 *         generators: [{
 *             clusterDecisionResources: [{
 *                 configMapRef: "my-configmap",
 *                 name: "quak",
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{name}}-guestbook",
 *             },
 *             spec: {
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argocd-example-apps/",
 *                     targetRevision: "HEAD",
 *                     path: "guestbook",
 *                 }],
 *                 destination: {
 *                     server: "{{server}}",
 *                     namespace: "default",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Git Generator - Directories
 * const gitDirectories = new argocd.ApplicationSet("git_directories", {
 *     metadata: {
 *         name: "git-directories",
 *     },
 *     spec: {
 *         generators: [{
 *             gits: [{
 *                 repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                 revision: "HEAD",
 *                 directories: [
 *                     {
 *                         path: "applicationset/examples/git-generator-directory/cluster-addons/*",
 *                     },
 *                     {
 *                         path: "applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook",
 *                         exclude: true,
 *                     },
 *                 ],
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{path.basename}}-git-directories",
 *             },
 *             spec: {
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                     targetRevision: "HEAD",
 *                     path: "{{path}}",
 *                 }],
 *                 destination: {
 *                     server: "https://kubernetes.default.svc",
 *                     namespace: "{{path.basename}}",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Git Generator - Files
 * const gitFiles = new argocd.ApplicationSet("git_files", {
 *     metadata: {
 *         name: "git-files",
 *     },
 *     spec: {
 *         generators: [{
 *             gits: [{
 *                 repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                 revision: "HEAD",
 *                 files: [{
 *                     path: "applicationset/examples/git-generator-files-discovery/cluster-config/**&#47;config.json",
 *                 }],
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{cluster.name}}-git-files",
 *             },
 *             spec: {
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                     targetRevision: "HEAD",
 *                     path: "applicationset/examples/git-generator-files-discovery/apps/guestbook",
 *                 }],
 *                 destination: {
 *                     server: "{{cluster.address}}",
 *                     namespace: "guestbook",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // List Generator
 * const list = new argocd.ApplicationSet("list", {
 *     metadata: {
 *         name: "list",
 *     },
 *     spec: {
 *         generators: [{
 *             lists: [{
 *                 elements: [
 *                     {
 *                         cluster: "engineering-dev",
 *                         url: "https://kubernetes.default.svc",
 *                     },
 *                     {
 *                         cluster: "engineering-prod",
 *                         url: "https://kubernetes.default.svc",
 *                         foo: "bar",
 *                     },
 *                 ],
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{cluster}}-guestbook",
 *             },
 *             spec: {
 *                 project: "my-project",
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                     targetRevision: "HEAD",
 *                     path: "applicationset/examples/list-generator/guestbook/{{cluster}}",
 *                 }],
 *                 destination: {
 *                     server: "{{url}}",
 *                     namespace: "guestbook",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Matrix Generator
 * const matrix = new argocd.ApplicationSet("matrix", {
 *     metadata: {
 *         name: "matrix",
 *     },
 *     spec: {
 *         generators: [{
 *             matrices: [{
 *                 generators: [
 *                     {
 *                         gits: [{
 *                             repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                             revision: "HEAD",
 *                             directories: [{
 *                                 path: "applicationset/examples/matrix/cluster-addons/*",
 *                             }],
 *                         }],
 *                     },
 *                     {
 *                         clusters: [{
 *                             selector: {
 *                                 matchLabels: {
 *                                     "argocd.argoproj.io/secret-type": "cluster",
 *                                 },
 *                             },
 *                         }],
 *                     },
 *                 ],
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{path.basename}}-{{name}}",
 *             },
 *             spec: {
 *                 project: "default",
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                     targetRevision: "HEAD",
 *                     path: "{{path}}",
 *                 }],
 *                 destination: {
 *                     server: "{{server}}",
 *                     namespace: "{{path.basename}}",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Merge Generator
 * const merge = new argocd.ApplicationSet("merge", {
 *     metadata: {
 *         name: "merge",
 *     },
 *     spec: {
 *         generators: [{
 *             merges: [{
 *                 mergeKeys: ["server"],
 *                 generators: [
 *                     {
 *                         clusters: [{
 *                             values: {
 *                                 kafka: "true",
 *                                 redis: "false",
 *                             },
 *                         }],
 *                     },
 *                     {
 *                         clusters: [{
 *                             selector: {
 *                                 matchLabels: {
 *                                     "use-kafka": "false",
 *                                 },
 *                             },
 *                             values: {
 *                                 kafka: "false",
 *                             },
 *                         }],
 *                     },
 *                     {
 *                         lists: [{
 *                             elements: [{
 *                                 server: "https://2.4.6.8",
 *                                 "values.redis": "true",
 *                             }],
 *                         }],
 *                     },
 *                 ],
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{name}}",
 *             },
 *             spec: {
 *                 project: "default",
 *                 sources: [{
 *                     repoUrl: "https://github.com/argoproj/argo-cd.git",
 *                     path: "app",
 *                     targetRevision: "HEAD",
 *                     helm: {
 *                         parameters: [
 *                             {
 *                                 name: "kafka",
 *                                 value: "{{values.kafka}}",
 *                             },
 *                             {
 *                                 name: "redis",
 *                                 value: "{{values.redis}}",
 *                             },
 *                         ],
 *                     },
 *                 }],
 *                 destination: {
 *                     server: "{{server}}",
 *                     namespace: "default",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Pull Request Generator - GitHub
 * const prGithub = new argocd.ApplicationSet("pr_github", {
 *     metadata: {
 *         name: "pr-github",
 *     },
 *     spec: {
 *         generators: [{
 *             pullRequests: [{
 *                 github: {
 *                     api: "https://git.example.com/",
 *                     owner: "myorg",
 *                     repo: "myrepository",
 *                     appSecretName: "github-app-repo-creds",
 *                     tokenRef: {
 *                         secretName: "github-token",
 *                         key: "token",
 *                     },
 *                     labels: ["preview"],
 *                 },
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "myapp-{{branch}}-{{number}}",
 *             },
 *             spec: {
 *                 project: "default",
 *                 sources: [{
 *                     repoUrl: "https://github.com/myorg/myrepo.git",
 *                     path: "kubernetes/",
 *                     targetRevision: "{{head_sha}}",
 *                     helm: {
 *                         parameters: [{
 *                             name: "image.tag",
 *                             value: "pull-{{head_sha}}",
 *                         }],
 *                     },
 *                 }],
 *                 destination: {
 *                     server: "https://kubernetes.default.svc",
 *                     namespace: "default",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // SCM Provider Generator - GitHub
 * const scmGithub = new argocd.ApplicationSet("scm_github", {
 *     metadata: {
 *         name: "scm-github",
 *     },
 *     spec: {
 *         generators: [{
 *             scmProviders: [{
 *                 github: {
 *                     appSecretName: "gh-app-repo-creds",
 *                     organization: "myorg",
 *                 },
 *             }],
 *         }],
 *         template: {
 *             metadata: {
 *                 name: "{{repository}}",
 *             },
 *             spec: {
 *                 project: "default",
 *                 sources: [{
 *                     repoUrl: "{{url}}",
 *                     path: "kubernetes/",
 *                     targetRevision: "{{branch}}",
 *                 }],
 *                 destination: {
 *                     server: "https://kubernetes.default.svc",
 *                     namespace: "default",
 *                 },
 *             },
 *         },
 *     },
 * });
 * // Progressive Sync - Rolling Update
 * const progressiveSync = new argocd.ApplicationSet("progressive_sync", {
 *     metadata: {
 *         name: "progressive-sync",
 *     },
 *     spec: {
 *         generators: [{
 *             lists: [{
 *                 elements: [
 *                     {
 *                         cluster: "engineering-dev",
 *                         url: "https://1.2.3.4",
 *                         env: "env-dev",
 *                     },
 *                     {
 *                         cluster: "engineering-qa",
 *                         url: "https://2.4.6.8",
 *                         env: "env-qa",
 *                     },
 *                     {
 *                         cluster: "engineering-prod",
 *                         url: "https://9.8.7.6/",
 *                         env: "env-prod",
 *                     },
 *                 ],
 *             }],
 *         }],
 *         strategy: {
 *             type: "RollingSync",
 *             rollingSyncs: [{
 *                 steps: [
 *                     {
 *                         matchExpressions: [{
 *                             key: "envLabel",
 *                             operator: "In",
 *                             values: ["env-dev"],
 *                         }],
 *                     },
 *                     {
 *                         matchExpressions: [{
 *                             key: "envLabel",
 *                             operator: "In",
 *                             values: ["env-qa"],
 *                         }],
 *                         maxUpdate: "0",
 *                     },
 *                     {
 *                         matchExpressions: [{
 *                             key: "envLabel",
 *                             operator: "In",
 *                             values: ["env-prod"],
 *                         }],
 *                         maxUpdate: "10%",
 *                     },
 *                 ],
 *             }],
 *         },
 *         goTemplate: true,
 *         template: {
 *             metadata: {
 *                 name: "{{.cluster}}-guestbook",
 *                 labels: {
 *                     envLabel: "{{.env}}",
 *                 },
 *             },
 *             spec: {
 *                 project: "default",
 *                 sources: [{
 *                     repoUrl: "https://github.com/infra-team/cluster-deployments.git",
 *                     path: "guestbook/{{.cluster}}",
 *                     targetRevision: "HEAD",
 *                 }],
 *                 destination: {
 *                     server: "{{.url}}",
 *                     namespace: "guestbook",
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 */
export class ApplicationSet extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationSetState, opts?: pulumi.CustomResourceOptions): ApplicationSet {
        return new ApplicationSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'argocd:index/applicationSet:ApplicationSet';

    /**
     * Returns true if the given object is an instance of ApplicationSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationSet.__pulumiType;
    }

    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    public readonly metadata!: pulumi.Output<outputs.ApplicationSetMetadata>;
    /**
     * ArgoCD application set resource spec.
     */
    public readonly spec!: pulumi.Output<outputs.ApplicationSetSpec>;

    /**
     * Create a ApplicationSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationSetArgs | ApplicationSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationSetState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as ApplicationSetArgs | undefined;
            if ((!args || args.metadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'metadata'");
            }
            if ((!args || args.spec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'spec'");
            }
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationSet resources.
 */
export interface ApplicationSetState {
    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    metadata?: pulumi.Input<inputs.ApplicationSetMetadata>;
    /**
     * ArgoCD application set resource spec.
     */
    spec?: pulumi.Input<inputs.ApplicationSetSpec>;
}

/**
 * The set of arguments for constructing a ApplicationSet resource.
 */
export interface ApplicationSetArgs {
    /**
     * Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
     */
    metadata: pulumi.Input<inputs.ApplicationSetMetadata>;
    /**
     * ArgoCD application set resource spec.
     */
    spec: pulumi.Input<inputs.ApplicationSetSpec>;
}
