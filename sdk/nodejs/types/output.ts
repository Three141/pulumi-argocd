// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ApplicationMetadata {
    /**
     * An unstructured key value map stored with the applications.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the applications.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: {[key: string]: string};
    /**
     * Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: string;
    /**
     * Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace: string;
    /**
     * An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid: string;
}

export interface ApplicationSetMetadata {
    /**
     * An unstructured key value map stored with the applicationsets.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the applicationsets.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: {[key: string]: string};
    /**
     * Name of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: string;
    /**
     * Namespace of the applicationsets.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace: string;
    /**
     * An opaque value that represents the internal version of this applicationsets.argoproj.io that can be used by clients to determine when applicationsets.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this applicationsets.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid: string;
}

export interface ApplicationSetSpec {
    /**
     * Application set generators. Generators are responsible for generating parameters, which are then rendered into the template: fields of the ApplicationSet resource.
     */
    generators: outputs.ApplicationSetSpecGenerator[];
    /**
     * Enable use of [Go Text Template](https://pkg.go.dev/text/template).
     */
    goTemplate?: boolean;
    /**
     * Optional list of [Go Templating Options](https://pkg.go.dev/text/template#Template.Option). Only relevant if `goTemplate` is true.
     */
    goTemplateOptions?: string[];
    /**
     * Application Set [ignoreApplicationDifferences](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/#ignore-certain-changes-to-applications).
     */
    ignoreApplicationDifferences?: outputs.ApplicationSetSpecIgnoreApplicationDifference[];
    /**
     * [Progressive Sync](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Progressive-Syncs/) strategy
     */
    strategy?: outputs.ApplicationSetSpecStrategy;
    /**
     * Application Set [sync policy](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Controlling-Resource-Modification/).
     */
    syncPolicy?: outputs.ApplicationSetSpecSyncPolicy;
    /**
     * Application set template. The template fields of the ApplicationSet spec are used to generate Argo CD Application resources.
     */
    template: outputs.ApplicationSetSpecTemplate;
    /**
     * Application set template patch, as in the [Argo CD ApplicationSet spec](https://argocd-applicationset.readthedocs.io/en/stable/fields/#templatepatch).
     */
    templatePatch?: string;
}

export interface ApplicationSetSpecGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorList[];
    /**
     * [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
     */
    matrices?: outputs.ApplicationSetSpecGeneratorMatrix[];
    /**
     * [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
     */
    merges?: outputs.ApplicationSetSpecGeneratorMerge[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrix {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.
     */
    generators: outputs.ApplicationSetSpecGeneratorMatrixGenerator[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorList[];
    /**
     * [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
     */
    matrices?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrix[];
    /**
     * [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
     */
    merges?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMerge[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrix {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.
     */
    generators: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMerge {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
     */
    generators: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator[];
    /**
     * Keys to merge into resulting parameter set.
     */
    mergeKeys: string[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorMergeTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMatrixTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMerge {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
     */
    generators: outputs.ApplicationSetSpecGeneratorMergeGenerator[];
    /**
     * Keys to merge into resulting parameter set.
     */
    mergeKeys: string[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMergeGeneratorList[];
    /**
     * [Matrix generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/) combine the parameters generated by two child generators, iterating through every combination of each generator's generated parameters. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Matrix/#restrictions) regarding their usage - particularly regarding nesting matrix generators.
     */
    matrices?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrix[];
    /**
     * [Merge generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/) combine parameters produced by the base (first) generator with matching parameter sets produced by subsequent generators. Take note of the [restrictions](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Merge/#restrictions) regarding their usage - particularly regarding nesting merge generators.
     */
    merges?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMerge[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrix {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent matrix generator into the template fields of the ApplicationSet resource.
     */
    generators: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMatrixTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMerge {
    /**
     * Child generator. Generators are responsible for generating parameters, which are then combined by the parent merge generator.
     */
    generators: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator[];
    /**
     * Keys to merge into resulting parameter set.
     */
    mergeKeys: string[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGenerator {
    /**
     * The [cluster decision resource](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster-Decision-Resource/) generates a list of Argo CD clusters.
     */
    clusterDecisionResources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource[];
    /**
     * The [cluster generator](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Cluster/) produces parameters based on the list of items found within the cluster secret.
     */
    clusters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster[];
    /**
     * [Git generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Git/) generates parameters using either the directory structure of a specified Git repository (directory generator), or, using the contents of JSON/YAML files found within a specified repository (file generator).
     */
    gits?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit[];
    /**
     * [List generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-List/) generate parameters based on an arbitrary list of key/value pairs (as long as the values are string values).
     */
    lists?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList[];
    /**
     * [Pull Request generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-Pull-Request/) uses the API of an SCMaaS provider to automatically discover open pull requests within a repository.
     */
    pullRequests?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest[];
    /**
     * [SCM Provider generators](https://argo-cd.readthedocs.io/en/stable/operator-manual/applicationset/Generators-SCM-Provider/) uses the API of an SCMaaS provider to automatically discover repositories within an organization.
     */
    scmProviders?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider[];
    /**
     * The Selector allows to post-filter based on generated values using the kubernetes common labelSelector format.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorCluster {
    /**
     * Boolean value defaulting to `true` to indicate that this block has been added thereby allowing all other attributes to be optional.
     */
    enabled: boolean;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    selector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the cluster generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResource {
    /**
     * ConfigMap with the duck type definitions needed to retrieve the data this includes apiVersion(group/version), kind, matchKey and validation settings.
     */
    configMapRef: string;
    /**
     * Label selector used to find the resource defined in the `configMapRef`. Alternative to `name`.
     */
    labelSelector?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector;
    /**
     * Resource name of the kind, group and version, defined in the `configMapRef`.
     */
    name?: string;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate;
    /**
     * Arbitrary string key-value pairs which are passed directly as parameters to the template.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceLabelSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterDecisionResourceTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorClusterTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGit {
    /**
     * List of directories in the source repository to use when template the Application..
     */
    directories?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory[];
    /**
     * List of files in the source repository to use when template the Application.
     */
    files?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile[];
    /**
     * Prefix for all path-related parameter names.
     */
    pathParamPrefix?: string;
    /**
     * URL to the repository to use.
     */
    repoUrl: string;
    /**
     * Revision of the source repository to use.
     */
    revision?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate;
    /**
     * Arbitrary string key-value pairs to pass to the template via the values field of the git generator.
     */
    values?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitDirectory {
    /**
     * Flag indicating whether or not the directory should be excluded when templating.
     */
    exclude?: boolean;
    /**
     * Path in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitFile {
    /**
     * Path to the file in the repository.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorGitTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorList {
    /**
     * List of key/value pairs to pass as parameters into the template
     */
    elements: {[key: string]: string}[];
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorListTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorMergeTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorMergeGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecGeneratorMergeTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorMergeTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpec;
}

export interface ApplicationSetSpecGeneratorMergeTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorMergeTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorPullRequest {
    /**
     * Fetch pull requests from a repo hosted on a Bitbucket Server.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServer;
    /**
     * Filters allow selecting which pull requests to generate for.
     */
    filters?: outputs.ApplicationSetSpecGeneratorPullRequestFilter[];
    /**
     * Specify the repository from which to fetch the Gitea Pull requests.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorPullRequestGitea;
    /**
     * Specify the repository from which to fetch the GitHub Pull requests.
     */
    github?: outputs.ApplicationSetSpecGeneratorPullRequestGithub;
    /**
     * Specify the project from which to fetch the GitLab merge requests.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorPullRequestGitlab;
    /**
     * How often to check for changes (in seconds). Default: 30min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorPullRequestTemplate;
}

export interface ApplicationSetSpecGeneratorPullRequestBitbucketServer {
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
    /**
     * Repo name to scan.
     */
    repo: string;
}

export interface ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorPullRequestFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestGitea {
    /**
     * The Gitea API URL to talk to.
     */
    api: string;
    /**
     * Allow insecure tls, for self-signed certificates; default: false.
     */
    insecure?: boolean;
    /**
     * Gitea org or user to scan.
     */
    owner: string;
    /**
     * Gitea repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorPullRequestGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorPullRequestGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorPullRequestGithub {
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret with permission to access pull requests.
     */
    appSecretName?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitHub org or user to scan.
     */
    owner: string;
    /**
     * GitHub repo name to scan.
     */
    repo: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorPullRequestGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorPullRequestGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorPullRequestGitlab {
    /**
     * The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
     */
    api?: string;
    /**
     * Labels is used to filter the PRs that you want to target.
     */
    labels?: string[];
    /**
     * GitLab project to scan.
     */
    project: string;
    /**
     * additional MRs filter to get only those with a certain state. Default:  "" (all states).
     */
    pullRequestState?: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorPullRequestGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorPullRequestGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpec;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorPullRequestTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorScmProvider {
    /**
     * Uses the Azure DevOps API to look up eligible repositories based on a team project within an Azure DevOps organization.
     */
    azureDevops?: outputs.ApplicationSetSpecGeneratorScmProviderAzureDevops;
    /**
     * Uses the Bitbucket API V2 to scan a workspace in bitbucket.org.
     */
    bitbucketCloud?: outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloud;
    /**
     * Use the Bitbucket Server API (1.0) to scan repos in a project.
     */
    bitbucketServer?: outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServer;
    /**
     * Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers necessarily support all protocols.
     */
    cloneProtocol?: string;
    /**
     * Filters for which repos should be considered.
     */
    filters?: outputs.ApplicationSetSpecGeneratorScmProviderFilter[];
    /**
     * Gitea mode uses the Gitea API to scan organizations in your instance.
     */
    gitea?: outputs.ApplicationSetSpecGeneratorScmProviderGitea;
    /**
     * Uses the GitHub API to scan an organization in either github.com or GitHub Enterprise.
     */
    github?: outputs.ApplicationSetSpecGeneratorScmProviderGithub;
    /**
     * Uses the GitLab API to scan and organization in either gitlab.com or self-hosted GitLab.
     */
    gitlab?: outputs.ApplicationSetSpecGeneratorScmProviderGitlab;
    /**
     * How often to check for changes (in seconds). Default: 3min.
     */
    requeueAfterSeconds?: string;
    /**
     * Generator template. Used to override the values of the spec-level template.
     */
    template?: outputs.ApplicationSetSpecGeneratorScmProviderTemplate;
}

export interface ApplicationSetSpecGeneratorScmProviderAzureDevops {
    /**
     * The Personal Access Token (PAT) to use when connecting.
     */
    accessTokenRef?: outputs.ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef;
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The URL to Azure DevOps. Defaults to https://dev.azure.com.
     */
    api?: string;
    /**
     * Azure Devops organization. E.g. "my-organization".
     */
    organization: string;
    /**
     * Azure Devops team project. E.g. "my-team".
     */
    teamProject: string;
}

export interface ApplicationSetSpecGeneratorScmProviderAzureDevopsAccessTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderBitbucketCloud {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The app password to use for the user. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/.
     */
    appPasswordRef?: outputs.ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef;
    /**
     * Bitbucket workspace to scan.
     */
    owner: string;
    /**
     * Bitbucket user to use when authenticating. Should have a "member" role to be able to read all repositories and branches.
     */
    user: string;
}

export interface ApplicationSetSpecGeneratorScmProviderBitbucketCloudAppPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderBitbucketServer {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest.
     */
    api: string;
    /**
     * Credentials for Basic auth.
     */
    basicAuth?: outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth;
    /**
     * Project to scan.
     */
    project: string;
}

export interface ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuth {
    /**
     * Password (or personal access token) reference.
     */
    passwordRef?: outputs.ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef;
    /**
     * Username for Basic auth.
     */
    username?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderBitbucketServerBasicAuthPasswordRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderFilter {
    /**
     * A regex which must match the branch name.
     */
    branchMatch?: string;
    /**
     * A regex which must match at least one label.
     */
    labelMatch?: string;
    /**
     * An array of paths, all of which must not exist.
     */
    pathsDoNotExists?: string[];
    /**
     * An array of paths, all of which must exist.
     */
    pathsExists?: string[];
    /**
     * A regex for repo names.
     */
    repositoryMatch?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderGitea {
    /**
     * Scan all branches instead of just the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitea URL to talk to. For example https://gitea.mydomain.com/.
     */
    api?: string;
    /**
     * Allow self-signed TLS / Certificates.
     */
    insecure?: boolean;
    /**
     * Gitea organization or user to scan.
     */
    owner: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorScmProviderGiteaTokenRef;
}

export interface ApplicationSetSpecGeneratorScmProviderGiteaTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderGithub {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The GitHub API URL to talk to. Default https://api.github.com/.
     */
    api?: string;
    /**
     * Reference to a GitHub App repo-creds secret. Uses a GitHub App to access the API instead of a PAT.
     */
    appSecretName?: string;
    /**
     * GitHub org to scan.
     */
    organization: string;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorScmProviderGithubTokenRef;
}

export interface ApplicationSetSpecGeneratorScmProviderGithubTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderGitlab {
    /**
     * If true, scan every branch of every repository. If false, scan only the default branch.
     */
    allBranches?: boolean;
    /**
     * The Gitlab API URL to talk to.
     */
    api?: string;
    /**
     * Gitlab group to scan. You can use either the project id (recommended) or the full namespaced path.
     */
    group: string;
    /**
     * Recurse through subgroups (true) or scan only the base group (false). Defaults to `false`.
     */
    includeSubgroups?: boolean;
    /**
     * Authentication token reference.
     */
    tokenRef?: outputs.ApplicationSetSpecGeneratorScmProviderGitlabTokenRef;
}

export interface ApplicationSetSpecGeneratorScmProviderGitlabTokenRef {
    /**
     * Key containing information in Kubernetes `Secret`.
     */
    key: string;
    /**
     * Name of Kubernetes `Secret`.
     */
    secretName: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateMetadata;
    /**
     * The application specification.
     */
    spec?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpec;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name?: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl?: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecGeneratorScmProviderTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSetSpecGeneratorSelector {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecGeneratorSelectorMatchExpression[];
    /**
     * A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `matchExpressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
     */
    matchLabels?: {[key: string]: string};
}

export interface ApplicationSetSpecGeneratorSelectorMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecIgnoreApplicationDifference {
    /**
     * jq path to ignore differences
     */
    jqPathExpressions?: string[];
    /**
     * Json pointers to ignore differences
     */
    jsonPointers?: string[];
    /**
     * name
     */
    name?: string;
}

export interface ApplicationSetSpecStrategy {
    /**
     * Update strategy allowing you to group Applications by labels present on the generated Application resources. When the ApplicationSet changes, the changes will be applied to each group of Application resources sequentially.
     */
    rollingSyncs?: outputs.ApplicationSetSpecStrategyRollingSync[];
    /**
     * Type of progressive sync.
     */
    type: string;
}

export interface ApplicationSetSpecStrategyRollingSync {
    /**
     * Configuration used to define which applications to include in each stage of the rolling sync. All Applications in each group must become Healthy before the ApplicationSet controller will proceed to update the next group of Applications.
     */
    steps: outputs.ApplicationSetSpecStrategyRollingSyncStep[];
}

export interface ApplicationSetSpecStrategyRollingSyncStep {
    /**
     * A list of label selector requirements. The requirements are ANDed.
     */
    matchExpressions?: outputs.ApplicationSetSpecStrategyRollingSyncStepMatchExpression[];
    /**
     * Maximum number of simultaneous Application updates in a group. Supports both integer and percentage string values (rounds down, but floored at 1 Application for >0%). Default is 100%, unbounded.
     */
    maxUpdate?: string;
}

export interface ApplicationSetSpecStrategyRollingSyncStepMatchExpression {
    /**
     * The label key that the selector applies to.
     */
    key?: string;
    /**
     * A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
     */
    operator?: string;
    /**
     * An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
     */
    values?: string[];
}

export interface ApplicationSetSpecSyncPolicy {
    /**
     * Represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, and sync.
     */
    applicationsSync?: string;
    /**
     * Label selector used to narrow the scope of targeted clusters.
     */
    preserveResourcesOnDeletion?: boolean;
}

export interface ApplicationSetSpecTemplate {
    /**
     * Kubernetes object metadata for templated Application.
     */
    metadata: outputs.ApplicationSetSpecTemplateMetadata;
    /**
     * The application specification.
     */
    spec: outputs.ApplicationSetSpecTemplateSpec;
}

export interface ApplicationSetSpecTemplateMetadata {
    /**
     * An unstructured key value map that may be used to store arbitrary metadata for the resulting Application.
     */
    annotations?: {[key: string]: string};
    /**
     * List of finalizers to apply to the resulting Application.
     */
    finalizers?: string[];
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the resulting Application.
     */
    labels?: {[key: string]: string};
    /**
     * Name of the resulting Application
     */
    name: string;
    /**
     * Namespace of the resulting Application
     */
    namespace?: string;
}

export interface ApplicationSetSpecTemplateSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination: outputs.ApplicationSetSpecTemplateSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSetSpecTemplateSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSetSpecTemplateSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources: outputs.ApplicationSetSpecTemplateSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSetSpecTemplateSpecSyncPolicy;
}

export interface ApplicationSetSpecTemplateSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSetSpecTemplateSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSetSpecTemplateSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSetSpecTemplateSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSetSpecTemplateSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSetSpecTemplateSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSetSpecTemplateSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSetSpecTemplateSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSetSpecTemplateSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSetSpecTemplateSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSetSpecTemplateSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSetSpecTemplateSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSetSpecTemplateSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget;
}

export interface ApplicationSetSpecTemplateSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSetSpecTemplateSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSetSpecTemplateSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSetSpecTemplateSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSetSpecTemplateSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSetSpecTemplateSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSetSpecTemplateSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSetSpecTemplateSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSetSpecTemplateSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSetSpecTemplateSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationSpec {
    /**
     * Reference to the Kubernetes server and namespace in which the application will be deployed.
     */
    destination: outputs.ApplicationSpecDestination;
    /**
     * Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
     */
    ignoreDifferences?: outputs.ApplicationSpecIgnoreDifference[];
    /**
     * List of information (URLs, email addresses, and plain text) that relates to the application.
     */
    infos?: outputs.ApplicationSpecInfo[];
    /**
     * The project the application belongs to. Defaults to `default`.
     */
    project?: string;
    /**
     * Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
     */
    revisionHistoryLimit?: number;
    /**
     * Location of the application's manifests or chart.
     */
    sources: outputs.ApplicationSpecSource[];
    /**
     * Controls when and how a sync will be performed.
     */
    syncPolicy?: outputs.ApplicationSpecSyncPolicy;
}

export interface ApplicationSpecDestination {
    /**
     * Name of the target cluster. Can be used instead of `server`.
     */
    name?: string;
    /**
     * Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
     */
    namespace?: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ApplicationSpecIgnoreDifference {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * List of JQ path expression strings targeting the field(s) to ignore.
     */
    jqPathExpressions?: string[];
    /**
     * List of JSONPaths strings targeting the field(s) to ignore.
     */
    jsonPointers?: string[];
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * List of external controller manager names whose changes to fields should be ignored.
     */
    managedFieldsManagers?: string[];
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
}

export interface ApplicationSpecInfo {
    /**
     * Name of the information.
     */
    name?: string;
    /**
     * Value of the information.
     */
    value?: string;
}

export interface ApplicationSpecSource {
    /**
     * Helm chart name. Must be specified for applications sourced from a Helm repo.
     */
    chart?: string;
    /**
     * Path/directory specific options.
     */
    directory?: outputs.ApplicationSpecSourceDirectory;
    /**
     * Helm specific options.
     */
    helm?: outputs.ApplicationSpecSourceHelm;
    /**
     * Kustomize specific options.
     */
    kustomize?: outputs.ApplicationSpecSourceKustomize;
    /**
     * Directory path within the repository. Only valid for applications sourced from Git.
     */
    path?: string;
    /**
     * Config management plugin specific options.
     */
    plugin?: outputs.ApplicationSpecSourcePlugin;
    /**
     * Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
     */
    ref?: string;
    /**
     * URL to the repository (Git or Helm) that contains the application manifests.
     */
    repoUrl: string;
    /**
     * Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
     */
    targetRevision?: string;
}

export interface ApplicationSpecSourceDirectory {
    /**
     * Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
     */
    exclude?: string;
    /**
     * Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
     */
    include?: string;
    /**
     * Jsonnet specific options.
     */
    jsonnet?: outputs.ApplicationSpecSourceDirectoryJsonnet;
    /**
     * Whether to scan a directory recursively for manifests.
     */
    recurse?: boolean;
}

export interface ApplicationSpecSourceDirectoryJsonnet {
    /**
     * List of Jsonnet External Variables.
     */
    extVars?: outputs.ApplicationSpecSourceDirectoryJsonnetExtVar[];
    /**
     * Additional library search dirs.
     */
    libs?: string[];
    /**
     * List of Jsonnet Top-level Arguments
     */
    tlas?: outputs.ApplicationSpecSourceDirectoryJsonnetTla[];
}

export interface ApplicationSpecSourceDirectoryJsonnetExtVar {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSpecSourceDirectoryJsonnetTla {
    /**
     * Determines whether the variable should be evaluated as jsonnet code or treated as string.
     */
    code?: boolean;
    /**
     * Name of Jsonnet variable.
     */
    name?: string;
    /**
     * Value of Jsonnet variable.
     */
    value?: string;
}

export interface ApplicationSpecSourceHelm {
    /**
     * File parameters for the helm template.
     */
    fileParameters?: outputs.ApplicationSpecSourceHelmFileParameter[];
    /**
     * Prevents 'helm template' from failing when `valueFiles` do not exist locally by not appending them to 'helm template --values'.
     */
    ignoreMissingValueFiles?: boolean;
    /**
     * Helm parameters which are passed to the helm template command upon manifest generation.
     */
    parameters?: outputs.ApplicationSpecSourceHelmParameter[];
    /**
     * If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
     */
    passCredentials?: boolean;
    /**
     * Helm release name. If omitted it will use the application name.
     */
    releaseName?: string;
    /**
     * Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
     */
    skipCrds?: boolean;
    /**
     * List of Helm value files to use when generating a template.
     */
    valueFiles?: string[];
    /**
     * Helm values to be passed to 'helm template', typically defined as a block.
     */
    values?: string;
    /**
     * The Helm version to use for templating. Accepts either `v2` or `v3`
     */
    version?: string;
}

export interface ApplicationSpecSourceHelmFileParameter {
    /**
     * Name of the Helm parameter.
     */
    name: string;
    /**
     * Path to the file containing the values for the Helm parameter.
     */
    path: string;
}

export interface ApplicationSpecSourceHelmParameter {
    /**
     * Determines whether to tell Helm to interpret booleans and numbers as strings.
     */
    forceString?: boolean;
    /**
     * Name of the Helm parameter.
     */
    name?: string;
    /**
     * Value of the Helm parameter.
     */
    value?: string;
}

export interface ApplicationSpecSourceKustomize {
    /**
     * List of additional annotations to add to rendered manifests.
     */
    commonAnnotations?: {[key: string]: string};
    /**
     * List of additional labels to add to rendered manifests.
     */
    commonLabels?: {[key: string]: string};
    /**
     * List of Kustomize image override specifications.
     */
    images?: string[];
    /**
     * Prefix appended to resources for Kustomize apps.
     */
    namePrefix?: string;
    /**
     * Suffix appended to resources for Kustomize apps.
     */
    nameSuffix?: string;
    /**
     * A list of [Kustomize patches](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/) to apply.
     */
    patches?: outputs.ApplicationSpecSourceKustomizePatch[];
    /**
     * Version of Kustomize to use for rendering manifests.
     */
    version?: string;
}

export interface ApplicationSpecSourceKustomizePatch {
    /**
     * Additional [options](https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/patches/#name-and-kind-changes).
     */
    options?: {[key: string]: boolean};
    /**
     * Inline Kustomize patch to apply.
     */
    patch?: string;
    /**
     * Path to a file containing the patch to apply.
     */
    path?: string;
    /**
     * Target(s) to patch
     */
    target: outputs.ApplicationSpecSourceKustomizePatchTarget;
}

export interface ApplicationSpecSourceKustomizePatchTarget {
    /**
     * Annotation selector to use when matching the Kubernetes resource.
     */
    annotationSelector?: string;
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * Label selector to use when matching the Kubernetes resource.
     */
    labelSelector?: string;
    /**
     * The Kubernetes resource Name to match for.
     */
    name?: string;
    /**
     * The Kubernetes resource Namespace to match for.
     */
    namespace?: string;
    /**
     * The Kubernetes resource Version to match for.
     */
    version?: string;
}

export interface ApplicationSpecSourcePlugin {
    /**
     * Environment variables passed to the plugin.
     */
    envs?: outputs.ApplicationSpecSourcePluginEnv[];
    /**
     * Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
     */
    name?: string;
}

export interface ApplicationSpecSourcePluginEnv {
    /**
     * Name of the environment variable.
     */
    name?: string;
    /**
     * Value of the environment variable.
     */
    value?: string;
}

export interface ApplicationSpecSyncPolicy {
    /**
     * Whether to automatically keep an application synced to the target revision.
     */
    automated?: outputs.ApplicationSpecSyncPolicyAutomated;
    /**
     * Controls metadata in the given namespace (if `CreateNamespace=true`).
     */
    managedNamespaceMetadata?: outputs.ApplicationSpecSyncPolicyManagedNamespaceMetadata;
    /**
     * Controls failed sync retry behavior.
     */
    retry?: outputs.ApplicationSpecSyncPolicyRetry;
    /**
     * List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
     */
    syncOptions?: string[];
}

export interface ApplicationSpecSyncPolicyAutomated {
    /**
     * Allows apps have zero live resources.
     */
    allowEmpty?: boolean;
    /**
     * Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
     */
    prune?: boolean;
    /**
     * Whether to revert resources back to their desired state upon modification in the cluster.
     */
    selfHeal?: boolean;
}

export interface ApplicationSpecSyncPolicyManagedNamespaceMetadata {
    /**
     * Annotations to apply to the namespace.
     */
    annotations?: {[key: string]: string};
    /**
     * Labels to apply to the namespace.
     */
    labels?: {[key: string]: string};
}

export interface ApplicationSpecSyncPolicyRetry {
    /**
     * Controls how to backoff on subsequent retries of failed syncs.
     */
    backoff?: outputs.ApplicationSpecSyncPolicyRetryBackoff;
    /**
     * Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
     */
    limit?: string;
}

export interface ApplicationSpecSyncPolicyRetryBackoff {
    /**
     * Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    duration?: string;
    /**
     * Factor to multiply the base duration after each failed retry.
     */
    factor?: string;
    /**
     * Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
     */
    maxDuration?: string;
}

export interface ApplicationStatus {
    /**
     * List of currently observed application conditions.
     */
    conditions: outputs.ApplicationStatusCondition[];
    /**
     * Application's current health status.
     */
    healths: outputs.ApplicationStatusHealth[];
    /**
     * Information about any ongoing operations, such as a sync.
     */
    operationStates: outputs.ApplicationStatusOperationState[];
    /**
     * When the application state was reconciled using the latest git version.
     */
    reconciledAt: string;
    /**
     * List of Kubernetes resources managed by this application.
     */
    resources: outputs.ApplicationStatusResource[];
    /**
     * List of URLs and container images used by this application.
     */
    summaries: outputs.ApplicationStatusSummary[];
    /**
     * Application's current sync status
     */
    syncs: outputs.ApplicationStatusSync[];
}

export interface ApplicationStatusCondition {
    /**
     * The time the condition was last observed.
     */
    lastTransitionTime: string;
    /**
     * Human-readable message indicating details about condition.
     */
    message: string;
    /**
     * Application condition type.
     */
    type: string;
}

export interface ApplicationStatusHealth {
    /**
     * Human-readable informational message describing the health status.
     */
    message: string;
    /**
     * Status code of the application or resource.
     */
    status: string;
}

export interface ApplicationStatusOperationState {
    /**
     * Time of operation completion.
     */
    finishedAt: string;
    /**
     * Any pertinent messages when attempting to perform operation (typically errors).
     */
    message: string;
    /**
     * The current phase of the operation.
     */
    phase: string;
    /**
     * Count of operation retries.
     */
    retryCount: string;
    /**
     * Time of operation start.
     */
    startedAt: string;
}

export interface ApplicationStatusResource {
    /**
     * The Kubernetes resource Group.
     */
    group: string;
    /**
     * Resource health status.
     */
    healths: outputs.ApplicationStatusResourceHealth[];
    /**
     * Indicates whether or not this resource has a hook annotation.
     */
    hook: boolean;
    /**
     * The Kubernetes resource Kind.
     */
    kind: string;
    /**
     * The Kubernetes resource Name.
     */
    name: string;
    /**
     * The Kubernetes resource Namespace.
     */
    namespace: string;
    /**
     * Indicates if the resources requires pruning or not.
     */
    requiresPruning: boolean;
    /**
     * Resource sync status.
     */
    status: string;
    /**
     * Sync wave.
     */
    syncWave: string;
    /**
     * The Kubernetes resource Version.
     */
    version: string;
}

export interface ApplicationStatusResourceHealth {
    /**
     * Human-readable informational message describing the health status.
     */
    message: string;
    /**
     * Status code of the application or resource.
     */
    status: string;
}

export interface ApplicationStatusSummary {
    /**
     * All external URLs of application child resources.
     */
    externalUrls: any[];
    /**
     * All images of application child resources.
     */
    images: any[];
}

export interface ApplicationStatusSync {
    /**
     * Information about the revision the comparison has been performed to.
     */
    revision: string;
    /**
     * Information about the revision(s) the comparison has been performed to.
     */
    revisions: any[];
    /**
     * Sync state of the comparison.
     */
    status: string;
}

export interface ClusterConfig {
    awsAuthConfigs?: outputs.ClusterConfigAwsAuthConfig[];
    /**
     * Server requires Bearer authentication. The client will not attempt to use refresh tokens for an OAuth2 flow.
     */
    bearerToken?: string;
    /**
     * Configuration for an exec provider used to call an external command to perform cluster authentication See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig.
     */
    execProviderConfig?: outputs.ClusterConfigExecProviderConfig;
    /**
     * Password for servers that require Basic authentication.
     */
    password?: string;
    /**
     * Settings to enable transport layer security when connecting to the cluster.
     */
    tlsClientConfig?: outputs.ClusterConfigTlsClientConfig;
    /**
     * Username for servers that require Basic authentication.
     */
    username?: string;
}

export interface ClusterConfigAwsAuthConfig {
    /**
     * AWS cluster name.
     */
    clusterName?: string;
    /**
     * IAM role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
     */
    roleArn?: string;
}

export interface ClusterConfigExecProviderConfig {
    /**
     * Preferred input version of the ExecInfo
     */
    apiVersion?: string;
    /**
     * Arguments to pass to the command when executing it
     */
    args?: string[];
    /**
     * Command to execute
     */
    command?: string;
    /**
     * Env defines additional environment variables to expose to the process. Passed as a map of strings
     */
    env?: {[key: string]: string};
    /**
     * This text is shown to the user when the executable doesn't seem to be present
     */
    installHint?: string;
}

export interface ClusterConfigTlsClientConfig {
    /**
     * PEM-encoded bytes (typically read from a root certificates bundle).
     */
    caData?: string;
    /**
     * PEM-encoded bytes (typically read from a client certificate file).
     */
    certData?: string;
    /**
     * Whether server should be accessed without verifying the TLS certificate.
     */
    insecure?: boolean;
    /**
     * PEM-encoded bytes (typically read from a client certificate key file).
     */
    keyData?: string;
    /**
     * Name to pass to the server for SNI and used in the client to check server certificates against. If empty, the hostname used to contact the server is used.
     */
    serverName?: string;
}

export interface ClusterInfo {
    /**
     * Number of applications managed by Argo CD on the cluster.
     */
    applicationsCount: string;
    /**
     * Information about the connection to the cluster.
     */
    connectionStates: outputs.ClusterInfoConnectionState[];
    /**
     * Kubernetes version of the cluster.
     */
    serverVersion: string;
}

export interface ClusterInfoConnectionState {
    /**
     * Human readable information about the connection status.
     */
    message: string;
    /**
     * Current status indicator for the connection.
     */
    status: string;
}

export interface ClusterMetadata {
    /**
     * An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: {[key: string]: string};
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: {[key: string]: string};
}

export interface ProjectMetadata {
    /**
     * An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
     */
    annotations?: {[key: string]: string};
    /**
     * A sequence number representing a specific generation of the desired state.
     */
    generation: number;
    /**
     * Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
     */
    labels?: {[key: string]: string};
    /**
     * Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
     */
    name: string;
    /**
     * Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
     */
    namespace: string;
    /**
     * An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
     */
    resourceVersion: string;
    /**
     * The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
     */
    uid: string;
}

export interface ProjectSpec {
    /**
     * Blacklisted cluster level resources.
     */
    clusterResourceBlacklists?: outputs.ProjectSpecClusterResourceBlacklist[];
    /**
     * Whitelisted cluster level resources.
     */
    clusterResourceWhitelists?: outputs.ProjectSpecClusterResourceWhitelist[];
    /**
     * Project description.
     */
    description?: string;
    /**
     * Destinations available for deployment.
     */
    destinations: outputs.ProjectSpecDestination[];
    /**
     * Blacklisted namespace level resources.
     */
    namespaceResourceBlacklists?: outputs.ProjectSpecNamespaceResourceBlacklist[];
    /**
     * Whitelisted namespace level resources.
     */
    namespaceResourceWhitelists?: outputs.ProjectSpecNamespaceResourceWhitelist[];
    /**
     * Settings specifying if controller should monitor orphaned resources of apps in this project.
     */
    orphanedResources?: outputs.ProjectSpecOrphanedResources;
    /**
     * User defined RBAC roles associated with this project.
     */
    roles?: outputs.ProjectSpecRole[];
    /**
     * List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
     */
    signatureKeys?: string[];
    /**
     * List of namespaces that application resources are allowed to be created in.
     */
    sourceNamespaces?: string[];
    /**
     * List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
     */
    sourceRepos: string[];
    /**
     * Settings controlling when syncs can be run for apps in this project.
     */
    syncWindows?: outputs.ProjectSpecSyncWindow[];
}

export interface ProjectSpecClusterResourceBlacklist {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
}

export interface ProjectSpecClusterResourceWhitelist {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
}

export interface ProjectSpecDestination {
    /**
     * Name of the destination cluster which can be used instead of server.
     */
    name?: string;
    /**
     * Target namespace for applications' resources.
     */
    namespace: string;
    /**
     * URL of the target cluster and must be set to the Kubernetes control plane API.
     */
    server?: string;
}

export interface ProjectSpecNamespaceResourceBlacklist {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
}

export interface ProjectSpecNamespaceResourceWhitelist {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
}

export interface ProjectSpecOrphanedResources {
    ignores?: outputs.ProjectSpecOrphanedResourcesIgnore[];
    /**
     * Whether a warning condition should be created for apps which have orphaned resources.
     */
    warn?: boolean;
}

export interface ProjectSpecOrphanedResourcesIgnore {
    /**
     * The Kubernetes resource Group to match for.
     */
    group?: string;
    /**
     * The Kubernetes resource Kind to match for.
     */
    kind?: string;
    /**
     * The Kubernetes resource name to match for.
     */
    name?: string;
}

export interface ProjectSpecRole {
    /**
     * Description of the role.
     */
    description?: string;
    /**
     * List of OIDC group claims bound to this role.
     */
    groups?: string[];
    /**
     * Name of the role.
     */
    name: string;
    /**
     * List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
     */
    policies: string[];
}

export interface ProjectSpecSyncWindow {
    /**
     * List of applications that the window will apply to.
     */
    applications?: string[];
    /**
     * List of clusters that the window will apply to.
     */
    clusters?: string[];
    /**
     * Amount of time the sync window will be open.
     */
    duration?: string;
    /**
     * Defines if the window allows or blocks syncs, allowed values are `allow` or `deny`.
     */
    kind?: string;
    /**
     * Enables manual syncs when they would otherwise be blocked.
     */
    manualSync?: boolean;
    /**
     * List of namespaces that the window will apply to.
     */
    namespaces?: string[];
    /**
     * Time the window will begin, specified in cron format.
     */
    schedule?: string;
    /**
     * Timezone that the schedule will be evaluated in.
     */
    timezone?: string;
}

export interface RepositoryCertificateHttps {
    /**
     * The actual certificate data, dependent on the certificate type.
     */
    certData: string;
    /**
     * Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
     */
    certInfo: string;
    /**
     * The sub type of the cert, i.e. `ssh-rsa`.
     */
    certSubtype: string;
    /**
     * DNS name of the server this certificate is intended for.
     */
    serverName: string;
}

export interface RepositoryCertificateSsh {
    /**
     * The actual certificate data, dependent on the certificate type.
     */
    certData: string;
    /**
     * Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
     */
    certInfo: string;
    /**
     * The sub type of the cert, i.e. `ssh-rsa`.
     */
    certSubtype: string;
    /**
     * DNS name of the server this certificate is intended for.
     */
    serverName: string;
}

export namespace config {
    export interface Kubernetes {
        /**
         * PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
         */
        clientCertificate?: string;
        /**
         * PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
         */
        clientKey?: string;
        /**
         * PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
         */
        clusterCaCertificate?: string;
        /**
         * Context to choose from the config file. Can be sourced from `KUBE_CTX`.
         */
        configContext?: string;
        configContextAuthInfo?: string;
        configContextCluster?: string;
        /**
         * Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
         */
        exec?: outputs.config.KubernetesExec;
        /**
         * The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
         */
        host?: string;
        /**
         * Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
         */
        insecure?: boolean;
        /**
         * The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
         */
        password?: string;
        /**
         * Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
         */
        token?: string;
        /**
         * The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
         */
        username?: string;
    }

    export interface KubernetesExec {
        /**
         * API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
         */
        apiVersion: string;
        /**
         * Map of environment variables to set when executing the plugin.
         */
        args?: string[];
        /**
         * Command to execute.
         */
        command: string;
        /**
         * List of arguments to pass when executing the plugin.
         */
        env?: {[key: string]: string};
    }

}
