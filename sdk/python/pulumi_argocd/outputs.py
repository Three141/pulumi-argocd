# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetApplicationMetadataResult',
    'GetApplicationSpecResult',
    'GetApplicationSpecDestinationResult',
    'GetApplicationSpecIgnoreDifferenceResult',
    'GetApplicationSpecInfoResult',
    'GetApplicationSpecSourceResult',
    'GetApplicationSpecSourceDirectoryResult',
    'GetApplicationSpecSourceDirectoryJsonnetResult',
    'GetApplicationSpecSourceDirectoryJsonnetExtVarResult',
    'GetApplicationSpecSourceDirectoryJsonnetTlaResult',
    'GetApplicationSpecSourceHelmResult',
    'GetApplicationSpecSourceHelmFileParameterResult',
    'GetApplicationSpecSourceHelmParameterResult',
    'GetApplicationSpecSourceKustomizeResult',
    'GetApplicationSpecSourcePluginResult',
    'GetApplicationSpecSourcePluginEnvResult',
    'GetApplicationSpecSourcePluginParameterResult',
    'GetApplicationSpecSyncPolicyResult',
    'GetApplicationSpecSyncPolicyAutomatedResult',
    'GetApplicationSpecSyncPolicyRetryResult',
    'GetApplicationSpecSyncPolicyRetryBackoffResult',
    'GetApplicationStatusResult',
    'GetApplicationStatusConditionResult',
    'GetApplicationStatusHealthResult',
    'GetApplicationStatusOperationStateResult',
    'GetApplicationStatusResourceResult',
    'GetApplicationStatusResourceHealthResult',
    'GetApplicationStatusSummaryResult',
    'GetApplicationStatusSyncResult',
]

@pulumi.output_type
class GetApplicationMetadataResult(dict):
    def __init__(__self__, *,
                 annotations: Mapping[str, str],
                 generation: int,
                 labels: Mapping[str, str],
                 name: str,
                 namespace: str,
                 resource_version: str,
                 uid: str):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def generation(self) -> int:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        return pulumi.get(self, "uid")


@pulumi.output_type
class GetApplicationSpecResult(dict):
    def __init__(__self__, *,
                 destination: 'outputs.GetApplicationSpecDestinationResult',
                 ignore_differences: Sequence['outputs.GetApplicationSpecIgnoreDifferenceResult'],
                 infos: Sequence['outputs.GetApplicationSpecInfoResult'],
                 project: str,
                 revision_history_limit: int,
                 sources: Sequence['outputs.GetApplicationSpecSourceResult'],
                 sync_policy: 'outputs.GetApplicationSpecSyncPolicyResult'):
        """
        :param 'GetApplicationSpecDestinationArgs' destination: Reference to the Kubernetes server and namespace in which the application will be deployed.
        :param Sequence['GetApplicationSpecIgnoreDifferenceArgs'] ignore_differences: Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        :param Sequence['GetApplicationSpecInfoArgs'] infos: List of information (URLs, email addresses, and plain text) that relates to the application.
        :param str project: The project the application belongs to. Defaults to `default`.
        :param int revision_history_limit: Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        :param Sequence['GetApplicationSpecSourceArgs'] sources: Location of the application's manifests or chart.
        :param 'GetApplicationSpecSyncPolicyArgs' sync_policy: Controls when and how a sync will be performed.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "ignore_differences", ignore_differences)
        pulumi.set(__self__, "infos", infos)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "sync_policy", sync_policy)

    @property
    @pulumi.getter
    def destination(self) -> 'outputs.GetApplicationSpecDestinationResult':
        """
        Reference to the Kubernetes server and namespace in which the application will be deployed.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="ignoreDifferences")
    def ignore_differences(self) -> Sequence['outputs.GetApplicationSpecIgnoreDifferenceResult']:
        """
        Resources and their fields which should be ignored during comparison. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/diffing/#application-level-configuration.
        """
        return pulumi.get(self, "ignore_differences")

    @property
    @pulumi.getter
    def infos(self) -> Sequence['outputs.GetApplicationSpecInfoResult']:
        """
        List of information (URLs, email addresses, and plain text) that relates to the application.
        """
        return pulumi.get(self, "infos")

    @property
    @pulumi.getter
    def project(self) -> str:
        """
        The project the application belongs to. Defaults to `default`.
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> int:
        """
        Limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the space used to store the history, so we do not recommend increasing it. Default is 10.
        """
        return pulumi.get(self, "revision_history_limit")

    @property
    @pulumi.getter
    def sources(self) -> Sequence['outputs.GetApplicationSpecSourceResult']:
        """
        Location of the application's manifests or chart.
        """
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter(name="syncPolicy")
    def sync_policy(self) -> 'outputs.GetApplicationSpecSyncPolicyResult':
        """
        Controls when and how a sync will be performed.
        """
        return pulumi.get(self, "sync_policy")


@pulumi.output_type
class GetApplicationSpecDestinationResult(dict):
    def __init__(__self__, *,
                 name: str,
                 namespace: str,
                 server: str):
        """
        :param str name: Name of the target cluster. Can be used instead of `server`.
        :param str namespace: Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        :param str server: URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "server", server)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the target cluster. Can be used instead of `server`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Target namespace for the application's resources. The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        URL of the target cluster and must be set to the Kubernetes control plane API.
        """
        return pulumi.get(self, "server")


@pulumi.output_type
class GetApplicationSpecIgnoreDifferenceResult(dict):
    def __init__(__self__, *,
                 group: str,
                 jq_path_expressions: Sequence[str],
                 json_pointers: Sequence[str],
                 kind: str,
                 name: str,
                 namespace: str):
        """
        :param str group: The Kubernetes resource Group to match for.
        :param Sequence[str] jq_path_expressions: List of JQ path expression strings targeting the field(s) to ignore.
        :param Sequence[str] json_pointers: List of JSONPaths strings targeting the field(s) to ignore.
        :param str kind: The Kubernetes resource Kind to match for.
        :param str name: The Kubernetes resource Name to match for.
        :param str namespace: The Kubernetes resource Namespace to match for.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "jq_path_expressions", jq_path_expressions)
        pulumi.set(__self__, "json_pointers", json_pointers)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group to match for.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter(name="jqPathExpressions")
    def jq_path_expressions(self) -> Sequence[str]:
        """
        List of JQ path expression strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "jq_path_expressions")

    @property
    @pulumi.getter(name="jsonPointers")
    def json_pointers(self) -> Sequence[str]:
        """
        List of JSONPaths strings targeting the field(s) to ignore.
        """
        return pulumi.get(self, "json_pointers")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The Kubernetes resource Kind to match for.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Kubernetes resource Name to match for.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Kubernetes resource Namespace to match for.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class GetApplicationSpecInfoResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the information.
        :param str value: Value of the information.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the information.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the information.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationSpecSourceResult(dict):
    def __init__(__self__, *,
                 chart: str,
                 directory: 'outputs.GetApplicationSpecSourceDirectoryResult',
                 helm: 'outputs.GetApplicationSpecSourceHelmResult',
                 kustomize: 'outputs.GetApplicationSpecSourceKustomizeResult',
                 path: str,
                 plugin: 'outputs.GetApplicationSpecSourcePluginResult',
                 ref: str,
                 repo_url: str,
                 target_revision: str):
        """
        :param str chart: Helm chart name. Must be specified for applications sourced from a Helm repo.
        :param 'GetApplicationSpecSourceDirectoryArgs' directory: Path/directory specific options.
        :param 'GetApplicationSpecSourceHelmArgs' helm: Helm specific options.
        :param 'GetApplicationSpecSourceKustomizeArgs' kustomize: Kustomize specific options.
        :param str path: Directory path within the repository. Only valid for applications sourced from Git.
        :param 'GetApplicationSpecSourcePluginArgs' plugin: Config management plugin specific options.
        :param str ref: Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        :param str repo_url: URL to the repository (Git or Helm) that contains the application manifests.
        :param str target_revision: Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        pulumi.set(__self__, "chart", chart)
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "helm", helm)
        pulumi.set(__self__, "kustomize", kustomize)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "plugin", plugin)
        pulumi.set(__self__, "ref", ref)
        pulumi.set(__self__, "repo_url", repo_url)
        pulumi.set(__self__, "target_revision", target_revision)

    @property
    @pulumi.getter
    def chart(self) -> str:
        """
        Helm chart name. Must be specified for applications sourced from a Helm repo.
        """
        return pulumi.get(self, "chart")

    @property
    @pulumi.getter
    def directory(self) -> 'outputs.GetApplicationSpecSourceDirectoryResult':
        """
        Path/directory specific options.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter
    def helm(self) -> 'outputs.GetApplicationSpecSourceHelmResult':
        """
        Helm specific options.
        """
        return pulumi.get(self, "helm")

    @property
    @pulumi.getter
    def kustomize(self) -> 'outputs.GetApplicationSpecSourceKustomizeResult':
        """
        Kustomize specific options.
        """
        return pulumi.get(self, "kustomize")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Directory path within the repository. Only valid for applications sourced from Git.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def plugin(self) -> 'outputs.GetApplicationSpecSourcePluginResult':
        """
        Config management plugin specific options.
        """
        return pulumi.get(self, "plugin")

    @property
    @pulumi.getter
    def ref(self) -> str:
        """
        Reference to another `source` within defined sources. See associated documentation on [Helm value files from external Git repository](https://argo-cd.readthedocs.io/en/stable/user-guide/multiple_sources/#helm-value-files-from-external-git-repository) regarding combining `ref` with `path` and/or `chart`.
        """
        return pulumi.get(self, "ref")

    @property
    @pulumi.getter(name="repoUrl")
    def repo_url(self) -> str:
        """
        URL to the repository (Git or Helm) that contains the application manifests.
        """
        return pulumi.get(self, "repo_url")

    @property
    @pulumi.getter(name="targetRevision")
    def target_revision(self) -> str:
        """
        Revision of the source to sync the application to. In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of Helm, this is a semver tag for the Chart's version.
        """
        return pulumi.get(self, "target_revision")


@pulumi.output_type
class GetApplicationSpecSourceDirectoryResult(dict):
    def __init__(__self__, *,
                 exclude: str,
                 include: str,
                 jsonnet: 'outputs.GetApplicationSpecSourceDirectoryJsonnetResult',
                 recurse: bool):
        """
        :param str exclude: Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        :param str include: Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        :param 'GetApplicationSpecSourceDirectoryJsonnetArgs' jsonnet: Jsonnet specific options.
        :param bool recurse: Whether to scan a directory recursively for manifests.
        """
        pulumi.set(__self__, "exclude", exclude)
        pulumi.set(__self__, "include", include)
        pulumi.set(__self__, "jsonnet", jsonnet)
        pulumi.set(__self__, "recurse", recurse)

    @property
    @pulumi.getter
    def exclude(self) -> str:
        """
        Glob pattern to match paths against that should be explicitly excluded from being used during manifest generation. This takes precedence over the `include` field. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{config.yaml,env-use2/*}'
        """
        return pulumi.get(self, "exclude")

    @property
    @pulumi.getter
    def include(self) -> str:
        """
        Glob pattern to match paths against that should be explicitly included during manifest generation. If this field is set, only matching manifests will be included. To match multiple patterns, wrap the patterns in {} and separate them with commas. For example: '{*.yml,*.yaml}'
        """
        return pulumi.get(self, "include")

    @property
    @pulumi.getter
    def jsonnet(self) -> 'outputs.GetApplicationSpecSourceDirectoryJsonnetResult':
        """
        Jsonnet specific options.
        """
        return pulumi.get(self, "jsonnet")

    @property
    @pulumi.getter
    def recurse(self) -> bool:
        """
        Whether to scan a directory recursively for manifests.
        """
        return pulumi.get(self, "recurse")


@pulumi.output_type
class GetApplicationSpecSourceDirectoryJsonnetResult(dict):
    def __init__(__self__, *,
                 ext_vars: Sequence['outputs.GetApplicationSpecSourceDirectoryJsonnetExtVarResult'],
                 libs: Sequence[str],
                 tlas: Sequence['outputs.GetApplicationSpecSourceDirectoryJsonnetTlaResult']):
        """
        :param Sequence['GetApplicationSpecSourceDirectoryJsonnetExtVarArgs'] ext_vars: List of Jsonnet External Variables.
        :param Sequence[str] libs: Additional library search dirs.
        :param Sequence['GetApplicationSpecSourceDirectoryJsonnetTlaArgs'] tlas: List of Jsonnet Top-level Arguments
        """
        pulumi.set(__self__, "ext_vars", ext_vars)
        pulumi.set(__self__, "libs", libs)
        pulumi.set(__self__, "tlas", tlas)

    @property
    @pulumi.getter(name="extVars")
    def ext_vars(self) -> Sequence['outputs.GetApplicationSpecSourceDirectoryJsonnetExtVarResult']:
        """
        List of Jsonnet External Variables.
        """
        return pulumi.get(self, "ext_vars")

    @property
    @pulumi.getter
    def libs(self) -> Sequence[str]:
        """
        Additional library search dirs.
        """
        return pulumi.get(self, "libs")

    @property
    @pulumi.getter
    def tlas(self) -> Sequence['outputs.GetApplicationSpecSourceDirectoryJsonnetTlaResult']:
        """
        List of Jsonnet Top-level Arguments
        """
        return pulumi.get(self, "tlas")


@pulumi.output_type
class GetApplicationSpecSourceDirectoryJsonnetExtVarResult(dict):
    def __init__(__self__, *,
                 code: bool,
                 name: str,
                 value: str):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of Jsonnet variable.
        :param str value: Value of Jsonnet variable.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> bool:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Jsonnet variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of Jsonnet variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationSpecSourceDirectoryJsonnetTlaResult(dict):
    def __init__(__self__, *,
                 code: bool,
                 name: str,
                 value: str):
        """
        :param bool code: Determines whether the variable should be evaluated as jsonnet code or treated as string.
        :param str name: Name of Jsonnet variable.
        :param str value: Value of Jsonnet variable.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def code(self) -> bool:
        """
        Determines whether the variable should be evaluated as jsonnet code or treated as string.
        """
        return pulumi.get(self, "code")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of Jsonnet variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of Jsonnet variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationSpecSourceHelmResult(dict):
    def __init__(__self__, *,
                 file_parameters: Sequence['outputs.GetApplicationSpecSourceHelmFileParameterResult'],
                 ignore_missing_value_files: bool,
                 parameters: Sequence['outputs.GetApplicationSpecSourceHelmParameterResult'],
                 pass_credentials: bool,
                 release_name: str,
                 skip_crds: bool,
                 value_files: Sequence[str],
                 values: str):
        """
        :param Sequence['GetApplicationSpecSourceHelmFileParameterArgs'] file_parameters: File parameters for the helm template.
        :param bool ignore_missing_value_files: Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        :param Sequence['GetApplicationSpecSourceHelmParameterArgs'] parameters: Helm parameters which are passed to the helm template command upon manifest generation.
        :param bool pass_credentials: If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        :param str release_name: Helm release name. If omitted it will use the application name.
        :param bool skip_crds: Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        :param Sequence[str] value_files: List of Helm value files to use when generating a template.
        :param str values: Helm values to be passed to 'helm template', typically defined as a Attribute.
        """
        pulumi.set(__self__, "file_parameters", file_parameters)
        pulumi.set(__self__, "ignore_missing_value_files", ignore_missing_value_files)
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "pass_credentials", pass_credentials)
        pulumi.set(__self__, "release_name", release_name)
        pulumi.set(__self__, "skip_crds", skip_crds)
        pulumi.set(__self__, "value_files", value_files)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="fileParameters")
    def file_parameters(self) -> Sequence['outputs.GetApplicationSpecSourceHelmFileParameterResult']:
        """
        File parameters for the helm template.
        """
        return pulumi.get(self, "file_parameters")

    @property
    @pulumi.getter(name="ignoreMissingValueFiles")
    def ignore_missing_value_files(self) -> bool:
        """
        Prevents 'helm template' from failing when `value_files` do not exist locally by not appending them to 'helm template --values'.
        """
        return pulumi.get(self, "ignore_missing_value_files")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetApplicationSpecSourceHelmParameterResult']:
        """
        Helm parameters which are passed to the helm template command upon manifest generation.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="passCredentials")
    def pass_credentials(self) -> bool:
        """
        If true then adds '--pass-credentials' to Helm commands to pass credentials to all domains.
        """
        return pulumi.get(self, "pass_credentials")

    @property
    @pulumi.getter(name="releaseName")
    def release_name(self) -> str:
        """
        Helm release name. If omitted it will use the application name.
        """
        return pulumi.get(self, "release_name")

    @property
    @pulumi.getter(name="skipCrds")
    def skip_crds(self) -> bool:
        """
        Whether to skip custom resource definition installation step (Helm's [--skip-crds](https://helm.sh/docs/chart_best_practices/custom_resource_definitions/)).
        """
        return pulumi.get(self, "skip_crds")

    @property
    @pulumi.getter(name="valueFiles")
    def value_files(self) -> Sequence[str]:
        """
        List of Helm value files to use when generating a template.
        """
        return pulumi.get(self, "value_files")

    @property
    @pulumi.getter
    def values(self) -> str:
        """
        Helm values to be passed to 'helm template', typically defined as a Attribute.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetApplicationSpecSourceHelmFileParameterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str):
        """
        :param str name: Name of the Helm parameters.
        :param str path: Path to the file containing the values for the Helm parameters.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Helm parameters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path to the file containing the values for the Helm parameters.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class GetApplicationSpecSourceHelmParameterResult(dict):
    def __init__(__self__, *,
                 force_string: bool,
                 name: str,
                 value: str):
        """
        :param bool force_string: Determines whether to tell Helm to interpret booleans and numbers as strings.
        :param str name: Name of the Helm parameters.
        :param str value: Value of the Helm parameters.
        """
        pulumi.set(__self__, "force_string", force_string)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="forceString")
    def force_string(self) -> bool:
        """
        Determines whether to tell Helm to interpret booleans and numbers as strings.
        """
        return pulumi.get(self, "force_string")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Helm parameters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the Helm parameters.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationSpecSourceKustomizeResult(dict):
    def __init__(__self__, *,
                 common_annotations: Mapping[str, str],
                 common_labels: Mapping[str, str],
                 images: Sequence[str],
                 name_prefix: str,
                 name_suffix: str,
                 version: str):
        """
        :param Mapping[str, str] common_annotations: List of additional annotations to add to rendered manifests.
        :param Mapping[str, str] common_labels: List of additional labels to add to rendered manifests.
        :param Sequence[str] images: List of Kustomize image override specifications.
        :param str name_prefix: Prefix appended to resources for Kustomize apps.
        :param str name_suffix: Suffix appended to resources for Kustomize apps.
        :param str version: Version of Kustomize to use for rendering manifests.
        """
        pulumi.set(__self__, "common_annotations", common_annotations)
        pulumi.set(__self__, "common_labels", common_labels)
        pulumi.set(__self__, "images", images)
        pulumi.set(__self__, "name_prefix", name_prefix)
        pulumi.set(__self__, "name_suffix", name_suffix)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="commonAnnotations")
    def common_annotations(self) -> Mapping[str, str]:
        """
        List of additional annotations to add to rendered manifests.
        """
        return pulumi.get(self, "common_annotations")

    @property
    @pulumi.getter(name="commonLabels")
    def common_labels(self) -> Mapping[str, str]:
        """
        List of additional labels to add to rendered manifests.
        """
        return pulumi.get(self, "common_labels")

    @property
    @pulumi.getter
    def images(self) -> Sequence[str]:
        """
        List of Kustomize image override specifications.
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> str:
        """
        Prefix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_prefix")

    @property
    @pulumi.getter(name="nameSuffix")
    def name_suffix(self) -> str:
        """
        Suffix appended to resources for Kustomize apps.
        """
        return pulumi.get(self, "name_suffix")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of Kustomize to use for rendering manifests.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplicationSpecSourcePluginResult(dict):
    def __init__(__self__, *,
                 envs: Sequence['outputs.GetApplicationSpecSourcePluginEnvResult'],
                 name: str,
                 parameters: Sequence['outputs.GetApplicationSpecSourcePluginParameterResult']):
        """
        :param Sequence['GetApplicationSpecSourcePluginEnvArgs'] envs: Environment variables passed to the plugin.
        :param str name: Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
        :param Sequence['GetApplicationSpecSourcePluginParameterArgs'] parameters: Parameters to supply to config management plugin.
        """
        pulumi.set(__self__, "envs", envs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def envs(self) -> Sequence['outputs.GetApplicationSpecSourcePluginEnvResult']:
        """
        Environment variables passed to the plugin.
        """
        return pulumi.get(self, "envs")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the plugin. Only set the plugin name if the plugin is defined in `argocd-cm`. If the plugin is defined as a sidecar, omit the name. The plugin will be automatically matched with the Application according to the plugin's discovery rules.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetApplicationSpecSourcePluginParameterResult']:
        """
        Parameters to supply to config management plugin.
        """
        return pulumi.get(self, "parameters")


@pulumi.output_type
class GetApplicationSpecSourcePluginEnvResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: Name of the environment variable.
        :param str value: Value of the environment variable.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the environment variable.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        Value of the environment variable.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetApplicationSpecSourcePluginParameterResult(dict):
    def __init__(__self__, *,
                 arrays: Sequence[str],
                 map: Mapping[str, str],
                 name: str,
                 string: str):
        """
        :param Sequence[str] arrays: Value of an array type parameters.
        :param Mapping[str, str] map: Value of a map type parameters.
        :param str name: Name identifying a parameters.
        :param str string: Value of a string type parameters.
        """
        pulumi.set(__self__, "arrays", arrays)
        pulumi.set(__self__, "map", map)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "string", string)

    @property
    @pulumi.getter
    def arrays(self) -> Sequence[str]:
        """
        Value of an array type parameters.
        """
        return pulumi.get(self, "arrays")

    @property
    @pulumi.getter
    def map(self) -> Mapping[str, str]:
        """
        Value of a map type parameters.
        """
        return pulumi.get(self, "map")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name identifying a parameters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def string(self) -> str:
        """
        Value of a string type parameters.
        """
        return pulumi.get(self, "string")


@pulumi.output_type
class GetApplicationSpecSyncPolicyResult(dict):
    def __init__(__self__, *,
                 automated: 'outputs.GetApplicationSpecSyncPolicyAutomatedResult',
                 retry: 'outputs.GetApplicationSpecSyncPolicyRetryResult',
                 sync_options: Sequence[str]):
        """
        :param 'GetApplicationSpecSyncPolicyAutomatedArgs' automated: Whether to automatically keep an application synced to the target revision.
        :param 'GetApplicationSpecSyncPolicyRetryArgs' retry: Controls failed sync retry behavior.
        :param Sequence[str] sync_options: List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        pulumi.set(__self__, "automated", automated)
        pulumi.set(__self__, "retry", retry)
        pulumi.set(__self__, "sync_options", sync_options)

    @property
    @pulumi.getter
    def automated(self) -> 'outputs.GetApplicationSpecSyncPolicyAutomatedResult':
        """
        Whether to automatically keep an application synced to the target revision.
        """
        return pulumi.get(self, "automated")

    @property
    @pulumi.getter
    def retry(self) -> 'outputs.GetApplicationSpecSyncPolicyRetryResult':
        """
        Controls failed sync retry behavior.
        """
        return pulumi.get(self, "retry")

    @property
    @pulumi.getter(name="syncOptions")
    def sync_options(self) -> Sequence[str]:
        """
        List of sync options. More info: https://argo-cd.readthedocs.io/en/stable/user-guide/sync-options/.
        """
        return pulumi.get(self, "sync_options")


@pulumi.output_type
class GetApplicationSpecSyncPolicyAutomatedResult(dict):
    def __init__(__self__, *,
                 allow_empty: bool,
                 prune: bool,
                 self_heal: bool):
        """
        :param bool allow_empty: Allows apps have zero live resources.
        :param bool prune: Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        :param bool self_heal: Whether to revert resources back to their desired state upon modification in the cluster.
        """
        pulumi.set(__self__, "allow_empty", allow_empty)
        pulumi.set(__self__, "prune", prune)
        pulumi.set(__self__, "self_heal", self_heal)

    @property
    @pulumi.getter(name="allowEmpty")
    def allow_empty(self) -> bool:
        """
        Allows apps have zero live resources.
        """
        return pulumi.get(self, "allow_empty")

    @property
    @pulumi.getter
    def prune(self) -> bool:
        """
        Whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync.
        """
        return pulumi.get(self, "prune")

    @property
    @pulumi.getter(name="selfHeal")
    def self_heal(self) -> bool:
        """
        Whether to revert resources back to their desired state upon modification in the cluster.
        """
        return pulumi.get(self, "self_heal")


@pulumi.output_type
class GetApplicationSpecSyncPolicyRetryResult(dict):
    def __init__(__self__, *,
                 backoff: 'outputs.GetApplicationSpecSyncPolicyRetryBackoffResult',
                 limit: int):
        """
        :param 'GetApplicationSpecSyncPolicyRetryBackoffArgs' backoff: Controls how to backoff on subsequent retries of failed syncs.
        :param int limit: Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        pulumi.set(__self__, "backoff", backoff)
        pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def backoff(self) -> 'outputs.GetApplicationSpecSyncPolicyRetryBackoffResult':
        """
        Controls how to backoff on subsequent retries of failed syncs.
        """
        return pulumi.get(self, "backoff")

    @property
    @pulumi.getter
    def limit(self) -> int:
        """
        Maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
        """
        return pulumi.get(self, "limit")


@pulumi.output_type
class GetApplicationSpecSyncPolicyRetryBackoffResult(dict):
    def __init__(__self__, *,
                 duration: str,
                 factor: int,
                 max_duration: str):
        """
        :param str duration: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        :param int factor: Factor to multiply the base duration after each failed retry.
        :param str max_duration: Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "factor", factor)
        pulumi.set(__self__, "max_duration", max_duration)

    @property
    @pulumi.getter
    def duration(self) -> str:
        """
        Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter
    def factor(self) -> int:
        """
        Factor to multiply the base duration after each failed retry.
        """
        return pulumi.get(self, "factor")

    @property
    @pulumi.getter(name="maxDuration")
    def max_duration(self) -> str:
        """
        Maximum amount of time allowed for the backoff strategy. Default unit is seconds, but could also be a duration (e.g. `2m`, `1h`), as a string.
        """
        return pulumi.get(self, "max_duration")


@pulumi.output_type
class GetApplicationStatusResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetApplicationStatusConditionResult'],
                 health: 'outputs.GetApplicationStatusHealthResult',
                 operation_state: 'outputs.GetApplicationStatusOperationStateResult',
                 reconciled_at: str,
                 resources: Sequence['outputs.GetApplicationStatusResourceResult'],
                 summary: 'outputs.GetApplicationStatusSummaryResult',
                 sync: 'outputs.GetApplicationStatusSyncResult'):
        """
        :param Sequence['GetApplicationStatusConditionArgs'] conditions: List of currently observed application conditions.
        :param 'GetApplicationStatusHealthArgs' health: Application's current health status.
        :param 'GetApplicationStatusOperationStateArgs' operation_state: Information about any ongoing operations, such as a sync.
        :param str reconciled_at: When the application state was reconciled using the latest git version.
        :param Sequence['GetApplicationStatusResourceArgs'] resources: List of Kubernetes resources managed by this application.
        :param 'GetApplicationStatusSummaryArgs' summary: List of URLs and container images used by this application.
        :param 'GetApplicationStatusSyncArgs' sync: Application's current sync status
        """
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "operation_state", operation_state)
        pulumi.set(__self__, "reconciled_at", reconciled_at)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "sync", sync)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetApplicationStatusConditionResult']:
        """
        List of currently observed application conditions.
        """
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def health(self) -> 'outputs.GetApplicationStatusHealthResult':
        """
        Application's current health status.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="operationState")
    def operation_state(self) -> 'outputs.GetApplicationStatusOperationStateResult':
        """
        Information about any ongoing operations, such as a sync.
        """
        return pulumi.get(self, "operation_state")

    @property
    @pulumi.getter(name="reconciledAt")
    def reconciled_at(self) -> str:
        """
        When the application state was reconciled using the latest git version.
        """
        return pulumi.get(self, "reconciled_at")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetApplicationStatusResourceResult']:
        """
        List of Kubernetes resources managed by this application.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def summary(self) -> 'outputs.GetApplicationStatusSummaryResult':
        """
        List of URLs and container images used by this application.
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def sync(self) -> 'outputs.GetApplicationStatusSyncResult':
        """
        Application's current sync status
        """
        return pulumi.get(self, "sync")


@pulumi.output_type
class GetApplicationStatusConditionResult(dict):
    def __init__(__self__, *,
                 last_transition_time: str,
                 message: str,
                 type: str):
        """
        :param str last_transition_time: The time the condition was last observed.
        :param str message: Human-readable message indicating details about condition.
        :param str type: Application condition type.
        """
        pulumi.set(__self__, "last_transition_time", last_transition_time)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> str:
        """
        The time the condition was last observed.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human-readable message indicating details about condition.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Application condition type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetApplicationStatusHealthResult(dict):
    def __init__(__self__, *,
                 message: str,
                 status: str):
        """
        :param str message: Human-readable informational message describing the health status.
        :param str status: Status code of the application or resource.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human-readable informational message describing the health status.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status code of the application or resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetApplicationStatusOperationStateResult(dict):
    def __init__(__self__, *,
                 finished_at: str,
                 message: str,
                 phase: str,
                 retry_count: int,
                 started_at: str):
        """
        :param str finished_at: Time of operation completion.
        :param str message: Any pertinent messages when attempting to perform operation (typically errors).
        :param str phase: The current phase of the operation.
        :param int retry_count: Count of operation retries.
        :param str started_at: Time of operation start.
        """
        pulumi.set(__self__, "finished_at", finished_at)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "phase", phase)
        pulumi.set(__self__, "retry_count", retry_count)
        pulumi.set(__self__, "started_at", started_at)

    @property
    @pulumi.getter(name="finishedAt")
    def finished_at(self) -> str:
        """
        Time of operation completion.
        """
        return pulumi.get(self, "finished_at")

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Any pertinent messages when attempting to perform operation (typically errors).
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def phase(self) -> str:
        """
        The current phase of the operation.
        """
        return pulumi.get(self, "phase")

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> int:
        """
        Count of operation retries.
        """
        return pulumi.get(self, "retry_count")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> str:
        """
        Time of operation start.
        """
        return pulumi.get(self, "started_at")


@pulumi.output_type
class GetApplicationStatusResourceResult(dict):
    def __init__(__self__, *,
                 group: str,
                 health: 'outputs.GetApplicationStatusResourceHealthResult',
                 hook: bool,
                 kind: str,
                 name: str,
                 namespace: str,
                 requires_pruning: bool,
                 status: str,
                 sync_wave: int,
                 version: str):
        """
        :param str group: The Kubernetes resource Group.
        :param 'GetApplicationStatusResourceHealthArgs' health: Resource health status.
        :param bool hook: Indicates whether or not this resource has a hook annotation.
        :param str kind: The Kubernetes resource Kind.
        :param str name: The Kubernetes resource Name.
        :param str namespace: The Kubernetes resource Namespace.
        :param bool requires_pruning: Indicates if the resources requires pruning or not.
        :param str status: Resource sync status.
        :param int sync_wave: Sync wave.
        :param str version: The Kubernetes resource Version.
        """
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "hook", hook)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "requires_pruning", requires_pruning)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sync_wave", sync_wave)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def group(self) -> str:
        """
        The Kubernetes resource Group.
        """
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def health(self) -> 'outputs.GetApplicationStatusResourceHealthResult':
        """
        Resource health status.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hook(self) -> bool:
        """
        Indicates whether or not this resource has a hook annotation.
        """
        return pulumi.get(self, "hook")

    @property
    @pulumi.getter
    def kind(self) -> str:
        """
        The Kubernetes resource Kind.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The Kubernetes resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        The Kubernetes resource Namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="requiresPruning")
    def requires_pruning(self) -> bool:
        """
        Indicates if the resources requires pruning or not.
        """
        return pulumi.get(self, "requires_pruning")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Resource sync status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="syncWave")
    def sync_wave(self) -> int:
        """
        Sync wave.
        """
        return pulumi.get(self, "sync_wave")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        The Kubernetes resource Version.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class GetApplicationStatusResourceHealthResult(dict):
    def __init__(__self__, *,
                 message: str,
                 status: str):
        """
        :param str message: Human-readable informational message describing the health status.
        :param str status: Status code of the application or resource.
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def message(self) -> str:
        """
        Human-readable informational message describing the health status.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status code of the application or resource.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetApplicationStatusSummaryResult(dict):
    def __init__(__self__, *,
                 external_urls: Sequence[str],
                 images: Sequence[str]):
        """
        :param Sequence[str] external_urls: All external URLs of application child resources.
        :param Sequence[str] images: All images of application child resources.
        """
        pulumi.set(__self__, "external_urls", external_urls)
        pulumi.set(__self__, "images", images)

    @property
    @pulumi.getter(name="externalUrls")
    def external_urls(self) -> Sequence[str]:
        """
        All external URLs of application child resources.
        """
        return pulumi.get(self, "external_urls")

    @property
    @pulumi.getter
    def images(self) -> Sequence[str]:
        """
        All images of application child resources.
        """
        return pulumi.get(self, "images")


@pulumi.output_type
class GetApplicationStatusSyncResult(dict):
    def __init__(__self__, *,
                 revisions: Sequence[str],
                 status: str):
        """
        :param Sequence[str] revisions: Information about the revision(s) the comparison has been performed to.
        :param str status: Sync state of the comparison.
        """
        pulumi.set(__self__, "revisions", revisions)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def revisions(self) -> Sequence[str]:
        """
        Information about the revision(s) the comparison has been performed to.
        """
        return pulumi.get(self, "revisions")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Sync state of the comparison.
        """
        return pulumi.get(self, "status")


