# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ProviderKubernetesArgs',
    'ProviderKubernetesArgsDict',
    'ProviderKubernetesExecArgs',
    'ProviderKubernetesExecArgsDict',
    'GetApplicationMetadataArgs',
    'GetApplicationMetadataArgsDict',
]

MYPY = False

if not MYPY:
    class ProviderKubernetesArgsDict(TypedDict):
        client_certificate: NotRequired[pulumi.Input[str]]
        """
        PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
        """
        client_key: NotRequired[pulumi.Input[str]]
        """
        PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
        """
        cluster_ca_certificate: NotRequired[pulumi.Input[str]]
        """
        PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
        """
        config_context: NotRequired[pulumi.Input[str]]
        """
        Context to choose from the config file. Can be sourced from `KUBE_CTX`.
        """
        config_context_auth_info: NotRequired[pulumi.Input[str]]
        config_context_cluster: NotRequired[pulumi.Input[str]]
        exec_: NotRequired[pulumi.Input['ProviderKubernetesExecArgsDict']]
        """
        Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
        """
        host: NotRequired[pulumi.Input[str]]
        """
        The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
        """
        insecure: NotRequired[pulumi.Input[bool]]
        """
        Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
        """
        password: NotRequired[pulumi.Input[str]]
        """
        The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
        """
        token: NotRequired[pulumi.Input[str]]
        """
        Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
        """
        username: NotRequired[pulumi.Input[str]]
        """
        The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
        """
elif False:
    ProviderKubernetesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderKubernetesArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 config_context: Optional[pulumi.Input[str]] = None,
                 config_context_auth_info: Optional[pulumi.Input[str]] = None,
                 config_context_cluster: Optional[pulumi.Input[str]] = None,
                 exec_: Optional[pulumi.Input['ProviderKubernetesExecArgs']] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 insecure: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_certificate: PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
        :param pulumi.Input[str] client_key: PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
        :param pulumi.Input[str] cluster_ca_certificate: PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
        :param pulumi.Input[str] config_context: Context to choose from the config file. Can be sourced from `KUBE_CTX`.
        :param pulumi.Input['ProviderKubernetesExecArgs'] exec_: Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
        :param pulumi.Input[str] host: The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
        :param pulumi.Input[bool] insecure: Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
        :param pulumi.Input[str] password: The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
        :param pulumi.Input[str] token: Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
        :param pulumi.Input[str] username: The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
        """
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if config_context is not None:
            pulumi.set(__self__, "config_context", config_context)
        if config_context_auth_info is not None:
            pulumi.set(__self__, "config_context_auth_info", config_context_auth_info)
        if config_context_cluster is not None:
            pulumi.set(__self__, "config_context_cluster", config_context_cluster)
        if exec_ is not None:
            pulumi.set(__self__, "exec_", exec_)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if insecure is not None:
            pulumi.set(__self__, "insecure", insecure)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_certificate", value)

    @property
    @pulumi.getter(name="configContext")
    def config_context(self) -> Optional[pulumi.Input[str]]:
        """
        Context to choose from the config file. Can be sourced from `KUBE_CTX`.
        """
        return pulumi.get(self, "config_context")

    @config_context.setter
    def config_context(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context", value)

    @property
    @pulumi.getter(name="configContextAuthInfo")
    def config_context_auth_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_context_auth_info")

    @config_context_auth_info.setter
    def config_context_auth_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_auth_info", value)

    @property
    @pulumi.getter(name="configContextCluster")
    def config_context_cluster(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "config_context_cluster")

    @config_context_cluster.setter
    def config_context_cluster(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config_context_cluster", value)

    @property
    @pulumi.getter(name="exec")
    def exec_(self) -> Optional[pulumi.Input['ProviderKubernetesExecArgs']]:
        """
        Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
        """
        return pulumi.get(self, "exec_")

    @exec_.setter
    def exec_(self, value: Optional[pulumi.Input['ProviderKubernetesExecArgs']]):
        pulumi.set(self, "exec_", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
        """
        return pulumi.get(self, "insecure")

    @insecure.setter
    def insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "insecure", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class ProviderKubernetesExecArgsDict(TypedDict):
        api_version: pulumi.Input[str]
        """
        API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
        """
        command: pulumi.Input[str]
        """
        Command to execute.
        """
        args: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Map of environment variables to set when executing the plugin.
        """
        env: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        List of arguments to pass when executing the plugin.
        """
elif False:
    ProviderKubernetesExecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProviderKubernetesExecArgs:
    def __init__(__self__, *,
                 api_version: pulumi.Input[str],
                 command: pulumi.Input[str],
                 args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 env: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] api_version: API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
        :param pulumi.Input[str] command: Command to execute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] args: Map of environment variables to set when executing the plugin.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] env: List of arguments to pass when executing the plugin.
        """
        pulumi.set(__self__, "api_version", api_version)
        pulumi.set(__self__, "command", command)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if env is not None:
            pulumi.set(__self__, "env", env)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Input[str]:
        """
        API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[str]:
        """
        Command to execute.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Map of environment variables to set when executing the plugin.
        """
        return pulumi.get(self, "args")

    @args.setter
    def args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "args", value)

    @property
    @pulumi.getter
    def env(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        List of arguments to pass when executing the plugin.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "env", value)


if not MYPY:
    class GetApplicationMetadataArgsDict(TypedDict):
        annotations: Mapping[str, str]
        """
        An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        generation: int
        """
        A sequence number representing a specific generation of the desired state.
        """
        labels: Mapping[str, str]
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        name: str
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        namespace: str
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        resource_version: str
        """
        An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        uid: str
        """
        The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
elif False:
    GetApplicationMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetApplicationMetadataArgs:
    def __init__(__self__, *,
                 annotations: Mapping[str, str],
                 generation: int,
                 labels: Mapping[str, str],
                 name: str,
                 namespace: str,
                 resource_version: str,
                 uid: str):
        """
        :param Mapping[str, str] annotations: An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        :param int generation: A sequence number representing a specific generation of the desired state.
        :param Mapping[str, str] labels: Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        :param str name: Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        :param str namespace: Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        :param str resource_version: An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        :param str uid: The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "generation", generation)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "resource_version", resource_version)
        pulumi.set(__self__, "uid", uid)

    @property
    @pulumi.getter
    def annotations(self) -> Mapping[str, str]:
        """
        An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Mapping[str, str]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def generation(self) -> int:
        """
        A sequence number representing a specific generation of the desired state.
        """
        return pulumi.get(self, "generation")

    @generation.setter
    def generation(self, value: int):
        pulumi.set(self, "generation", value)

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Mapping[str, str]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the applications.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Namespace of the applications.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: str):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="resourceVersion")
    def resource_version(self) -> str:
        """
        An opaque value that represents the internal version of this applications.argoproj.io that can be used by clients to determine when applications.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        """
        return pulumi.get(self, "resource_version")

    @resource_version.setter
    def resource_version(self, value: str):
        pulumi.set(self, "resource_version", value)

    @property
    @pulumi.getter
    def uid(self) -> str:
        """
        The unique in time and space value for this applications.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
        """
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: str):
        pulumi.set(self, "uid", value)


