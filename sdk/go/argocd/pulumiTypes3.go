// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"github.com/Three141/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ClusterMetadata struct {
	// An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
}

// ClusterMetadataInput is an input type that accepts ClusterMetadataArgs and ClusterMetadataOutput values.
// You can construct a concrete instance of `ClusterMetadataInput` via:
//
//	ClusterMetadataArgs{...}
type ClusterMetadataInput interface {
	pulumi.Input

	ToClusterMetadataOutput() ClusterMetadataOutput
	ToClusterMetadataOutputWithContext(context.Context) ClusterMetadataOutput
}

type ClusterMetadataArgs struct {
	// An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
}

func (ClusterMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMetadata)(nil)).Elem()
}

func (i ClusterMetadataArgs) ToClusterMetadataOutput() ClusterMetadataOutput {
	return i.ToClusterMetadataOutputWithContext(context.Background())
}

func (i ClusterMetadataArgs) ToClusterMetadataOutputWithContext(ctx context.Context) ClusterMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMetadataOutput)
}

// ClusterMetadataArrayInput is an input type that accepts ClusterMetadataArray and ClusterMetadataArrayOutput values.
// You can construct a concrete instance of `ClusterMetadataArrayInput` via:
//
//	ClusterMetadataArray{ ClusterMetadataArgs{...} }
type ClusterMetadataArrayInput interface {
	pulumi.Input

	ToClusterMetadataArrayOutput() ClusterMetadataArrayOutput
	ToClusterMetadataArrayOutputWithContext(context.Context) ClusterMetadataArrayOutput
}

type ClusterMetadataArray []ClusterMetadataInput

func (ClusterMetadataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMetadata)(nil)).Elem()
}

func (i ClusterMetadataArray) ToClusterMetadataArrayOutput() ClusterMetadataArrayOutput {
	return i.ToClusterMetadataArrayOutputWithContext(context.Background())
}

func (i ClusterMetadataArray) ToClusterMetadataArrayOutputWithContext(ctx context.Context) ClusterMetadataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterMetadataArrayOutput)
}

type ClusterMetadataOutput struct{ *pulumi.OutputState }

func (ClusterMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterMetadata)(nil)).Elem()
}

func (o ClusterMetadataOutput) ToClusterMetadataOutput() ClusterMetadataOutput {
	return o
}

func (o ClusterMetadataOutput) ToClusterMetadataOutputWithContext(ctx context.Context) ClusterMetadataOutput {
	return o
}

// An unstructured key value map stored with the cluster secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ClusterMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) the cluster secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o ClusterMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ClusterMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

type ClusterMetadataArrayOutput struct{ *pulumi.OutputState }

func (ClusterMetadataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterMetadata)(nil)).Elem()
}

func (o ClusterMetadataArrayOutput) ToClusterMetadataArrayOutput() ClusterMetadataArrayOutput {
	return o
}

func (o ClusterMetadataArrayOutput) ToClusterMetadataArrayOutputWithContext(ctx context.Context) ClusterMetadataArrayOutput {
	return o
}

func (o ClusterMetadataArrayOutput) Index(i pulumi.IntInput) ClusterMetadataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterMetadata {
		return vs[0].([]ClusterMetadata)[vs[1].(int)]
	}).(ClusterMetadataOutput)
}

type ProjectMetadata struct {
	// An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// A sequence number representing a specific generation of the desired state.
	Generation *int `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
	// Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace *string `pulumi:"namespace"`
	// An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion *string `pulumi:"resourceVersion"`
	// The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid *string `pulumi:"uid"`
}

// ProjectMetadataInput is an input type that accepts ProjectMetadataArgs and ProjectMetadataOutput values.
// You can construct a concrete instance of `ProjectMetadataInput` via:
//
//	ProjectMetadataArgs{...}
type ProjectMetadataInput interface {
	pulumi.Input

	ToProjectMetadataOutput() ProjectMetadataOutput
	ToProjectMetadataOutputWithContext(context.Context) ProjectMetadataOutput
}

type ProjectMetadataArgs struct {
	// An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// A sequence number representing a specific generation of the desired state.
	Generation pulumi.IntPtrInput `pulumi:"generation"`
	// Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	ResourceVersion pulumi.StringPtrInput `pulumi:"resourceVersion"`
	// The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ProjectMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMetadata)(nil)).Elem()
}

func (i ProjectMetadataArgs) ToProjectMetadataOutput() ProjectMetadataOutput {
	return i.ToProjectMetadataOutputWithContext(context.Background())
}

func (i ProjectMetadataArgs) ToProjectMetadataOutputWithContext(ctx context.Context) ProjectMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataOutput)
}

func (i ProjectMetadataArgs) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return i.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (i ProjectMetadataArgs) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataOutput).ToProjectMetadataPtrOutputWithContext(ctx)
}

// ProjectMetadataPtrInput is an input type that accepts ProjectMetadataArgs, ProjectMetadataPtr and ProjectMetadataPtrOutput values.
// You can construct a concrete instance of `ProjectMetadataPtrInput` via:
//
//	        ProjectMetadataArgs{...}
//
//	or:
//
//	        nil
type ProjectMetadataPtrInput interface {
	pulumi.Input

	ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput
	ToProjectMetadataPtrOutputWithContext(context.Context) ProjectMetadataPtrOutput
}

type projectMetadataPtrType ProjectMetadataArgs

func ProjectMetadataPtr(v *ProjectMetadataArgs) ProjectMetadataPtrInput {
	return (*projectMetadataPtrType)(v)
}

func (*projectMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMetadata)(nil)).Elem()
}

func (i *projectMetadataPtrType) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return i.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (i *projectMetadataPtrType) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMetadataPtrOutput)
}

type ProjectMetadataOutput struct{ *pulumi.OutputState }

func (ProjectMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectMetadata)(nil)).Elem()
}

func (o ProjectMetadataOutput) ToProjectMetadataOutput() ProjectMetadataOutput {
	return o
}

func (o ProjectMetadataOutput) ToProjectMetadataOutputWithContext(ctx context.Context) ProjectMetadataOutput {
	return o
}

func (o ProjectMetadataOutput) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return o.ToProjectMetadataPtrOutputWithContext(context.Background())
}

func (o ProjectMetadataOutput) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectMetadata) *ProjectMetadata {
		return &v
	}).(ProjectMetadataPtrOutput)
}

// An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ProjectMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// A sequence number representing a specific generation of the desired state.
func (o ProjectMetadataOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *int { return v.Generation }).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o ProjectMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProjectMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ProjectMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ProjectMetadataOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ProjectMetadataOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *string { return v.ResourceVersion }).(pulumi.StringPtrOutput)
}

// The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ProjectMetadataOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectMetadata) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ProjectMetadataPtrOutput struct{ *pulumi.OutputState }

func (ProjectMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMetadata)(nil)).Elem()
}

func (o ProjectMetadataPtrOutput) ToProjectMetadataPtrOutput() ProjectMetadataPtrOutput {
	return o
}

func (o ProjectMetadataPtrOutput) ToProjectMetadataPtrOutputWithContext(ctx context.Context) ProjectMetadataPtrOutput {
	return o
}

func (o ProjectMetadataPtrOutput) Elem() ProjectMetadataOutput {
	return o.ApplyT(func(v *ProjectMetadata) ProjectMetadata {
		if v != nil {
			return *v
		}
		var ret ProjectMetadata
		return ret
	}).(ProjectMetadataOutput)
}

// An unstructured key value map stored with the appprojects.argoproj.io that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
func (o ProjectMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// A sequence number representing a specific generation of the desired state.
func (o ProjectMetadataPtrOutput) Generation() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectMetadata) *int {
		if v == nil {
			return nil
		}
		return v.Generation
	}).(pulumi.IntPtrOutput)
}

// Map of string keys and values that can be used to organize and categorize (scope and select) the appprojects.argoproj.io. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
func (o ProjectMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProjectMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ProjectMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace of the appprojects.argoproj.io, must be unique. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
func (o ProjectMetadataPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// An opaque value that represents the internal version of this appprojects.argoproj.io that can be used by clients to determine when appprojects.argoproj.io has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
func (o ProjectMetadataPtrOutput) ResourceVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMetadata) *string {
		if v == nil {
			return nil
		}
		return v.ResourceVersion
	}).(pulumi.StringPtrOutput)
}

// The unique in time and space value for this appprojects.argoproj.io. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
func (o ProjectMetadataPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type ProjectSpec struct {
	// Blacklisted cluster level resources.
	ClusterResourceBlacklists []ProjectSpecClusterResourceBlacklist `pulumi:"clusterResourceBlacklists"`
	// Whitelisted cluster level resources.
	ClusterResourceWhitelists []ProjectSpecClusterResourceWhitelist `pulumi:"clusterResourceWhitelists"`
	// Project description.
	Description *string `pulumi:"description"`
	// Destinations available for deployment.
	Destinations []ProjectSpecDestination `pulumi:"destinations"`
	// Blacklisted namespace level resources.
	NamespaceResourceBlacklists []ProjectSpecNamespaceResourceBlacklist `pulumi:"namespaceResourceBlacklists"`
	// Whitelisted namespace level resources.
	NamespaceResourceWhitelists []ProjectSpecNamespaceResourceWhitelist `pulumi:"namespaceResourceWhitelists"`
	// Settings specifying if controller should monitor orphaned resources of apps in this project.
	OrphanedResources *ProjectSpecOrphanedResources `pulumi:"orphanedResources"`
	// User defined RBAC roles associated with this project.
	Roles []ProjectSpecRole `pulumi:"roles"`
	// List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
	SignatureKeys []string `pulumi:"signatureKeys"`
	// List of namespaces that application resources are allowed to be created in.
	SourceNamespaces []string `pulumi:"sourceNamespaces"`
	// List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
	SourceRepos []string `pulumi:"sourceRepos"`
	// Settings controlling when syncs can be run for apps in this project.
	SyncWindows []ProjectSpecSyncWindow `pulumi:"syncWindows"`
}

// ProjectSpecInput is an input type that accepts ProjectSpecArgs and ProjectSpecOutput values.
// You can construct a concrete instance of `ProjectSpecInput` via:
//
//	ProjectSpecArgs{...}
type ProjectSpecInput interface {
	pulumi.Input

	ToProjectSpecOutput() ProjectSpecOutput
	ToProjectSpecOutputWithContext(context.Context) ProjectSpecOutput
}

type ProjectSpecArgs struct {
	// Blacklisted cluster level resources.
	ClusterResourceBlacklists ProjectSpecClusterResourceBlacklistArrayInput `pulumi:"clusterResourceBlacklists"`
	// Whitelisted cluster level resources.
	ClusterResourceWhitelists ProjectSpecClusterResourceWhitelistArrayInput `pulumi:"clusterResourceWhitelists"`
	// Project description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Destinations available for deployment.
	Destinations ProjectSpecDestinationArrayInput `pulumi:"destinations"`
	// Blacklisted namespace level resources.
	NamespaceResourceBlacklists ProjectSpecNamespaceResourceBlacklistArrayInput `pulumi:"namespaceResourceBlacklists"`
	// Whitelisted namespace level resources.
	NamespaceResourceWhitelists ProjectSpecNamespaceResourceWhitelistArrayInput `pulumi:"namespaceResourceWhitelists"`
	// Settings specifying if controller should monitor orphaned resources of apps in this project.
	OrphanedResources ProjectSpecOrphanedResourcesPtrInput `pulumi:"orphanedResources"`
	// User defined RBAC roles associated with this project.
	Roles ProjectSpecRoleArrayInput `pulumi:"roles"`
	// List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
	SignatureKeys pulumi.StringArrayInput `pulumi:"signatureKeys"`
	// List of namespaces that application resources are allowed to be created in.
	SourceNamespaces pulumi.StringArrayInput `pulumi:"sourceNamespaces"`
	// List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
	SourceRepos pulumi.StringArrayInput `pulumi:"sourceRepos"`
	// Settings controlling when syncs can be run for apps in this project.
	SyncWindows ProjectSpecSyncWindowArrayInput `pulumi:"syncWindows"`
}

func (ProjectSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpec)(nil)).Elem()
}

func (i ProjectSpecArgs) ToProjectSpecOutput() ProjectSpecOutput {
	return i.ToProjectSpecOutputWithContext(context.Background())
}

func (i ProjectSpecArgs) ToProjectSpecOutputWithContext(ctx context.Context) ProjectSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOutput)
}

func (i ProjectSpecArgs) ToProjectSpecPtrOutput() ProjectSpecPtrOutput {
	return i.ToProjectSpecPtrOutputWithContext(context.Background())
}

func (i ProjectSpecArgs) ToProjectSpecPtrOutputWithContext(ctx context.Context) ProjectSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOutput).ToProjectSpecPtrOutputWithContext(ctx)
}

// ProjectSpecPtrInput is an input type that accepts ProjectSpecArgs, ProjectSpecPtr and ProjectSpecPtrOutput values.
// You can construct a concrete instance of `ProjectSpecPtrInput` via:
//
//	        ProjectSpecArgs{...}
//
//	or:
//
//	        nil
type ProjectSpecPtrInput interface {
	pulumi.Input

	ToProjectSpecPtrOutput() ProjectSpecPtrOutput
	ToProjectSpecPtrOutputWithContext(context.Context) ProjectSpecPtrOutput
}

type projectSpecPtrType ProjectSpecArgs

func ProjectSpecPtr(v *ProjectSpecArgs) ProjectSpecPtrInput {
	return (*projectSpecPtrType)(v)
}

func (*projectSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSpec)(nil)).Elem()
}

func (i *projectSpecPtrType) ToProjectSpecPtrOutput() ProjectSpecPtrOutput {
	return i.ToProjectSpecPtrOutputWithContext(context.Background())
}

func (i *projectSpecPtrType) ToProjectSpecPtrOutputWithContext(ctx context.Context) ProjectSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecPtrOutput)
}

type ProjectSpecOutput struct{ *pulumi.OutputState }

func (ProjectSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpec)(nil)).Elem()
}

func (o ProjectSpecOutput) ToProjectSpecOutput() ProjectSpecOutput {
	return o
}

func (o ProjectSpecOutput) ToProjectSpecOutputWithContext(ctx context.Context) ProjectSpecOutput {
	return o
}

func (o ProjectSpecOutput) ToProjectSpecPtrOutput() ProjectSpecPtrOutput {
	return o.ToProjectSpecPtrOutputWithContext(context.Background())
}

func (o ProjectSpecOutput) ToProjectSpecPtrOutputWithContext(ctx context.Context) ProjectSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectSpec) *ProjectSpec {
		return &v
	}).(ProjectSpecPtrOutput)
}

// Blacklisted cluster level resources.
func (o ProjectSpecOutput) ClusterResourceBlacklists() ProjectSpecClusterResourceBlacklistArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecClusterResourceBlacklist { return v.ClusterResourceBlacklists }).(ProjectSpecClusterResourceBlacklistArrayOutput)
}

// Whitelisted cluster level resources.
func (o ProjectSpecOutput) ClusterResourceWhitelists() ProjectSpecClusterResourceWhitelistArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecClusterResourceWhitelist { return v.ClusterResourceWhitelists }).(ProjectSpecClusterResourceWhitelistArrayOutput)
}

// Project description.
func (o ProjectSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Destinations available for deployment.
func (o ProjectSpecOutput) Destinations() ProjectSpecDestinationArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecDestination { return v.Destinations }).(ProjectSpecDestinationArrayOutput)
}

// Blacklisted namespace level resources.
func (o ProjectSpecOutput) NamespaceResourceBlacklists() ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecNamespaceResourceBlacklist { return v.NamespaceResourceBlacklists }).(ProjectSpecNamespaceResourceBlacklistArrayOutput)
}

// Whitelisted namespace level resources.
func (o ProjectSpecOutput) NamespaceResourceWhitelists() ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecNamespaceResourceWhitelist { return v.NamespaceResourceWhitelists }).(ProjectSpecNamespaceResourceWhitelistArrayOutput)
}

// Settings specifying if controller should monitor orphaned resources of apps in this project.
func (o ProjectSpecOutput) OrphanedResources() ProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyT(func(v ProjectSpec) *ProjectSpecOrphanedResources { return v.OrphanedResources }).(ProjectSpecOrphanedResourcesPtrOutput)
}

// User defined RBAC roles associated with this project.
func (o ProjectSpecOutput) Roles() ProjectSpecRoleArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecRole { return v.Roles }).(ProjectSpecRoleArrayOutput)
}

// List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
func (o ProjectSpecOutput) SignatureKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []string { return v.SignatureKeys }).(pulumi.StringArrayOutput)
}

// List of namespaces that application resources are allowed to be created in.
func (o ProjectSpecOutput) SourceNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []string { return v.SourceNamespaces }).(pulumi.StringArrayOutput)
}

// List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
func (o ProjectSpecOutput) SourceRepos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []string { return v.SourceRepos }).(pulumi.StringArrayOutput)
}

// Settings controlling when syncs can be run for apps in this project.
func (o ProjectSpecOutput) SyncWindows() ProjectSpecSyncWindowArrayOutput {
	return o.ApplyT(func(v ProjectSpec) []ProjectSpecSyncWindow { return v.SyncWindows }).(ProjectSpecSyncWindowArrayOutput)
}

type ProjectSpecPtrOutput struct{ *pulumi.OutputState }

func (ProjectSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSpec)(nil)).Elem()
}

func (o ProjectSpecPtrOutput) ToProjectSpecPtrOutput() ProjectSpecPtrOutput {
	return o
}

func (o ProjectSpecPtrOutput) ToProjectSpecPtrOutputWithContext(ctx context.Context) ProjectSpecPtrOutput {
	return o
}

func (o ProjectSpecPtrOutput) Elem() ProjectSpecOutput {
	return o.ApplyT(func(v *ProjectSpec) ProjectSpec {
		if v != nil {
			return *v
		}
		var ret ProjectSpec
		return ret
	}).(ProjectSpecOutput)
}

// Blacklisted cluster level resources.
func (o ProjectSpecPtrOutput) ClusterResourceBlacklists() ProjectSpecClusterResourceBlacklistArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecClusterResourceBlacklist {
		if v == nil {
			return nil
		}
		return v.ClusterResourceBlacklists
	}).(ProjectSpecClusterResourceBlacklistArrayOutput)
}

// Whitelisted cluster level resources.
func (o ProjectSpecPtrOutput) ClusterResourceWhitelists() ProjectSpecClusterResourceWhitelistArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecClusterResourceWhitelist {
		if v == nil {
			return nil
		}
		return v.ClusterResourceWhitelists
	}).(ProjectSpecClusterResourceWhitelistArrayOutput)
}

// Project description.
func (o ProjectSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProjectSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Destinations available for deployment.
func (o ProjectSpecPtrOutput) Destinations() ProjectSpecDestinationArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecDestination {
		if v == nil {
			return nil
		}
		return v.Destinations
	}).(ProjectSpecDestinationArrayOutput)
}

// Blacklisted namespace level resources.
func (o ProjectSpecPtrOutput) NamespaceResourceBlacklists() ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecNamespaceResourceBlacklist {
		if v == nil {
			return nil
		}
		return v.NamespaceResourceBlacklists
	}).(ProjectSpecNamespaceResourceBlacklistArrayOutput)
}

// Whitelisted namespace level resources.
func (o ProjectSpecPtrOutput) NamespaceResourceWhitelists() ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecNamespaceResourceWhitelist {
		if v == nil {
			return nil
		}
		return v.NamespaceResourceWhitelists
	}).(ProjectSpecNamespaceResourceWhitelistArrayOutput)
}

// Settings specifying if controller should monitor orphaned resources of apps in this project.
func (o ProjectSpecPtrOutput) OrphanedResources() ProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyT(func(v *ProjectSpec) *ProjectSpecOrphanedResources {
		if v == nil {
			return nil
		}
		return v.OrphanedResources
	}).(ProjectSpecOrphanedResourcesPtrOutput)
}

// User defined RBAC roles associated with this project.
func (o ProjectSpecPtrOutput) Roles() ProjectSpecRoleArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecRole {
		if v == nil {
			return nil
		}
		return v.Roles
	}).(ProjectSpecRoleArrayOutput)
}

// List of PGP key IDs that commits in Git must be signed with in order to be allowed for sync.
func (o ProjectSpecPtrOutput) SignatureKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []string {
		if v == nil {
			return nil
		}
		return v.SignatureKeys
	}).(pulumi.StringArrayOutput)
}

// List of namespaces that application resources are allowed to be created in.
func (o ProjectSpecPtrOutput) SourceNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []string {
		if v == nil {
			return nil
		}
		return v.SourceNamespaces
	}).(pulumi.StringArrayOutput)
}

// List of repository URLs which can be used for deployment. Can be set to `["*"]` to allow all configured repositories configured in ArgoCD.
func (o ProjectSpecPtrOutput) SourceRepos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []string {
		if v == nil {
			return nil
		}
		return v.SourceRepos
	}).(pulumi.StringArrayOutput)
}

// Settings controlling when syncs can be run for apps in this project.
func (o ProjectSpecPtrOutput) SyncWindows() ProjectSpecSyncWindowArrayOutput {
	return o.ApplyT(func(v *ProjectSpec) []ProjectSpecSyncWindow {
		if v == nil {
			return nil
		}
		return v.SyncWindows
	}).(ProjectSpecSyncWindowArrayOutput)
}

type ProjectSpecClusterResourceBlacklist struct {
	// The Kubernetes resource Group to match for.
	Group *string `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind *string `pulumi:"kind"`
}

// ProjectSpecClusterResourceBlacklistInput is an input type that accepts ProjectSpecClusterResourceBlacklistArgs and ProjectSpecClusterResourceBlacklistOutput values.
// You can construct a concrete instance of `ProjectSpecClusterResourceBlacklistInput` via:
//
//	ProjectSpecClusterResourceBlacklistArgs{...}
type ProjectSpecClusterResourceBlacklistInput interface {
	pulumi.Input

	ToProjectSpecClusterResourceBlacklistOutput() ProjectSpecClusterResourceBlacklistOutput
	ToProjectSpecClusterResourceBlacklistOutputWithContext(context.Context) ProjectSpecClusterResourceBlacklistOutput
}

type ProjectSpecClusterResourceBlacklistArgs struct {
	// The Kubernetes resource Group to match for.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ProjectSpecClusterResourceBlacklistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (i ProjectSpecClusterResourceBlacklistArgs) ToProjectSpecClusterResourceBlacklistOutput() ProjectSpecClusterResourceBlacklistOutput {
	return i.ToProjectSpecClusterResourceBlacklistOutputWithContext(context.Background())
}

func (i ProjectSpecClusterResourceBlacklistArgs) ToProjectSpecClusterResourceBlacklistOutputWithContext(ctx context.Context) ProjectSpecClusterResourceBlacklistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecClusterResourceBlacklistOutput)
}

// ProjectSpecClusterResourceBlacklistArrayInput is an input type that accepts ProjectSpecClusterResourceBlacklistArray and ProjectSpecClusterResourceBlacklistArrayOutput values.
// You can construct a concrete instance of `ProjectSpecClusterResourceBlacklistArrayInput` via:
//
//	ProjectSpecClusterResourceBlacklistArray{ ProjectSpecClusterResourceBlacklistArgs{...} }
type ProjectSpecClusterResourceBlacklistArrayInput interface {
	pulumi.Input

	ToProjectSpecClusterResourceBlacklistArrayOutput() ProjectSpecClusterResourceBlacklistArrayOutput
	ToProjectSpecClusterResourceBlacklistArrayOutputWithContext(context.Context) ProjectSpecClusterResourceBlacklistArrayOutput
}

type ProjectSpecClusterResourceBlacklistArray []ProjectSpecClusterResourceBlacklistInput

func (ProjectSpecClusterResourceBlacklistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (i ProjectSpecClusterResourceBlacklistArray) ToProjectSpecClusterResourceBlacklistArrayOutput() ProjectSpecClusterResourceBlacklistArrayOutput {
	return i.ToProjectSpecClusterResourceBlacklistArrayOutputWithContext(context.Background())
}

func (i ProjectSpecClusterResourceBlacklistArray) ToProjectSpecClusterResourceBlacklistArrayOutputWithContext(ctx context.Context) ProjectSpecClusterResourceBlacklistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecClusterResourceBlacklistArrayOutput)
}

type ProjectSpecClusterResourceBlacklistOutput struct{ *pulumi.OutputState }

func (ProjectSpecClusterResourceBlacklistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (o ProjectSpecClusterResourceBlacklistOutput) ToProjectSpecClusterResourceBlacklistOutput() ProjectSpecClusterResourceBlacklistOutput {
	return o
}

func (o ProjectSpecClusterResourceBlacklistOutput) ToProjectSpecClusterResourceBlacklistOutputWithContext(ctx context.Context) ProjectSpecClusterResourceBlacklistOutput {
	return o
}

// The Kubernetes resource Group to match for.
func (o ProjectSpecClusterResourceBlacklistOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecClusterResourceBlacklist) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource Kind to match for.
func (o ProjectSpecClusterResourceBlacklistOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecClusterResourceBlacklist) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ProjectSpecClusterResourceBlacklistArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecClusterResourceBlacklistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecClusterResourceBlacklist)(nil)).Elem()
}

func (o ProjectSpecClusterResourceBlacklistArrayOutput) ToProjectSpecClusterResourceBlacklistArrayOutput() ProjectSpecClusterResourceBlacklistArrayOutput {
	return o
}

func (o ProjectSpecClusterResourceBlacklistArrayOutput) ToProjectSpecClusterResourceBlacklistArrayOutputWithContext(ctx context.Context) ProjectSpecClusterResourceBlacklistArrayOutput {
	return o
}

func (o ProjectSpecClusterResourceBlacklistArrayOutput) Index(i pulumi.IntInput) ProjectSpecClusterResourceBlacklistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecClusterResourceBlacklist {
		return vs[0].([]ProjectSpecClusterResourceBlacklist)[vs[1].(int)]
	}).(ProjectSpecClusterResourceBlacklistOutput)
}

type ProjectSpecClusterResourceWhitelist struct {
	// The Kubernetes resource Group to match for.
	Group *string `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind *string `pulumi:"kind"`
}

// ProjectSpecClusterResourceWhitelistInput is an input type that accepts ProjectSpecClusterResourceWhitelistArgs and ProjectSpecClusterResourceWhitelistOutput values.
// You can construct a concrete instance of `ProjectSpecClusterResourceWhitelistInput` via:
//
//	ProjectSpecClusterResourceWhitelistArgs{...}
type ProjectSpecClusterResourceWhitelistInput interface {
	pulumi.Input

	ToProjectSpecClusterResourceWhitelistOutput() ProjectSpecClusterResourceWhitelistOutput
	ToProjectSpecClusterResourceWhitelistOutputWithContext(context.Context) ProjectSpecClusterResourceWhitelistOutput
}

type ProjectSpecClusterResourceWhitelistArgs struct {
	// The Kubernetes resource Group to match for.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ProjectSpecClusterResourceWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (i ProjectSpecClusterResourceWhitelistArgs) ToProjectSpecClusterResourceWhitelistOutput() ProjectSpecClusterResourceWhitelistOutput {
	return i.ToProjectSpecClusterResourceWhitelistOutputWithContext(context.Background())
}

func (i ProjectSpecClusterResourceWhitelistArgs) ToProjectSpecClusterResourceWhitelistOutputWithContext(ctx context.Context) ProjectSpecClusterResourceWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecClusterResourceWhitelistOutput)
}

// ProjectSpecClusterResourceWhitelistArrayInput is an input type that accepts ProjectSpecClusterResourceWhitelistArray and ProjectSpecClusterResourceWhitelistArrayOutput values.
// You can construct a concrete instance of `ProjectSpecClusterResourceWhitelistArrayInput` via:
//
//	ProjectSpecClusterResourceWhitelistArray{ ProjectSpecClusterResourceWhitelistArgs{...} }
type ProjectSpecClusterResourceWhitelistArrayInput interface {
	pulumi.Input

	ToProjectSpecClusterResourceWhitelistArrayOutput() ProjectSpecClusterResourceWhitelistArrayOutput
	ToProjectSpecClusterResourceWhitelistArrayOutputWithContext(context.Context) ProjectSpecClusterResourceWhitelistArrayOutput
}

type ProjectSpecClusterResourceWhitelistArray []ProjectSpecClusterResourceWhitelistInput

func (ProjectSpecClusterResourceWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (i ProjectSpecClusterResourceWhitelistArray) ToProjectSpecClusterResourceWhitelistArrayOutput() ProjectSpecClusterResourceWhitelistArrayOutput {
	return i.ToProjectSpecClusterResourceWhitelistArrayOutputWithContext(context.Background())
}

func (i ProjectSpecClusterResourceWhitelistArray) ToProjectSpecClusterResourceWhitelistArrayOutputWithContext(ctx context.Context) ProjectSpecClusterResourceWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecClusterResourceWhitelistArrayOutput)
}

type ProjectSpecClusterResourceWhitelistOutput struct{ *pulumi.OutputState }

func (ProjectSpecClusterResourceWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (o ProjectSpecClusterResourceWhitelistOutput) ToProjectSpecClusterResourceWhitelistOutput() ProjectSpecClusterResourceWhitelistOutput {
	return o
}

func (o ProjectSpecClusterResourceWhitelistOutput) ToProjectSpecClusterResourceWhitelistOutputWithContext(ctx context.Context) ProjectSpecClusterResourceWhitelistOutput {
	return o
}

// The Kubernetes resource Group to match for.
func (o ProjectSpecClusterResourceWhitelistOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecClusterResourceWhitelist) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource Kind to match for.
func (o ProjectSpecClusterResourceWhitelistOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecClusterResourceWhitelist) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ProjectSpecClusterResourceWhitelistArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecClusterResourceWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecClusterResourceWhitelist)(nil)).Elem()
}

func (o ProjectSpecClusterResourceWhitelistArrayOutput) ToProjectSpecClusterResourceWhitelistArrayOutput() ProjectSpecClusterResourceWhitelistArrayOutput {
	return o
}

func (o ProjectSpecClusterResourceWhitelistArrayOutput) ToProjectSpecClusterResourceWhitelistArrayOutputWithContext(ctx context.Context) ProjectSpecClusterResourceWhitelistArrayOutput {
	return o
}

func (o ProjectSpecClusterResourceWhitelistArrayOutput) Index(i pulumi.IntInput) ProjectSpecClusterResourceWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecClusterResourceWhitelist {
		return vs[0].([]ProjectSpecClusterResourceWhitelist)[vs[1].(int)]
	}).(ProjectSpecClusterResourceWhitelistOutput)
}

type ProjectSpecDestination struct {
	// Name of the destination cluster which can be used instead of server.
	Name *string `pulumi:"name"`
	// Target namespace for applications' resources.
	Namespace string `pulumi:"namespace"`
	// URL of the target cluster and must be set to the Kubernetes control plane API.
	Server *string `pulumi:"server"`
}

// ProjectSpecDestinationInput is an input type that accepts ProjectSpecDestinationArgs and ProjectSpecDestinationOutput values.
// You can construct a concrete instance of `ProjectSpecDestinationInput` via:
//
//	ProjectSpecDestinationArgs{...}
type ProjectSpecDestinationInput interface {
	pulumi.Input

	ToProjectSpecDestinationOutput() ProjectSpecDestinationOutput
	ToProjectSpecDestinationOutputWithContext(context.Context) ProjectSpecDestinationOutput
}

type ProjectSpecDestinationArgs struct {
	// Name of the destination cluster which can be used instead of server.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Target namespace for applications' resources.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// URL of the target cluster and must be set to the Kubernetes control plane API.
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ProjectSpecDestinationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecDestination)(nil)).Elem()
}

func (i ProjectSpecDestinationArgs) ToProjectSpecDestinationOutput() ProjectSpecDestinationOutput {
	return i.ToProjectSpecDestinationOutputWithContext(context.Background())
}

func (i ProjectSpecDestinationArgs) ToProjectSpecDestinationOutputWithContext(ctx context.Context) ProjectSpecDestinationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecDestinationOutput)
}

// ProjectSpecDestinationArrayInput is an input type that accepts ProjectSpecDestinationArray and ProjectSpecDestinationArrayOutput values.
// You can construct a concrete instance of `ProjectSpecDestinationArrayInput` via:
//
//	ProjectSpecDestinationArray{ ProjectSpecDestinationArgs{...} }
type ProjectSpecDestinationArrayInput interface {
	pulumi.Input

	ToProjectSpecDestinationArrayOutput() ProjectSpecDestinationArrayOutput
	ToProjectSpecDestinationArrayOutputWithContext(context.Context) ProjectSpecDestinationArrayOutput
}

type ProjectSpecDestinationArray []ProjectSpecDestinationInput

func (ProjectSpecDestinationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecDestination)(nil)).Elem()
}

func (i ProjectSpecDestinationArray) ToProjectSpecDestinationArrayOutput() ProjectSpecDestinationArrayOutput {
	return i.ToProjectSpecDestinationArrayOutputWithContext(context.Background())
}

func (i ProjectSpecDestinationArray) ToProjectSpecDestinationArrayOutputWithContext(ctx context.Context) ProjectSpecDestinationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecDestinationArrayOutput)
}

type ProjectSpecDestinationOutput struct{ *pulumi.OutputState }

func (ProjectSpecDestinationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecDestination)(nil)).Elem()
}

func (o ProjectSpecDestinationOutput) ToProjectSpecDestinationOutput() ProjectSpecDestinationOutput {
	return o
}

func (o ProjectSpecDestinationOutput) ToProjectSpecDestinationOutputWithContext(ctx context.Context) ProjectSpecDestinationOutput {
	return o
}

// Name of the destination cluster which can be used instead of server.
func (o ProjectSpecDestinationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecDestination) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Target namespace for applications' resources.
func (o ProjectSpecDestinationOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSpecDestination) string { return v.Namespace }).(pulumi.StringOutput)
}

// URL of the target cluster and must be set to the Kubernetes control plane API.
func (o ProjectSpecDestinationOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecDestination) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ProjectSpecDestinationArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecDestinationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecDestination)(nil)).Elem()
}

func (o ProjectSpecDestinationArrayOutput) ToProjectSpecDestinationArrayOutput() ProjectSpecDestinationArrayOutput {
	return o
}

func (o ProjectSpecDestinationArrayOutput) ToProjectSpecDestinationArrayOutputWithContext(ctx context.Context) ProjectSpecDestinationArrayOutput {
	return o
}

func (o ProjectSpecDestinationArrayOutput) Index(i pulumi.IntInput) ProjectSpecDestinationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecDestination {
		return vs[0].([]ProjectSpecDestination)[vs[1].(int)]
	}).(ProjectSpecDestinationOutput)
}

type ProjectSpecNamespaceResourceBlacklist struct {
	// The Kubernetes resource Group to match for.
	Group *string `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind *string `pulumi:"kind"`
}

// ProjectSpecNamespaceResourceBlacklistInput is an input type that accepts ProjectSpecNamespaceResourceBlacklistArgs and ProjectSpecNamespaceResourceBlacklistOutput values.
// You can construct a concrete instance of `ProjectSpecNamespaceResourceBlacklistInput` via:
//
//	ProjectSpecNamespaceResourceBlacklistArgs{...}
type ProjectSpecNamespaceResourceBlacklistInput interface {
	pulumi.Input

	ToProjectSpecNamespaceResourceBlacklistOutput() ProjectSpecNamespaceResourceBlacklistOutput
	ToProjectSpecNamespaceResourceBlacklistOutputWithContext(context.Context) ProjectSpecNamespaceResourceBlacklistOutput
}

type ProjectSpecNamespaceResourceBlacklistArgs struct {
	// The Kubernetes resource Group to match for.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ProjectSpecNamespaceResourceBlacklistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (i ProjectSpecNamespaceResourceBlacklistArgs) ToProjectSpecNamespaceResourceBlacklistOutput() ProjectSpecNamespaceResourceBlacklistOutput {
	return i.ToProjectSpecNamespaceResourceBlacklistOutputWithContext(context.Background())
}

func (i ProjectSpecNamespaceResourceBlacklistArgs) ToProjectSpecNamespaceResourceBlacklistOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceBlacklistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecNamespaceResourceBlacklistOutput)
}

// ProjectSpecNamespaceResourceBlacklistArrayInput is an input type that accepts ProjectSpecNamespaceResourceBlacklistArray and ProjectSpecNamespaceResourceBlacklistArrayOutput values.
// You can construct a concrete instance of `ProjectSpecNamespaceResourceBlacklistArrayInput` via:
//
//	ProjectSpecNamespaceResourceBlacklistArray{ ProjectSpecNamespaceResourceBlacklistArgs{...} }
type ProjectSpecNamespaceResourceBlacklistArrayInput interface {
	pulumi.Input

	ToProjectSpecNamespaceResourceBlacklistArrayOutput() ProjectSpecNamespaceResourceBlacklistArrayOutput
	ToProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(context.Context) ProjectSpecNamespaceResourceBlacklistArrayOutput
}

type ProjectSpecNamespaceResourceBlacklistArray []ProjectSpecNamespaceResourceBlacklistInput

func (ProjectSpecNamespaceResourceBlacklistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (i ProjectSpecNamespaceResourceBlacklistArray) ToProjectSpecNamespaceResourceBlacklistArrayOutput() ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return i.ToProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(context.Background())
}

func (i ProjectSpecNamespaceResourceBlacklistArray) ToProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecNamespaceResourceBlacklistArrayOutput)
}

type ProjectSpecNamespaceResourceBlacklistOutput struct{ *pulumi.OutputState }

func (ProjectSpecNamespaceResourceBlacklistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (o ProjectSpecNamespaceResourceBlacklistOutput) ToProjectSpecNamespaceResourceBlacklistOutput() ProjectSpecNamespaceResourceBlacklistOutput {
	return o
}

func (o ProjectSpecNamespaceResourceBlacklistOutput) ToProjectSpecNamespaceResourceBlacklistOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceBlacklistOutput {
	return o
}

// The Kubernetes resource Group to match for.
func (o ProjectSpecNamespaceResourceBlacklistOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecNamespaceResourceBlacklist) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource Kind to match for.
func (o ProjectSpecNamespaceResourceBlacklistOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecNamespaceResourceBlacklist) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ProjectSpecNamespaceResourceBlacklistArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecNamespaceResourceBlacklistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecNamespaceResourceBlacklist)(nil)).Elem()
}

func (o ProjectSpecNamespaceResourceBlacklistArrayOutput) ToProjectSpecNamespaceResourceBlacklistArrayOutput() ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o
}

func (o ProjectSpecNamespaceResourceBlacklistArrayOutput) ToProjectSpecNamespaceResourceBlacklistArrayOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceBlacklistArrayOutput {
	return o
}

func (o ProjectSpecNamespaceResourceBlacklistArrayOutput) Index(i pulumi.IntInput) ProjectSpecNamespaceResourceBlacklistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecNamespaceResourceBlacklist {
		return vs[0].([]ProjectSpecNamespaceResourceBlacklist)[vs[1].(int)]
	}).(ProjectSpecNamespaceResourceBlacklistOutput)
}

type ProjectSpecNamespaceResourceWhitelist struct {
	// The Kubernetes resource Group to match for.
	Group *string `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind *string `pulumi:"kind"`
}

// ProjectSpecNamespaceResourceWhitelistInput is an input type that accepts ProjectSpecNamespaceResourceWhitelistArgs and ProjectSpecNamespaceResourceWhitelistOutput values.
// You can construct a concrete instance of `ProjectSpecNamespaceResourceWhitelistInput` via:
//
//	ProjectSpecNamespaceResourceWhitelistArgs{...}
type ProjectSpecNamespaceResourceWhitelistInput interface {
	pulumi.Input

	ToProjectSpecNamespaceResourceWhitelistOutput() ProjectSpecNamespaceResourceWhitelistOutput
	ToProjectSpecNamespaceResourceWhitelistOutputWithContext(context.Context) ProjectSpecNamespaceResourceWhitelistOutput
}

type ProjectSpecNamespaceResourceWhitelistArgs struct {
	// The Kubernetes resource Group to match for.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
}

func (ProjectSpecNamespaceResourceWhitelistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (i ProjectSpecNamespaceResourceWhitelistArgs) ToProjectSpecNamespaceResourceWhitelistOutput() ProjectSpecNamespaceResourceWhitelistOutput {
	return i.ToProjectSpecNamespaceResourceWhitelistOutputWithContext(context.Background())
}

func (i ProjectSpecNamespaceResourceWhitelistArgs) ToProjectSpecNamespaceResourceWhitelistOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceWhitelistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecNamespaceResourceWhitelistOutput)
}

// ProjectSpecNamespaceResourceWhitelistArrayInput is an input type that accepts ProjectSpecNamespaceResourceWhitelistArray and ProjectSpecNamespaceResourceWhitelistArrayOutput values.
// You can construct a concrete instance of `ProjectSpecNamespaceResourceWhitelistArrayInput` via:
//
//	ProjectSpecNamespaceResourceWhitelistArray{ ProjectSpecNamespaceResourceWhitelistArgs{...} }
type ProjectSpecNamespaceResourceWhitelistArrayInput interface {
	pulumi.Input

	ToProjectSpecNamespaceResourceWhitelistArrayOutput() ProjectSpecNamespaceResourceWhitelistArrayOutput
	ToProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(context.Context) ProjectSpecNamespaceResourceWhitelistArrayOutput
}

type ProjectSpecNamespaceResourceWhitelistArray []ProjectSpecNamespaceResourceWhitelistInput

func (ProjectSpecNamespaceResourceWhitelistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (i ProjectSpecNamespaceResourceWhitelistArray) ToProjectSpecNamespaceResourceWhitelistArrayOutput() ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return i.ToProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(context.Background())
}

func (i ProjectSpecNamespaceResourceWhitelistArray) ToProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecNamespaceResourceWhitelistArrayOutput)
}

type ProjectSpecNamespaceResourceWhitelistOutput struct{ *pulumi.OutputState }

func (ProjectSpecNamespaceResourceWhitelistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (o ProjectSpecNamespaceResourceWhitelistOutput) ToProjectSpecNamespaceResourceWhitelistOutput() ProjectSpecNamespaceResourceWhitelistOutput {
	return o
}

func (o ProjectSpecNamespaceResourceWhitelistOutput) ToProjectSpecNamespaceResourceWhitelistOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceWhitelistOutput {
	return o
}

// The Kubernetes resource Group to match for.
func (o ProjectSpecNamespaceResourceWhitelistOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecNamespaceResourceWhitelist) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource Kind to match for.
func (o ProjectSpecNamespaceResourceWhitelistOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecNamespaceResourceWhitelist) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

type ProjectSpecNamespaceResourceWhitelistArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecNamespaceResourceWhitelistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecNamespaceResourceWhitelist)(nil)).Elem()
}

func (o ProjectSpecNamespaceResourceWhitelistArrayOutput) ToProjectSpecNamespaceResourceWhitelistArrayOutput() ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o
}

func (o ProjectSpecNamespaceResourceWhitelistArrayOutput) ToProjectSpecNamespaceResourceWhitelistArrayOutputWithContext(ctx context.Context) ProjectSpecNamespaceResourceWhitelistArrayOutput {
	return o
}

func (o ProjectSpecNamespaceResourceWhitelistArrayOutput) Index(i pulumi.IntInput) ProjectSpecNamespaceResourceWhitelistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecNamespaceResourceWhitelist {
		return vs[0].([]ProjectSpecNamespaceResourceWhitelist)[vs[1].(int)]
	}).(ProjectSpecNamespaceResourceWhitelistOutput)
}

type ProjectSpecOrphanedResources struct {
	Ignores []ProjectSpecOrphanedResourcesIgnore `pulumi:"ignores"`
	// Whether a warning condition should be created for apps which have orphaned resources.
	Warn *bool `pulumi:"warn"`
}

// ProjectSpecOrphanedResourcesInput is an input type that accepts ProjectSpecOrphanedResourcesArgs and ProjectSpecOrphanedResourcesOutput values.
// You can construct a concrete instance of `ProjectSpecOrphanedResourcesInput` via:
//
//	ProjectSpecOrphanedResourcesArgs{...}
type ProjectSpecOrphanedResourcesInput interface {
	pulumi.Input

	ToProjectSpecOrphanedResourcesOutput() ProjectSpecOrphanedResourcesOutput
	ToProjectSpecOrphanedResourcesOutputWithContext(context.Context) ProjectSpecOrphanedResourcesOutput
}

type ProjectSpecOrphanedResourcesArgs struct {
	Ignores ProjectSpecOrphanedResourcesIgnoreArrayInput `pulumi:"ignores"`
	// Whether a warning condition should be created for apps which have orphaned resources.
	Warn pulumi.BoolPtrInput `pulumi:"warn"`
}

func (ProjectSpecOrphanedResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecOrphanedResources)(nil)).Elem()
}

func (i ProjectSpecOrphanedResourcesArgs) ToProjectSpecOrphanedResourcesOutput() ProjectSpecOrphanedResourcesOutput {
	return i.ToProjectSpecOrphanedResourcesOutputWithContext(context.Background())
}

func (i ProjectSpecOrphanedResourcesArgs) ToProjectSpecOrphanedResourcesOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOrphanedResourcesOutput)
}

func (i ProjectSpecOrphanedResourcesArgs) ToProjectSpecOrphanedResourcesPtrOutput() ProjectSpecOrphanedResourcesPtrOutput {
	return i.ToProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (i ProjectSpecOrphanedResourcesArgs) ToProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOrphanedResourcesOutput).ToProjectSpecOrphanedResourcesPtrOutputWithContext(ctx)
}

// ProjectSpecOrphanedResourcesPtrInput is an input type that accepts ProjectSpecOrphanedResourcesArgs, ProjectSpecOrphanedResourcesPtr and ProjectSpecOrphanedResourcesPtrOutput values.
// You can construct a concrete instance of `ProjectSpecOrphanedResourcesPtrInput` via:
//
//	        ProjectSpecOrphanedResourcesArgs{...}
//
//	or:
//
//	        nil
type ProjectSpecOrphanedResourcesPtrInput interface {
	pulumi.Input

	ToProjectSpecOrphanedResourcesPtrOutput() ProjectSpecOrphanedResourcesPtrOutput
	ToProjectSpecOrphanedResourcesPtrOutputWithContext(context.Context) ProjectSpecOrphanedResourcesPtrOutput
}

type projectSpecOrphanedResourcesPtrType ProjectSpecOrphanedResourcesArgs

func ProjectSpecOrphanedResourcesPtr(v *ProjectSpecOrphanedResourcesArgs) ProjectSpecOrphanedResourcesPtrInput {
	return (*projectSpecOrphanedResourcesPtrType)(v)
}

func (*projectSpecOrphanedResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSpecOrphanedResources)(nil)).Elem()
}

func (i *projectSpecOrphanedResourcesPtrType) ToProjectSpecOrphanedResourcesPtrOutput() ProjectSpecOrphanedResourcesPtrOutput {
	return i.ToProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (i *projectSpecOrphanedResourcesPtrType) ToProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOrphanedResourcesPtrOutput)
}

type ProjectSpecOrphanedResourcesOutput struct{ *pulumi.OutputState }

func (ProjectSpecOrphanedResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecOrphanedResources)(nil)).Elem()
}

func (o ProjectSpecOrphanedResourcesOutput) ToProjectSpecOrphanedResourcesOutput() ProjectSpecOrphanedResourcesOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesOutput) ToProjectSpecOrphanedResourcesOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesOutput) ToProjectSpecOrphanedResourcesPtrOutput() ProjectSpecOrphanedResourcesPtrOutput {
	return o.ToProjectSpecOrphanedResourcesPtrOutputWithContext(context.Background())
}

func (o ProjectSpecOrphanedResourcesOutput) ToProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProjectSpecOrphanedResources) *ProjectSpecOrphanedResources {
		return &v
	}).(ProjectSpecOrphanedResourcesPtrOutput)
}

func (o ProjectSpecOrphanedResourcesOutput) Ignores() ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o.ApplyT(func(v ProjectSpecOrphanedResources) []ProjectSpecOrphanedResourcesIgnore { return v.Ignores }).(ProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

// Whether a warning condition should be created for apps which have orphaned resources.
func (o ProjectSpecOrphanedResourcesOutput) Warn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSpecOrphanedResources) *bool { return v.Warn }).(pulumi.BoolPtrOutput)
}

type ProjectSpecOrphanedResourcesPtrOutput struct{ *pulumi.OutputState }

func (ProjectSpecOrphanedResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectSpecOrphanedResources)(nil)).Elem()
}

func (o ProjectSpecOrphanedResourcesPtrOutput) ToProjectSpecOrphanedResourcesPtrOutput() ProjectSpecOrphanedResourcesPtrOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesPtrOutput) ToProjectSpecOrphanedResourcesPtrOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesPtrOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesPtrOutput) Elem() ProjectSpecOrphanedResourcesOutput {
	return o.ApplyT(func(v *ProjectSpecOrphanedResources) ProjectSpecOrphanedResources {
		if v != nil {
			return *v
		}
		var ret ProjectSpecOrphanedResources
		return ret
	}).(ProjectSpecOrphanedResourcesOutput)
}

func (o ProjectSpecOrphanedResourcesPtrOutput) Ignores() ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o.ApplyT(func(v *ProjectSpecOrphanedResources) []ProjectSpecOrphanedResourcesIgnore {
		if v == nil {
			return nil
		}
		return v.Ignores
	}).(ProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

// Whether a warning condition should be created for apps which have orphaned resources.
func (o ProjectSpecOrphanedResourcesPtrOutput) Warn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProjectSpecOrphanedResources) *bool {
		if v == nil {
			return nil
		}
		return v.Warn
	}).(pulumi.BoolPtrOutput)
}

type ProjectSpecOrphanedResourcesIgnore struct {
	// The Kubernetes resource Group to match for.
	Group *string `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind *string `pulumi:"kind"`
	// The Kubernetes resource name to match for.
	Name *string `pulumi:"name"`
}

// ProjectSpecOrphanedResourcesIgnoreInput is an input type that accepts ProjectSpecOrphanedResourcesIgnoreArgs and ProjectSpecOrphanedResourcesIgnoreOutput values.
// You can construct a concrete instance of `ProjectSpecOrphanedResourcesIgnoreInput` via:
//
//	ProjectSpecOrphanedResourcesIgnoreArgs{...}
type ProjectSpecOrphanedResourcesIgnoreInput interface {
	pulumi.Input

	ToProjectSpecOrphanedResourcesIgnoreOutput() ProjectSpecOrphanedResourcesIgnoreOutput
	ToProjectSpecOrphanedResourcesIgnoreOutputWithContext(context.Context) ProjectSpecOrphanedResourcesIgnoreOutput
}

type ProjectSpecOrphanedResourcesIgnoreArgs struct {
	// The Kubernetes resource Group to match for.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The Kubernetes resource Kind to match for.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// The Kubernetes resource name to match for.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ProjectSpecOrphanedResourcesIgnoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (i ProjectSpecOrphanedResourcesIgnoreArgs) ToProjectSpecOrphanedResourcesIgnoreOutput() ProjectSpecOrphanedResourcesIgnoreOutput {
	return i.ToProjectSpecOrphanedResourcesIgnoreOutputWithContext(context.Background())
}

func (i ProjectSpecOrphanedResourcesIgnoreArgs) ToProjectSpecOrphanedResourcesIgnoreOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesIgnoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOrphanedResourcesIgnoreOutput)
}

// ProjectSpecOrphanedResourcesIgnoreArrayInput is an input type that accepts ProjectSpecOrphanedResourcesIgnoreArray and ProjectSpecOrphanedResourcesIgnoreArrayOutput values.
// You can construct a concrete instance of `ProjectSpecOrphanedResourcesIgnoreArrayInput` via:
//
//	ProjectSpecOrphanedResourcesIgnoreArray{ ProjectSpecOrphanedResourcesIgnoreArgs{...} }
type ProjectSpecOrphanedResourcesIgnoreArrayInput interface {
	pulumi.Input

	ToProjectSpecOrphanedResourcesIgnoreArrayOutput() ProjectSpecOrphanedResourcesIgnoreArrayOutput
	ToProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(context.Context) ProjectSpecOrphanedResourcesIgnoreArrayOutput
}

type ProjectSpecOrphanedResourcesIgnoreArray []ProjectSpecOrphanedResourcesIgnoreInput

func (ProjectSpecOrphanedResourcesIgnoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (i ProjectSpecOrphanedResourcesIgnoreArray) ToProjectSpecOrphanedResourcesIgnoreArrayOutput() ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return i.ToProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(context.Background())
}

func (i ProjectSpecOrphanedResourcesIgnoreArray) ToProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecOrphanedResourcesIgnoreArrayOutput)
}

type ProjectSpecOrphanedResourcesIgnoreOutput struct{ *pulumi.OutputState }

func (ProjectSpecOrphanedResourcesIgnoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (o ProjectSpecOrphanedResourcesIgnoreOutput) ToProjectSpecOrphanedResourcesIgnoreOutput() ProjectSpecOrphanedResourcesIgnoreOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesIgnoreOutput) ToProjectSpecOrphanedResourcesIgnoreOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesIgnoreOutput {
	return o
}

// The Kubernetes resource Group to match for.
func (o ProjectSpecOrphanedResourcesIgnoreOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecOrphanedResourcesIgnore) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource Kind to match for.
func (o ProjectSpecOrphanedResourcesIgnoreOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecOrphanedResourcesIgnore) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// The Kubernetes resource name to match for.
func (o ProjectSpecOrphanedResourcesIgnoreOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecOrphanedResourcesIgnore) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ProjectSpecOrphanedResourcesIgnoreArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecOrphanedResourcesIgnoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecOrphanedResourcesIgnore)(nil)).Elem()
}

func (o ProjectSpecOrphanedResourcesIgnoreArrayOutput) ToProjectSpecOrphanedResourcesIgnoreArrayOutput() ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesIgnoreArrayOutput) ToProjectSpecOrphanedResourcesIgnoreArrayOutputWithContext(ctx context.Context) ProjectSpecOrphanedResourcesIgnoreArrayOutput {
	return o
}

func (o ProjectSpecOrphanedResourcesIgnoreArrayOutput) Index(i pulumi.IntInput) ProjectSpecOrphanedResourcesIgnoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecOrphanedResourcesIgnore {
		return vs[0].([]ProjectSpecOrphanedResourcesIgnore)[vs[1].(int)]
	}).(ProjectSpecOrphanedResourcesIgnoreOutput)
}

type ProjectSpecRole struct {
	// Description of the role.
	Description *string `pulumi:"description"`
	// List of OIDC group claims bound to this role.
	Groups []string `pulumi:"groups"`
	// Name of the role.
	Name string `pulumi:"name"`
	// List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
	Policies []string `pulumi:"policies"`
}

// ProjectSpecRoleInput is an input type that accepts ProjectSpecRoleArgs and ProjectSpecRoleOutput values.
// You can construct a concrete instance of `ProjectSpecRoleInput` via:
//
//	ProjectSpecRoleArgs{...}
type ProjectSpecRoleInput interface {
	pulumi.Input

	ToProjectSpecRoleOutput() ProjectSpecRoleOutput
	ToProjectSpecRoleOutputWithContext(context.Context) ProjectSpecRoleOutput
}

type ProjectSpecRoleArgs struct {
	// Description of the role.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// List of OIDC group claims bound to this role.
	Groups pulumi.StringArrayInput `pulumi:"groups"`
	// Name of the role.
	Name pulumi.StringInput `pulumi:"name"`
	// List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
	Policies pulumi.StringArrayInput `pulumi:"policies"`
}

func (ProjectSpecRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecRole)(nil)).Elem()
}

func (i ProjectSpecRoleArgs) ToProjectSpecRoleOutput() ProjectSpecRoleOutput {
	return i.ToProjectSpecRoleOutputWithContext(context.Background())
}

func (i ProjectSpecRoleArgs) ToProjectSpecRoleOutputWithContext(ctx context.Context) ProjectSpecRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecRoleOutput)
}

// ProjectSpecRoleArrayInput is an input type that accepts ProjectSpecRoleArray and ProjectSpecRoleArrayOutput values.
// You can construct a concrete instance of `ProjectSpecRoleArrayInput` via:
//
//	ProjectSpecRoleArray{ ProjectSpecRoleArgs{...} }
type ProjectSpecRoleArrayInput interface {
	pulumi.Input

	ToProjectSpecRoleArrayOutput() ProjectSpecRoleArrayOutput
	ToProjectSpecRoleArrayOutputWithContext(context.Context) ProjectSpecRoleArrayOutput
}

type ProjectSpecRoleArray []ProjectSpecRoleInput

func (ProjectSpecRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecRole)(nil)).Elem()
}

func (i ProjectSpecRoleArray) ToProjectSpecRoleArrayOutput() ProjectSpecRoleArrayOutput {
	return i.ToProjectSpecRoleArrayOutputWithContext(context.Background())
}

func (i ProjectSpecRoleArray) ToProjectSpecRoleArrayOutputWithContext(ctx context.Context) ProjectSpecRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecRoleArrayOutput)
}

type ProjectSpecRoleOutput struct{ *pulumi.OutputState }

func (ProjectSpecRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecRole)(nil)).Elem()
}

func (o ProjectSpecRoleOutput) ToProjectSpecRoleOutput() ProjectSpecRoleOutput {
	return o
}

func (o ProjectSpecRoleOutput) ToProjectSpecRoleOutputWithContext(ctx context.Context) ProjectSpecRoleOutput {
	return o
}

// Description of the role.
func (o ProjectSpecRoleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecRole) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// List of OIDC group claims bound to this role.
func (o ProjectSpecRoleOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpecRole) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

// Name of the role.
func (o ProjectSpecRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectSpecRole) string { return v.Name }).(pulumi.StringOutput)
}

// List of casbin formatted strings that define access policies for the role in the project. For more information, see the [ArgoCD RBAC reference](https://argoproj.github.io/argo-cd/operator-manual/rbac/#rbac-permission-structure).
func (o ProjectSpecRoleOutput) Policies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpecRole) []string { return v.Policies }).(pulumi.StringArrayOutput)
}

type ProjectSpecRoleArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecRole)(nil)).Elem()
}

func (o ProjectSpecRoleArrayOutput) ToProjectSpecRoleArrayOutput() ProjectSpecRoleArrayOutput {
	return o
}

func (o ProjectSpecRoleArrayOutput) ToProjectSpecRoleArrayOutputWithContext(ctx context.Context) ProjectSpecRoleArrayOutput {
	return o
}

func (o ProjectSpecRoleArrayOutput) Index(i pulumi.IntInput) ProjectSpecRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecRole {
		return vs[0].([]ProjectSpecRole)[vs[1].(int)]
	}).(ProjectSpecRoleOutput)
}

type ProjectSpecSyncWindow struct {
	// List of applications that the window will apply to.
	Applications []string `pulumi:"applications"`
	// List of clusters that the window will apply to.
	Clusters []string `pulumi:"clusters"`
	// Amount of time the sync window will be open.
	Duration *string `pulumi:"duration"`
	// Defines if the window allows or blocks syncs, allowed values are `allow` or `deny`.
	Kind *string `pulumi:"kind"`
	// Enables manual syncs when they would otherwise be blocked.
	ManualSync *bool `pulumi:"manualSync"`
	// List of namespaces that the window will apply to.
	Namespaces []string `pulumi:"namespaces"`
	// Time the window will begin, specified in cron format.
	Schedule *string `pulumi:"schedule"`
	// Timezone that the schedule will be evaluated in.
	Timezone *string `pulumi:"timezone"`
}

// ProjectSpecSyncWindowInput is an input type that accepts ProjectSpecSyncWindowArgs and ProjectSpecSyncWindowOutput values.
// You can construct a concrete instance of `ProjectSpecSyncWindowInput` via:
//
//	ProjectSpecSyncWindowArgs{...}
type ProjectSpecSyncWindowInput interface {
	pulumi.Input

	ToProjectSpecSyncWindowOutput() ProjectSpecSyncWindowOutput
	ToProjectSpecSyncWindowOutputWithContext(context.Context) ProjectSpecSyncWindowOutput
}

type ProjectSpecSyncWindowArgs struct {
	// List of applications that the window will apply to.
	Applications pulumi.StringArrayInput `pulumi:"applications"`
	// List of clusters that the window will apply to.
	Clusters pulumi.StringArrayInput `pulumi:"clusters"`
	// Amount of time the sync window will be open.
	Duration pulumi.StringPtrInput `pulumi:"duration"`
	// Defines if the window allows or blocks syncs, allowed values are `allow` or `deny`.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Enables manual syncs when they would otherwise be blocked.
	ManualSync pulumi.BoolPtrInput `pulumi:"manualSync"`
	// List of namespaces that the window will apply to.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// Time the window will begin, specified in cron format.
	Schedule pulumi.StringPtrInput `pulumi:"schedule"`
	// Timezone that the schedule will be evaluated in.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
}

func (ProjectSpecSyncWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecSyncWindow)(nil)).Elem()
}

func (i ProjectSpecSyncWindowArgs) ToProjectSpecSyncWindowOutput() ProjectSpecSyncWindowOutput {
	return i.ToProjectSpecSyncWindowOutputWithContext(context.Background())
}

func (i ProjectSpecSyncWindowArgs) ToProjectSpecSyncWindowOutputWithContext(ctx context.Context) ProjectSpecSyncWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecSyncWindowOutput)
}

// ProjectSpecSyncWindowArrayInput is an input type that accepts ProjectSpecSyncWindowArray and ProjectSpecSyncWindowArrayOutput values.
// You can construct a concrete instance of `ProjectSpecSyncWindowArrayInput` via:
//
//	ProjectSpecSyncWindowArray{ ProjectSpecSyncWindowArgs{...} }
type ProjectSpecSyncWindowArrayInput interface {
	pulumi.Input

	ToProjectSpecSyncWindowArrayOutput() ProjectSpecSyncWindowArrayOutput
	ToProjectSpecSyncWindowArrayOutputWithContext(context.Context) ProjectSpecSyncWindowArrayOutput
}

type ProjectSpecSyncWindowArray []ProjectSpecSyncWindowInput

func (ProjectSpecSyncWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecSyncWindow)(nil)).Elem()
}

func (i ProjectSpecSyncWindowArray) ToProjectSpecSyncWindowArrayOutput() ProjectSpecSyncWindowArrayOutput {
	return i.ToProjectSpecSyncWindowArrayOutputWithContext(context.Background())
}

func (i ProjectSpecSyncWindowArray) ToProjectSpecSyncWindowArrayOutputWithContext(ctx context.Context) ProjectSpecSyncWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectSpecSyncWindowArrayOutput)
}

type ProjectSpecSyncWindowOutput struct{ *pulumi.OutputState }

func (ProjectSpecSyncWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectSpecSyncWindow)(nil)).Elem()
}

func (o ProjectSpecSyncWindowOutput) ToProjectSpecSyncWindowOutput() ProjectSpecSyncWindowOutput {
	return o
}

func (o ProjectSpecSyncWindowOutput) ToProjectSpecSyncWindowOutputWithContext(ctx context.Context) ProjectSpecSyncWindowOutput {
	return o
}

// List of applications that the window will apply to.
func (o ProjectSpecSyncWindowOutput) Applications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) []string { return v.Applications }).(pulumi.StringArrayOutput)
}

// List of clusters that the window will apply to.
func (o ProjectSpecSyncWindowOutput) Clusters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) []string { return v.Clusters }).(pulumi.StringArrayOutput)
}

// Amount of time the sync window will be open.
func (o ProjectSpecSyncWindowOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) *string { return v.Duration }).(pulumi.StringPtrOutput)
}

// Defines if the window allows or blocks syncs, allowed values are `allow` or `deny`.
func (o ProjectSpecSyncWindowOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Enables manual syncs when they would otherwise be blocked.
func (o ProjectSpecSyncWindowOutput) ManualSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) *bool { return v.ManualSync }).(pulumi.BoolPtrOutput)
}

// List of namespaces that the window will apply to.
func (o ProjectSpecSyncWindowOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

// Time the window will begin, specified in cron format.
func (o ProjectSpecSyncWindowOutput) Schedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) *string { return v.Schedule }).(pulumi.StringPtrOutput)
}

// Timezone that the schedule will be evaluated in.
func (o ProjectSpecSyncWindowOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectSpecSyncWindow) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

type ProjectSpecSyncWindowArrayOutput struct{ *pulumi.OutputState }

func (ProjectSpecSyncWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProjectSpecSyncWindow)(nil)).Elem()
}

func (o ProjectSpecSyncWindowArrayOutput) ToProjectSpecSyncWindowArrayOutput() ProjectSpecSyncWindowArrayOutput {
	return o
}

func (o ProjectSpecSyncWindowArrayOutput) ToProjectSpecSyncWindowArrayOutputWithContext(ctx context.Context) ProjectSpecSyncWindowArrayOutput {
	return o
}

func (o ProjectSpecSyncWindowArrayOutput) Index(i pulumi.IntInput) ProjectSpecSyncWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProjectSpecSyncWindow {
		return vs[0].([]ProjectSpecSyncWindow)[vs[1].(int)]
	}).(ProjectSpecSyncWindowOutput)
}

type ProviderKubernetes struct {
	// PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
	ClientKey *string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// Context to choose from the config file. Can be sourced from `KUBE_CTX`.
	ConfigContext         *string `pulumi:"configContext"`
	ConfigContextAuthInfo *string `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  *string `pulumi:"configContextCluster"`
	// Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
	Exec *ProviderKubernetesExec `pulumi:"exec"`
	// The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
	Host *string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
	Insecure *bool `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
	Password *string `pulumi:"password"`
	// Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
	Token *string `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
	Username *string `pulumi:"username"`
}

// ProviderKubernetesInput is an input type that accepts ProviderKubernetesArgs and ProviderKubernetesOutput values.
// You can construct a concrete instance of `ProviderKubernetesInput` via:
//
//	ProviderKubernetesArgs{...}
type ProviderKubernetesInput interface {
	pulumi.Input

	ToProviderKubernetesOutput() ProviderKubernetesOutput
	ToProviderKubernetesOutputWithContext(context.Context) ProviderKubernetesOutput
}

type ProviderKubernetesArgs struct {
	// PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
	ClusterCaCertificate pulumi.StringPtrInput `pulumi:"clusterCaCertificate"`
	// Context to choose from the config file. Can be sourced from `KUBE_CTX`.
	ConfigContext         pulumi.StringPtrInput `pulumi:"configContext"`
	ConfigContextAuthInfo pulumi.StringPtrInput `pulumi:"configContextAuthInfo"`
	ConfigContextCluster  pulumi.StringPtrInput `pulumi:"configContextCluster"`
	// Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
	Exec ProviderKubernetesExecPtrInput `pulumi:"exec"`
	// The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
	Insecure pulumi.BoolPtrInput `pulumi:"insecure"`
	// The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ProviderKubernetesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderKubernetes)(nil)).Elem()
}

func (i ProviderKubernetesArgs) ToProviderKubernetesOutput() ProviderKubernetesOutput {
	return i.ToProviderKubernetesOutputWithContext(context.Background())
}

func (i ProviderKubernetesArgs) ToProviderKubernetesOutputWithContext(ctx context.Context) ProviderKubernetesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesOutput)
}

func (i ProviderKubernetesArgs) ToProviderKubernetesPtrOutput() ProviderKubernetesPtrOutput {
	return i.ToProviderKubernetesPtrOutputWithContext(context.Background())
}

func (i ProviderKubernetesArgs) ToProviderKubernetesPtrOutputWithContext(ctx context.Context) ProviderKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesOutput).ToProviderKubernetesPtrOutputWithContext(ctx)
}

// ProviderKubernetesPtrInput is an input type that accepts ProviderKubernetesArgs, ProviderKubernetesPtr and ProviderKubernetesPtrOutput values.
// You can construct a concrete instance of `ProviderKubernetesPtrInput` via:
//
//	        ProviderKubernetesArgs{...}
//
//	or:
//
//	        nil
type ProviderKubernetesPtrInput interface {
	pulumi.Input

	ToProviderKubernetesPtrOutput() ProviderKubernetesPtrOutput
	ToProviderKubernetesPtrOutputWithContext(context.Context) ProviderKubernetesPtrOutput
}

type providerKubernetesPtrType ProviderKubernetesArgs

func ProviderKubernetesPtr(v *ProviderKubernetesArgs) ProviderKubernetesPtrInput {
	return (*providerKubernetesPtrType)(v)
}

func (*providerKubernetesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderKubernetes)(nil)).Elem()
}

func (i *providerKubernetesPtrType) ToProviderKubernetesPtrOutput() ProviderKubernetesPtrOutput {
	return i.ToProviderKubernetesPtrOutputWithContext(context.Background())
}

func (i *providerKubernetesPtrType) ToProviderKubernetesPtrOutputWithContext(ctx context.Context) ProviderKubernetesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesPtrOutput)
}

type ProviderKubernetesOutput struct{ *pulumi.OutputState }

func (ProviderKubernetesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderKubernetes)(nil)).Elem()
}

func (o ProviderKubernetesOutput) ToProviderKubernetesOutput() ProviderKubernetesOutput {
	return o
}

func (o ProviderKubernetesOutput) ToProviderKubernetesOutputWithContext(ctx context.Context) ProviderKubernetesOutput {
	return o
}

func (o ProviderKubernetesOutput) ToProviderKubernetesPtrOutput() ProviderKubernetesPtrOutput {
	return o.ToProviderKubernetesPtrOutputWithContext(context.Background())
}

func (o ProviderKubernetesOutput) ToProviderKubernetesPtrOutputWithContext(ctx context.Context) ProviderKubernetesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderKubernetes) *ProviderKubernetes {
		return &v
	}).(ProviderKubernetesPtrOutput)
}

// PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
func (o ProviderKubernetesOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
func (o ProviderKubernetesOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
func (o ProviderKubernetesOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ClusterCaCertificate }).(pulumi.StringPtrOutput)
}

// Context to choose from the config file. Can be sourced from `KUBE_CTX`.
func (o ProviderKubernetesOutput) ConfigContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ConfigContext }).(pulumi.StringPtrOutput)
}

func (o ProviderKubernetesOutput) ConfigContextAuthInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ConfigContextAuthInfo }).(pulumi.StringPtrOutput)
}

func (o ProviderKubernetesOutput) ConfigContextCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.ConfigContextCluster }).(pulumi.StringPtrOutput)
}

// Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
func (o ProviderKubernetesOutput) Exec() ProviderKubernetesExecPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *ProviderKubernetesExec { return v.Exec }).(ProviderKubernetesExecPtrOutput)
}

// The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
func (o ProviderKubernetesOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
func (o ProviderKubernetesOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *bool { return v.Insecure }).(pulumi.BoolPtrOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
func (o ProviderKubernetesOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
func (o ProviderKubernetesOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
func (o ProviderKubernetesOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderKubernetes) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ProviderKubernetesPtrOutput struct{ *pulumi.OutputState }

func (ProviderKubernetesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderKubernetes)(nil)).Elem()
}

func (o ProviderKubernetesPtrOutput) ToProviderKubernetesPtrOutput() ProviderKubernetesPtrOutput {
	return o
}

func (o ProviderKubernetesPtrOutput) ToProviderKubernetesPtrOutputWithContext(ctx context.Context) ProviderKubernetesPtrOutput {
	return o
}

func (o ProviderKubernetesPtrOutput) Elem() ProviderKubernetesOutput {
	return o.ApplyT(func(v *ProviderKubernetes) ProviderKubernetes {
		if v != nil {
			return *v
		}
		var ret ProviderKubernetes
		return ret
	}).(ProviderKubernetesOutput)
}

// PEM-encoded client certificate for TLS authentication. Can be sourced from `KUBE_CLIENT_CERT_DATA`.
func (o ProviderKubernetesPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// PEM-encoded client certificate key for TLS authentication. Can be sourced from `KUBE_CLIENT_KEY_DATA`.
func (o ProviderKubernetesPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// PEM-encoded root certificates bundle for TLS authentication. Can be sourced from `KUBE_CLUSTER_CA_CERT_DATA`.
func (o ProviderKubernetesPtrOutput) ClusterCaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ClusterCaCertificate
	}).(pulumi.StringPtrOutput)
}

// Context to choose from the config file. Can be sourced from `KUBE_CTX`.
func (o ProviderKubernetesPtrOutput) ConfigContext() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContext
	}).(pulumi.StringPtrOutput)
}

func (o ProviderKubernetesPtrOutput) ConfigContextAuthInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContextAuthInfo
	}).(pulumi.StringPtrOutput)
}

func (o ProviderKubernetesPtrOutput) ConfigContextCluster() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.ConfigContextCluster
	}).(pulumi.StringPtrOutput)
}

// Configuration block to use an [exec-based credential plugin](https://kubernetes.io/docs/reference/access-authn-authz/authentication/#client-go-credential-plugins), e.g. call an external command to receive user credentials.
func (o ProviderKubernetesPtrOutput) Exec() ProviderKubernetesExecPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *ProviderKubernetesExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ProviderKubernetesExecPtrOutput)
}

// The hostname (in form of URI) of the Kubernetes API. Can be sourced from `KUBE_HOST`.
func (o ProviderKubernetesPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Whether server should be accessed without verifying the TLS certificate. Can be sourced from `KUBE_INSECURE`.
func (o ProviderKubernetesPtrOutput) Insecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *bool {
		if v == nil {
			return nil
		}
		return v.Insecure
	}).(pulumi.BoolPtrOutput)
}

// The password to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_PASSWORD`.
func (o ProviderKubernetesPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// Token to authenticate an service account. Can be sourced from `KUBE_TOKEN`.
func (o ProviderKubernetesPtrOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Token
	}).(pulumi.StringPtrOutput)
}

// The username to use for HTTP basic authentication when accessing the Kubernetes API. Can be sourced from `KUBE_USER`.
func (o ProviderKubernetesPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetes) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type ProviderKubernetesExec struct {
	// API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
	ApiVersion string `pulumi:"apiVersion"`
	// Map of environment variables to set when executing the plugin.
	Args []string `pulumi:"args"`
	// Command to execute.
	Command string `pulumi:"command"`
	// List of arguments to pass when executing the plugin.
	Env map[string]string `pulumi:"env"`
}

// ProviderKubernetesExecInput is an input type that accepts ProviderKubernetesExecArgs and ProviderKubernetesExecOutput values.
// You can construct a concrete instance of `ProviderKubernetesExecInput` via:
//
//	ProviderKubernetesExecArgs{...}
type ProviderKubernetesExecInput interface {
	pulumi.Input

	ToProviderKubernetesExecOutput() ProviderKubernetesExecOutput
	ToProviderKubernetesExecOutputWithContext(context.Context) ProviderKubernetesExecOutput
}

type ProviderKubernetesExecArgs struct {
	// API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// Map of environment variables to set when executing the plugin.
	Args pulumi.StringArrayInput `pulumi:"args"`
	// Command to execute.
	Command pulumi.StringInput `pulumi:"command"`
	// List of arguments to pass when executing the plugin.
	Env pulumi.StringMapInput `pulumi:"env"`
}

func (ProviderKubernetesExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderKubernetesExec)(nil)).Elem()
}

func (i ProviderKubernetesExecArgs) ToProviderKubernetesExecOutput() ProviderKubernetesExecOutput {
	return i.ToProviderKubernetesExecOutputWithContext(context.Background())
}

func (i ProviderKubernetesExecArgs) ToProviderKubernetesExecOutputWithContext(ctx context.Context) ProviderKubernetesExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesExecOutput)
}

func (i ProviderKubernetesExecArgs) ToProviderKubernetesExecPtrOutput() ProviderKubernetesExecPtrOutput {
	return i.ToProviderKubernetesExecPtrOutputWithContext(context.Background())
}

func (i ProviderKubernetesExecArgs) ToProviderKubernetesExecPtrOutputWithContext(ctx context.Context) ProviderKubernetesExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesExecOutput).ToProviderKubernetesExecPtrOutputWithContext(ctx)
}

// ProviderKubernetesExecPtrInput is an input type that accepts ProviderKubernetesExecArgs, ProviderKubernetesExecPtr and ProviderKubernetesExecPtrOutput values.
// You can construct a concrete instance of `ProviderKubernetesExecPtrInput` via:
//
//	        ProviderKubernetesExecArgs{...}
//
//	or:
//
//	        nil
type ProviderKubernetesExecPtrInput interface {
	pulumi.Input

	ToProviderKubernetesExecPtrOutput() ProviderKubernetesExecPtrOutput
	ToProviderKubernetesExecPtrOutputWithContext(context.Context) ProviderKubernetesExecPtrOutput
}

type providerKubernetesExecPtrType ProviderKubernetesExecArgs

func ProviderKubernetesExecPtr(v *ProviderKubernetesExecArgs) ProviderKubernetesExecPtrInput {
	return (*providerKubernetesExecPtrType)(v)
}

func (*providerKubernetesExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderKubernetesExec)(nil)).Elem()
}

func (i *providerKubernetesExecPtrType) ToProviderKubernetesExecPtrOutput() ProviderKubernetesExecPtrOutput {
	return i.ToProviderKubernetesExecPtrOutputWithContext(context.Background())
}

func (i *providerKubernetesExecPtrType) ToProviderKubernetesExecPtrOutputWithContext(ctx context.Context) ProviderKubernetesExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderKubernetesExecPtrOutput)
}

type ProviderKubernetesExecOutput struct{ *pulumi.OutputState }

func (ProviderKubernetesExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderKubernetesExec)(nil)).Elem()
}

func (o ProviderKubernetesExecOutput) ToProviderKubernetesExecOutput() ProviderKubernetesExecOutput {
	return o
}

func (o ProviderKubernetesExecOutput) ToProviderKubernetesExecOutputWithContext(ctx context.Context) ProviderKubernetesExecOutput {
	return o
}

func (o ProviderKubernetesExecOutput) ToProviderKubernetesExecPtrOutput() ProviderKubernetesExecPtrOutput {
	return o.ToProviderKubernetesExecPtrOutputWithContext(context.Background())
}

func (o ProviderKubernetesExecOutput) ToProviderKubernetesExecPtrOutputWithContext(ctx context.Context) ProviderKubernetesExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderKubernetesExec) *ProviderKubernetesExec {
		return &v
	}).(ProviderKubernetesExecPtrOutput)
}

// API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
func (o ProviderKubernetesExecOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderKubernetesExec) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// Map of environment variables to set when executing the plugin.
func (o ProviderKubernetesExecOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ProviderKubernetesExec) []string { return v.Args }).(pulumi.StringArrayOutput)
}

// Command to execute.
func (o ProviderKubernetesExecOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderKubernetesExec) string { return v.Command }).(pulumi.StringOutput)
}

// List of arguments to pass when executing the plugin.
func (o ProviderKubernetesExecOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v ProviderKubernetesExec) map[string]string { return v.Env }).(pulumi.StringMapOutput)
}

type ProviderKubernetesExecPtrOutput struct{ *pulumi.OutputState }

func (ProviderKubernetesExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderKubernetesExec)(nil)).Elem()
}

func (o ProviderKubernetesExecPtrOutput) ToProviderKubernetesExecPtrOutput() ProviderKubernetesExecPtrOutput {
	return o
}

func (o ProviderKubernetesExecPtrOutput) ToProviderKubernetesExecPtrOutputWithContext(ctx context.Context) ProviderKubernetesExecPtrOutput {
	return o
}

func (o ProviderKubernetesExecPtrOutput) Elem() ProviderKubernetesExecOutput {
	return o.ApplyT(func(v *ProviderKubernetesExec) ProviderKubernetesExec {
		if v != nil {
			return *v
		}
		var ret ProviderKubernetesExec
		return ret
	}).(ProviderKubernetesExecOutput)
}

// API version to use when decoding the ExecCredentials resource, e.g. `client.authentication.k8s.io/v1beta1`.
func (o ProviderKubernetesExecPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetesExec) *string {
		if v == nil {
			return nil
		}
		return &v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Map of environment variables to set when executing the plugin.
func (o ProviderKubernetesExecPtrOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProviderKubernetesExec) []string {
		if v == nil {
			return nil
		}
		return v.Args
	}).(pulumi.StringArrayOutput)
}

// Command to execute.
func (o ProviderKubernetesExecPtrOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderKubernetesExec) *string {
		if v == nil {
			return nil
		}
		return &v.Command
	}).(pulumi.StringPtrOutput)
}

// List of arguments to pass when executing the plugin.
func (o ProviderKubernetesExecPtrOutput) Env() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ProviderKubernetesExec) map[string]string {
		if v == nil {
			return nil
		}
		return v.Env
	}).(pulumi.StringMapOutput)
}

type RepositoryCertificateHttps struct {
	// The actual certificate data, dependent on the certificate type.
	CertData string `pulumi:"certData"`
	// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
	CertInfo *string `pulumi:"certInfo"`
	// The sub type of the cert, i.e. `ssh-rsa`.
	CertSubtype *string `pulumi:"certSubtype"`
	// DNS name of the server this certificate is intended for.
	ServerName string `pulumi:"serverName"`
}

// RepositoryCertificateHttpsInput is an input type that accepts RepositoryCertificateHttpsArgs and RepositoryCertificateHttpsOutput values.
// You can construct a concrete instance of `RepositoryCertificateHttpsInput` via:
//
//	RepositoryCertificateHttpsArgs{...}
type RepositoryCertificateHttpsInput interface {
	pulumi.Input

	ToRepositoryCertificateHttpsOutput() RepositoryCertificateHttpsOutput
	ToRepositoryCertificateHttpsOutputWithContext(context.Context) RepositoryCertificateHttpsOutput
}

type RepositoryCertificateHttpsArgs struct {
	// The actual certificate data, dependent on the certificate type.
	CertData pulumi.StringInput `pulumi:"certData"`
	// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
	CertInfo pulumi.StringPtrInput `pulumi:"certInfo"`
	// The sub type of the cert, i.e. `ssh-rsa`.
	CertSubtype pulumi.StringPtrInput `pulumi:"certSubtype"`
	// DNS name of the server this certificate is intended for.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (RepositoryCertificateHttpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCertificateHttps)(nil)).Elem()
}

func (i RepositoryCertificateHttpsArgs) ToRepositoryCertificateHttpsOutput() RepositoryCertificateHttpsOutput {
	return i.ToRepositoryCertificateHttpsOutputWithContext(context.Background())
}

func (i RepositoryCertificateHttpsArgs) ToRepositoryCertificateHttpsOutputWithContext(ctx context.Context) RepositoryCertificateHttpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateHttpsOutput)
}

func (i RepositoryCertificateHttpsArgs) ToRepositoryCertificateHttpsPtrOutput() RepositoryCertificateHttpsPtrOutput {
	return i.ToRepositoryCertificateHttpsPtrOutputWithContext(context.Background())
}

func (i RepositoryCertificateHttpsArgs) ToRepositoryCertificateHttpsPtrOutputWithContext(ctx context.Context) RepositoryCertificateHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateHttpsOutput).ToRepositoryCertificateHttpsPtrOutputWithContext(ctx)
}

// RepositoryCertificateHttpsPtrInput is an input type that accepts RepositoryCertificateHttpsArgs, RepositoryCertificateHttpsPtr and RepositoryCertificateHttpsPtrOutput values.
// You can construct a concrete instance of `RepositoryCertificateHttpsPtrInput` via:
//
//	        RepositoryCertificateHttpsArgs{...}
//
//	or:
//
//	        nil
type RepositoryCertificateHttpsPtrInput interface {
	pulumi.Input

	ToRepositoryCertificateHttpsPtrOutput() RepositoryCertificateHttpsPtrOutput
	ToRepositoryCertificateHttpsPtrOutputWithContext(context.Context) RepositoryCertificateHttpsPtrOutput
}

type repositoryCertificateHttpsPtrType RepositoryCertificateHttpsArgs

func RepositoryCertificateHttpsPtr(v *RepositoryCertificateHttpsArgs) RepositoryCertificateHttpsPtrInput {
	return (*repositoryCertificateHttpsPtrType)(v)
}

func (*repositoryCertificateHttpsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificateHttps)(nil)).Elem()
}

func (i *repositoryCertificateHttpsPtrType) ToRepositoryCertificateHttpsPtrOutput() RepositoryCertificateHttpsPtrOutput {
	return i.ToRepositoryCertificateHttpsPtrOutputWithContext(context.Background())
}

func (i *repositoryCertificateHttpsPtrType) ToRepositoryCertificateHttpsPtrOutputWithContext(ctx context.Context) RepositoryCertificateHttpsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateHttpsPtrOutput)
}

type RepositoryCertificateHttpsOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateHttpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCertificateHttps)(nil)).Elem()
}

func (o RepositoryCertificateHttpsOutput) ToRepositoryCertificateHttpsOutput() RepositoryCertificateHttpsOutput {
	return o
}

func (o RepositoryCertificateHttpsOutput) ToRepositoryCertificateHttpsOutputWithContext(ctx context.Context) RepositoryCertificateHttpsOutput {
	return o
}

func (o RepositoryCertificateHttpsOutput) ToRepositoryCertificateHttpsPtrOutput() RepositoryCertificateHttpsPtrOutput {
	return o.ToRepositoryCertificateHttpsPtrOutputWithContext(context.Background())
}

func (o RepositoryCertificateHttpsOutput) ToRepositoryCertificateHttpsPtrOutputWithContext(ctx context.Context) RepositoryCertificateHttpsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCertificateHttps) *RepositoryCertificateHttps {
		return &v
	}).(RepositoryCertificateHttpsPtrOutput)
}

// The actual certificate data, dependent on the certificate type.
func (o RepositoryCertificateHttpsOutput) CertData() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCertificateHttps) string { return v.CertData }).(pulumi.StringOutput)
}

// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
func (o RepositoryCertificateHttpsOutput) CertInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCertificateHttps) *string { return v.CertInfo }).(pulumi.StringPtrOutput)
}

// The sub type of the cert, i.e. `ssh-rsa`.
func (o RepositoryCertificateHttpsOutput) CertSubtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCertificateHttps) *string { return v.CertSubtype }).(pulumi.StringPtrOutput)
}

// DNS name of the server this certificate is intended for.
func (o RepositoryCertificateHttpsOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCertificateHttps) string { return v.ServerName }).(pulumi.StringOutput)
}

type RepositoryCertificateHttpsPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateHttpsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificateHttps)(nil)).Elem()
}

func (o RepositoryCertificateHttpsPtrOutput) ToRepositoryCertificateHttpsPtrOutput() RepositoryCertificateHttpsPtrOutput {
	return o
}

func (o RepositoryCertificateHttpsPtrOutput) ToRepositoryCertificateHttpsPtrOutputWithContext(ctx context.Context) RepositoryCertificateHttpsPtrOutput {
	return o
}

func (o RepositoryCertificateHttpsPtrOutput) Elem() RepositoryCertificateHttpsOutput {
	return o.ApplyT(func(v *RepositoryCertificateHttps) RepositoryCertificateHttps {
		if v != nil {
			return *v
		}
		var ret RepositoryCertificateHttps
		return ret
	}).(RepositoryCertificateHttpsOutput)
}

// The actual certificate data, dependent on the certificate type.
func (o RepositoryCertificateHttpsPtrOutput) CertData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateHttps) *string {
		if v == nil {
			return nil
		}
		return &v.CertData
	}).(pulumi.StringPtrOutput)
}

// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
func (o RepositoryCertificateHttpsPtrOutput) CertInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateHttps) *string {
		if v == nil {
			return nil
		}
		return v.CertInfo
	}).(pulumi.StringPtrOutput)
}

// The sub type of the cert, i.e. `ssh-rsa`.
func (o RepositoryCertificateHttpsPtrOutput) CertSubtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateHttps) *string {
		if v == nil {
			return nil
		}
		return v.CertSubtype
	}).(pulumi.StringPtrOutput)
}

// DNS name of the server this certificate is intended for.
func (o RepositoryCertificateHttpsPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateHttps) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

type RepositoryCertificateSsh struct {
	// The actual certificate data, dependent on the certificate type.
	CertData string `pulumi:"certData"`
	// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
	CertInfo *string `pulumi:"certInfo"`
	// The sub type of the cert, i.e. `ssh-rsa`.
	CertSubtype string `pulumi:"certSubtype"`
	// DNS name of the server this certificate is intended for.
	ServerName string `pulumi:"serverName"`
}

// RepositoryCertificateSshInput is an input type that accepts RepositoryCertificateSshArgs and RepositoryCertificateSshOutput values.
// You can construct a concrete instance of `RepositoryCertificateSshInput` via:
//
//	RepositoryCertificateSshArgs{...}
type RepositoryCertificateSshInput interface {
	pulumi.Input

	ToRepositoryCertificateSshOutput() RepositoryCertificateSshOutput
	ToRepositoryCertificateSshOutputWithContext(context.Context) RepositoryCertificateSshOutput
}

type RepositoryCertificateSshArgs struct {
	// The actual certificate data, dependent on the certificate type.
	CertData pulumi.StringInput `pulumi:"certData"`
	// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
	CertInfo pulumi.StringPtrInput `pulumi:"certInfo"`
	// The sub type of the cert, i.e. `ssh-rsa`.
	CertSubtype pulumi.StringInput `pulumi:"certSubtype"`
	// DNS name of the server this certificate is intended for.
	ServerName pulumi.StringInput `pulumi:"serverName"`
}

func (RepositoryCertificateSshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCertificateSsh)(nil)).Elem()
}

func (i RepositoryCertificateSshArgs) ToRepositoryCertificateSshOutput() RepositoryCertificateSshOutput {
	return i.ToRepositoryCertificateSshOutputWithContext(context.Background())
}

func (i RepositoryCertificateSshArgs) ToRepositoryCertificateSshOutputWithContext(ctx context.Context) RepositoryCertificateSshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateSshOutput)
}

func (i RepositoryCertificateSshArgs) ToRepositoryCertificateSshPtrOutput() RepositoryCertificateSshPtrOutput {
	return i.ToRepositoryCertificateSshPtrOutputWithContext(context.Background())
}

func (i RepositoryCertificateSshArgs) ToRepositoryCertificateSshPtrOutputWithContext(ctx context.Context) RepositoryCertificateSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateSshOutput).ToRepositoryCertificateSshPtrOutputWithContext(ctx)
}

// RepositoryCertificateSshPtrInput is an input type that accepts RepositoryCertificateSshArgs, RepositoryCertificateSshPtr and RepositoryCertificateSshPtrOutput values.
// You can construct a concrete instance of `RepositoryCertificateSshPtrInput` via:
//
//	        RepositoryCertificateSshArgs{...}
//
//	or:
//
//	        nil
type RepositoryCertificateSshPtrInput interface {
	pulumi.Input

	ToRepositoryCertificateSshPtrOutput() RepositoryCertificateSshPtrOutput
	ToRepositoryCertificateSshPtrOutputWithContext(context.Context) RepositoryCertificateSshPtrOutput
}

type repositoryCertificateSshPtrType RepositoryCertificateSshArgs

func RepositoryCertificateSshPtr(v *RepositoryCertificateSshArgs) RepositoryCertificateSshPtrInput {
	return (*repositoryCertificateSshPtrType)(v)
}

func (*repositoryCertificateSshPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificateSsh)(nil)).Elem()
}

func (i *repositoryCertificateSshPtrType) ToRepositoryCertificateSshPtrOutput() RepositoryCertificateSshPtrOutput {
	return i.ToRepositoryCertificateSshPtrOutputWithContext(context.Background())
}

func (i *repositoryCertificateSshPtrType) ToRepositoryCertificateSshPtrOutputWithContext(ctx context.Context) RepositoryCertificateSshPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoryCertificateSshPtrOutput)
}

type RepositoryCertificateSshOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateSshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoryCertificateSsh)(nil)).Elem()
}

func (o RepositoryCertificateSshOutput) ToRepositoryCertificateSshOutput() RepositoryCertificateSshOutput {
	return o
}

func (o RepositoryCertificateSshOutput) ToRepositoryCertificateSshOutputWithContext(ctx context.Context) RepositoryCertificateSshOutput {
	return o
}

func (o RepositoryCertificateSshOutput) ToRepositoryCertificateSshPtrOutput() RepositoryCertificateSshPtrOutput {
	return o.ToRepositoryCertificateSshPtrOutputWithContext(context.Background())
}

func (o RepositoryCertificateSshOutput) ToRepositoryCertificateSshPtrOutputWithContext(ctx context.Context) RepositoryCertificateSshPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RepositoryCertificateSsh) *RepositoryCertificateSsh {
		return &v
	}).(RepositoryCertificateSshPtrOutput)
}

// The actual certificate data, dependent on the certificate type.
func (o RepositoryCertificateSshOutput) CertData() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCertificateSsh) string { return v.CertData }).(pulumi.StringOutput)
}

// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
func (o RepositoryCertificateSshOutput) CertInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RepositoryCertificateSsh) *string { return v.CertInfo }).(pulumi.StringPtrOutput)
}

// The sub type of the cert, i.e. `ssh-rsa`.
func (o RepositoryCertificateSshOutput) CertSubtype() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCertificateSsh) string { return v.CertSubtype }).(pulumi.StringOutput)
}

// DNS name of the server this certificate is intended for.
func (o RepositoryCertificateSshOutput) ServerName() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoryCertificateSsh) string { return v.ServerName }).(pulumi.StringOutput)
}

type RepositoryCertificateSshPtrOutput struct{ *pulumi.OutputState }

func (RepositoryCertificateSshPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RepositoryCertificateSsh)(nil)).Elem()
}

func (o RepositoryCertificateSshPtrOutput) ToRepositoryCertificateSshPtrOutput() RepositoryCertificateSshPtrOutput {
	return o
}

func (o RepositoryCertificateSshPtrOutput) ToRepositoryCertificateSshPtrOutputWithContext(ctx context.Context) RepositoryCertificateSshPtrOutput {
	return o
}

func (o RepositoryCertificateSshPtrOutput) Elem() RepositoryCertificateSshOutput {
	return o.ApplyT(func(v *RepositoryCertificateSsh) RepositoryCertificateSsh {
		if v != nil {
			return *v
		}
		var ret RepositoryCertificateSsh
		return ret
	}).(RepositoryCertificateSshOutput)
}

// The actual certificate data, dependent on the certificate type.
func (o RepositoryCertificateSshPtrOutput) CertData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateSsh) *string {
		if v == nil {
			return nil
		}
		return &v.CertData
	}).(pulumi.StringPtrOutput)
}

// Additional certificate info, dependent on the certificate type (e.g. SSH fingerprint, X509 CommonName).
func (o RepositoryCertificateSshPtrOutput) CertInfo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateSsh) *string {
		if v == nil {
			return nil
		}
		return v.CertInfo
	}).(pulumi.StringPtrOutput)
}

// The sub type of the cert, i.e. `ssh-rsa`.
func (o RepositoryCertificateSshPtrOutput) CertSubtype() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateSsh) *string {
		if v == nil {
			return nil
		}
		return &v.CertSubtype
	}).(pulumi.StringPtrOutput)
}

// DNS name of the server this certificate is intended for.
func (o RepositoryCertificateSshPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RepositoryCertificateSsh) *string {
		if v == nil {
			return nil
		}
		return &v.ServerName
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMetadataInput)(nil)).Elem(), ClusterMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterMetadataArrayInput)(nil)).Elem(), ClusterMetadataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMetadataInput)(nil)).Elem(), ProjectMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMetadataPtrInput)(nil)).Elem(), ProjectMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecInput)(nil)).Elem(), ProjectSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecPtrInput)(nil)).Elem(), ProjectSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecClusterResourceBlacklistInput)(nil)).Elem(), ProjectSpecClusterResourceBlacklistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecClusterResourceBlacklistArrayInput)(nil)).Elem(), ProjectSpecClusterResourceBlacklistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecClusterResourceWhitelistInput)(nil)).Elem(), ProjectSpecClusterResourceWhitelistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecClusterResourceWhitelistArrayInput)(nil)).Elem(), ProjectSpecClusterResourceWhitelistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecDestinationInput)(nil)).Elem(), ProjectSpecDestinationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecDestinationArrayInput)(nil)).Elem(), ProjectSpecDestinationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecNamespaceResourceBlacklistInput)(nil)).Elem(), ProjectSpecNamespaceResourceBlacklistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecNamespaceResourceBlacklistArrayInput)(nil)).Elem(), ProjectSpecNamespaceResourceBlacklistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecNamespaceResourceWhitelistInput)(nil)).Elem(), ProjectSpecNamespaceResourceWhitelistArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecNamespaceResourceWhitelistArrayInput)(nil)).Elem(), ProjectSpecNamespaceResourceWhitelistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecOrphanedResourcesInput)(nil)).Elem(), ProjectSpecOrphanedResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecOrphanedResourcesPtrInput)(nil)).Elem(), ProjectSpecOrphanedResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecOrphanedResourcesIgnoreInput)(nil)).Elem(), ProjectSpecOrphanedResourcesIgnoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecOrphanedResourcesIgnoreArrayInput)(nil)).Elem(), ProjectSpecOrphanedResourcesIgnoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecRoleInput)(nil)).Elem(), ProjectSpecRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecRoleArrayInput)(nil)).Elem(), ProjectSpecRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecSyncWindowInput)(nil)).Elem(), ProjectSpecSyncWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectSpecSyncWindowArrayInput)(nil)).Elem(), ProjectSpecSyncWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderKubernetesInput)(nil)).Elem(), ProviderKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderKubernetesPtrInput)(nil)).Elem(), ProviderKubernetesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderKubernetesExecInput)(nil)).Elem(), ProviderKubernetesExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderKubernetesExecPtrInput)(nil)).Elem(), ProviderKubernetesExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateHttpsInput)(nil)).Elem(), RepositoryCertificateHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateHttpsPtrInput)(nil)).Elem(), RepositoryCertificateHttpsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateSshInput)(nil)).Elem(), RepositoryCertificateSshArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoryCertificateSshPtrInput)(nil)).Elem(), RepositoryCertificateSshArgs{})
	pulumi.RegisterOutputType(ClusterMetadataOutput{})
	pulumi.RegisterOutputType(ClusterMetadataArrayOutput{})
	pulumi.RegisterOutputType(ProjectMetadataOutput{})
	pulumi.RegisterOutputType(ProjectMetadataPtrOutput{})
	pulumi.RegisterOutputType(ProjectSpecOutput{})
	pulumi.RegisterOutputType(ProjectSpecPtrOutput{})
	pulumi.RegisterOutputType(ProjectSpecClusterResourceBlacklistOutput{})
	pulumi.RegisterOutputType(ProjectSpecClusterResourceBlacklistArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecClusterResourceWhitelistOutput{})
	pulumi.RegisterOutputType(ProjectSpecClusterResourceWhitelistArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecDestinationOutput{})
	pulumi.RegisterOutputType(ProjectSpecDestinationArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecNamespaceResourceBlacklistOutput{})
	pulumi.RegisterOutputType(ProjectSpecNamespaceResourceBlacklistArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecNamespaceResourceWhitelistOutput{})
	pulumi.RegisterOutputType(ProjectSpecNamespaceResourceWhitelistArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecOrphanedResourcesOutput{})
	pulumi.RegisterOutputType(ProjectSpecOrphanedResourcesPtrOutput{})
	pulumi.RegisterOutputType(ProjectSpecOrphanedResourcesIgnoreOutput{})
	pulumi.RegisterOutputType(ProjectSpecOrphanedResourcesIgnoreArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecRoleOutput{})
	pulumi.RegisterOutputType(ProjectSpecRoleArrayOutput{})
	pulumi.RegisterOutputType(ProjectSpecSyncWindowOutput{})
	pulumi.RegisterOutputType(ProjectSpecSyncWindowArrayOutput{})
	pulumi.RegisterOutputType(ProviderKubernetesOutput{})
	pulumi.RegisterOutputType(ProviderKubernetesPtrOutput{})
	pulumi.RegisterOutputType(ProviderKubernetesExecOutput{})
	pulumi.RegisterOutputType(ProviderKubernetesExecPtrOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateHttpsOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateHttpsPtrOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateSshOutput{})
	pulumi.RegisterOutputType(RepositoryCertificateSshPtrOutput{})
}
