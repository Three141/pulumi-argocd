// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/Three141/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [application sets](https://argo-cd.readthedocs.io/en/stable/user-guide/application-set/) within ArgoCD.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Three141/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Clusters Generator
//			_, err := argocd.NewApplicationSet(ctx, "clusters_selector", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("clusters-selector"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Clusters: argocd.ApplicationSetSpecGeneratorClusterArray{
//								&argocd.ApplicationSetSpecGeneratorClusterArgs{
//									Selector: &argocd.ApplicationSetSpecGeneratorClusterSelectorArgs{
//										MatchLabels: pulumi.StringMap{
//											"argocd.argoproj.io/secret-type": pulumi.String("cluster"),
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{name}}-clusters-selector"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argocd-example-apps/"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("guestbook"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{server}}"),
//								Namespace: pulumi.String("default"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Cluster Decision Resource Generator
//			_, err = argocd.NewApplicationSet(ctx, "cluster_decision_resource", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("cluster-decision-resource"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							ClusterDecisionResources: argocd.ApplicationSetSpecGeneratorClusterDecisionResourceArray{
//								&argocd.ApplicationSetSpecGeneratorClusterDecisionResourceArgs{
//									ConfigMapRef: pulumi.String("my-configmap"),
//									Name:         pulumi.String("quak"),
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{name}}-guestbook"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argocd-example-apps/"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("guestbook"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{server}}"),
//								Namespace: pulumi.String("default"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Git Generator - Directories
//			_, err = argocd.NewApplicationSet(ctx, "git_directories", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("git-directories"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Gits: argocd.ApplicationSetSpecGeneratorGitArray{
//								&argocd.ApplicationSetSpecGeneratorGitArgs{
//									RepoUrl:  pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									Revision: pulumi.String("HEAD"),
//									Directories: argocd.ApplicationSetSpecGeneratorGitDirectoryArray{
//										&argocd.ApplicationSetSpecGeneratorGitDirectoryArgs{
//											Path: pulumi.String("applicationset/examples/git-generator-directory/cluster-addons/*"),
//										},
//										&argocd.ApplicationSetSpecGeneratorGitDirectoryArgs{
//											Path:    pulumi.String("applicationset/examples/git-generator-directory/excludes/cluster-addons/exclude-helm-guestbook"),
//											Exclude: pulumi.Bool(true),
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{path.basename}}-git-directories"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("{{path}}"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("https://kubernetes.default.svc"),
//								Namespace: pulumi.String("{{path.basename}}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Git Generator - Files
//			_, err = argocd.NewApplicationSet(ctx, "git_files", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("git-files"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Gits: argocd.ApplicationSetSpecGeneratorGitArray{
//								&argocd.ApplicationSetSpecGeneratorGitArgs{
//									RepoUrl:  pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									Revision: pulumi.String("HEAD"),
//									Files: argocd.ApplicationSetSpecGeneratorGitFileArray{
//										&argocd.ApplicationSetSpecGeneratorGitFileArgs{
//											Path: pulumi.String("applicationset/examples/git-generator-files-discovery/cluster-config/**/config.json"),
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{cluster.name}}-git-files"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("applicationset/examples/git-generator-files-discovery/apps/guestbook"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{cluster.address}}"),
//								Namespace: pulumi.String("guestbook"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// List Generator
//			_, err = argocd.NewApplicationSet(ctx, "list", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("list"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Lists: argocd.ApplicationSetSpecGeneratorListArray{
//								&argocd.ApplicationSetSpecGeneratorListArgs{
//									Elements: pulumi.StringMapArray{
//										pulumi.StringMap{
//											"cluster": pulumi.String("engineering-dev"),
//											"url":     pulumi.String("https://kubernetes.default.svc"),
//										},
//										pulumi.StringMap{
//											"cluster": pulumi.String("engineering-prod"),
//											"url":     pulumi.String("https://kubernetes.default.svc"),
//											"foo":     pulumi.String("bar"),
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{cluster}}-guestbook"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("my-project"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("applicationset/examples/list-generator/guestbook/{{cluster}}"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{url}}"),
//								Namespace: pulumi.String("guestbook"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Matrix Generator
//			_, err = argocd.NewApplicationSet(ctx, "matrix", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("matrix"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Matrices: argocd.ApplicationSetSpecGeneratorMatrixArray{
//								&argocd.ApplicationSetSpecGeneratorMatrixArgs{
//									Generators: argocd.ApplicationSetSpecGeneratorMatrixGeneratorArray{
//										&argocd.ApplicationSetSpecGeneratorMatrixGeneratorArgs{
//											Gits: argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitArray{
//												&argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitArgs{
//													RepoUrl:  pulumi.String("https://github.com/argoproj/argo-cd.git"),
//													Revision: pulumi.String("HEAD"),
//													Directories: argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArray{
//														&argocd.ApplicationSetSpecGeneratorMatrixGeneratorGitDirectoryArgs{
//															Path: pulumi.String("applicationset/examples/matrix/cluster-addons/*"),
//														},
//													},
//												},
//											},
//										},
//										&argocd.ApplicationSetSpecGeneratorMatrixGeneratorArgs{
//											Clusters: argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterArray{
//												&argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterArgs{
//													Selector: &argocd.ApplicationSetSpecGeneratorMatrixGeneratorClusterSelectorArgs{
//														MatchLabels: pulumi.StringMap{
//															"argocd.argoproj.io/secret-type": pulumi.String("cluster"),
//														},
//													},
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{path.basename}}-{{name}}"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("default"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									TargetRevision: pulumi.String("HEAD"),
//									Path:           pulumi.String("{{path}}"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{server}}"),
//								Namespace: pulumi.String("{{path.basename}}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Merge Generator
//			_, err = argocd.NewApplicationSet(ctx, "merge", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("merge"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Merges: argocd.ApplicationSetSpecGeneratorMergeArray{
//								&argocd.ApplicationSetSpecGeneratorMergeArgs{
//									MergeKeys: pulumi.StringArray{
//										pulumi.String("server"),
//									},
//									Generators: argocd.ApplicationSetSpecGeneratorMergeGeneratorArray{
//										&argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{
//											Clusters: argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArray{
//												&argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs{
//													Values: pulumi.StringMap{
//														"kafka": pulumi.String("true"),
//														"redis": pulumi.String("false"),
//													},
//												},
//											},
//										},
//										&argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{
//											Clusters: argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArray{
//												&argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterArgs{
//													Selector: &argocd.ApplicationSetSpecGeneratorMergeGeneratorClusterSelectorArgs{
//														MatchLabels: pulumi.StringMap{
//															"use-kafka": pulumi.String("false"),
//														},
//													},
//													Values: pulumi.StringMap{
//														"kafka": pulumi.String("false"),
//													},
//												},
//											},
//										},
//										&argocd.ApplicationSetSpecGeneratorMergeGeneratorArgs{
//											Lists: argocd.ApplicationSetSpecGeneratorMergeGeneratorListArray{
//												&argocd.ApplicationSetSpecGeneratorMergeGeneratorListArgs{
//													Elements: pulumi.StringMapArray{
//														pulumi.StringMap{
//															"server":       pulumi.String("https://2.4.6.8"),
//															"values.redis": pulumi.String("true"),
//														},
//													},
//												},
//											},
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{name}}"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("default"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/argoproj/argo-cd.git"),
//									Path:           pulumi.String("app"),
//									TargetRevision: pulumi.String("HEAD"),
//									Helm: &argocd.ApplicationSetSpecTemplateSpecSourceHelmArgs{
//										Parameters: argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArray{
//											&argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{
//												Name:  pulumi.String("kafka"),
//												Value: pulumi.String("{{values.kafka}}"),
//											},
//											&argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{
//												Name:  pulumi.String("redis"),
//												Value: pulumi.String("{{values.redis}}"),
//											},
//										},
//									},
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{server}}"),
//								Namespace: pulumi.String("default"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Pull Request Generator - GitHub
//			_, err = argocd.NewApplicationSet(ctx, "pr_github", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("pr-github"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							PullRequests: argocd.ApplicationSetSpecGeneratorPullRequestArray{
//								&argocd.ApplicationSetSpecGeneratorPullRequestArgs{
//									Github: &argocd.ApplicationSetSpecGeneratorPullRequestGithubArgs{
//										Api:           pulumi.String("https://git.example.com/"),
//										Owner:         pulumi.String("myorg"),
//										Repo:          pulumi.String("myrepository"),
//										AppSecretName: pulumi.String("github-app-repo-creds"),
//										TokenRef: &argocd.ApplicationSetSpecGeneratorPullRequestGithubTokenRefArgs{
//											SecretName: pulumi.String("github-token"),
//											Key:        pulumi.String("token"),
//										},
//										Labels: pulumi.StringArray{
//											pulumi.String("preview"),
//										},
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("myapp-{{branch}}-{{number}}"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("default"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/myorg/myrepo.git"),
//									Path:           pulumi.String("kubernetes/"),
//									TargetRevision: pulumi.String("{{head_sha}}"),
//									Helm: &argocd.ApplicationSetSpecTemplateSpecSourceHelmArgs{
//										Parameters: argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArray{
//											&argocd.ApplicationSetSpecTemplateSpecSourceHelmParameterArgs{
//												Name:  pulumi.String("image.tag"),
//												Value: pulumi.String("pull-{{head_sha}}"),
//											},
//										},
//									},
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("https://kubernetes.default.svc"),
//								Namespace: pulumi.String("default"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// SCM Provider Generator - GitHub
//			_, err = argocd.NewApplicationSet(ctx, "scm_github", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("scm-github"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							ScmProviders: argocd.ApplicationSetSpecGeneratorScmProviderArray{
//								&argocd.ApplicationSetSpecGeneratorScmProviderArgs{
//									Github: &argocd.ApplicationSetSpecGeneratorScmProviderGithubArgs{
//										AppSecretName: pulumi.String("gh-app-repo-creds"),
//										Organization:  pulumi.String("myorg"),
//									},
//								},
//							},
//						},
//					},
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{repository}}"),
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("default"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("{{url}}"),
//									Path:           pulumi.String("kubernetes/"),
//									TargetRevision: pulumi.String("{{branch}}"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("https://kubernetes.default.svc"),
//								Namespace: pulumi.String("default"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Progressive Sync - Rolling Update
//			_, err = argocd.NewApplicationSet(ctx, "progressive_sync", &argocd.ApplicationSetArgs{
//				Metadata: &argocd.ApplicationSetMetadataArgs{
//					Name: pulumi.String("progressive-sync"),
//				},
//				Spec: &argocd.ApplicationSetSpecArgs{
//					Generators: argocd.ApplicationSetSpecGeneratorArray{
//						&argocd.ApplicationSetSpecGeneratorArgs{
//							Lists: argocd.ApplicationSetSpecGeneratorListArray{
//								&argocd.ApplicationSetSpecGeneratorListArgs{
//									Elements: pulumi.StringMapArray{
//										pulumi.StringMap{
//											"cluster": pulumi.String("engineering-dev"),
//											"url":     pulumi.String("https://1.2.3.4"),
//											"env":     pulumi.String("env-dev"),
//										},
//										pulumi.StringMap{
//											"cluster": pulumi.String("engineering-qa"),
//											"url":     pulumi.String("https://2.4.6.8"),
//											"env":     pulumi.String("env-qa"),
//										},
//										pulumi.StringMap{
//											"cluster": pulumi.String("engineering-prod"),
//											"url":     pulumi.String("https://9.8.7.6/"),
//											"env":     pulumi.String("env-prod"),
//										},
//									},
//								},
//							},
//						},
//					},
//					Strategy: &argocd.ApplicationSetSpecStrategyArgs{
//						Type: pulumi.String("RollingSync"),
//						RollingSyncs: argocd.ApplicationSetSpecStrategyRollingSyncArray{
//							&argocd.ApplicationSetSpecStrategyRollingSyncArgs{
//								Steps: argocd.ApplicationSetSpecStrategyRollingSyncStepArray{
//									&argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{
//										MatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{
//											&argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{
//												Key:      pulumi.String("envLabel"),
//												Operator: pulumi.String("In"),
//												Values: pulumi.StringArray{
//													pulumi.String("env-dev"),
//												},
//											},
//										},
//									},
//									&argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{
//										MatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{
//											&argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{
//												Key:      pulumi.String("envLabel"),
//												Operator: pulumi.String("In"),
//												Values: pulumi.StringArray{
//													pulumi.String("env-qa"),
//												},
//											},
//										},
//										MaxUpdate: pulumi.String("0"),
//									},
//									&argocd.ApplicationSetSpecStrategyRollingSyncStepArgs{
//										MatchExpressions: argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArray{
//											&argocd.ApplicationSetSpecStrategyRollingSyncStepMatchExpressionArgs{
//												Key:      pulumi.String("envLabel"),
//												Operator: pulumi.String("In"),
//												Values: pulumi.StringArray{
//													pulumi.String("env-prod"),
//												},
//											},
//										},
//										MaxUpdate: pulumi.String("10%"),
//									},
//								},
//							},
//						},
//					},
//					GoTemplate: pulumi.Bool(true),
//					Template: &argocd.ApplicationSetSpecTemplateArgs{
//						Metadata: &argocd.ApplicationSetSpecTemplateMetadataArgs{
//							Name: pulumi.String("{{.cluster}}-guestbook"),
//							Labels: pulumi.StringMap{
//								"envLabel": pulumi.String("{{.env}}"),
//							},
//						},
//						Spec: &argocd.ApplicationSetSpecTemplateSpecArgs{
//							Project: pulumi.String("default"),
//							Sources: argocd.ApplicationSetSpecTemplateSpecSourceArray{
//								&argocd.ApplicationSetSpecTemplateSpecSourceArgs{
//									RepoUrl:        pulumi.String("https://github.com/infra-team/cluster-deployments.git"),
//									Path:           pulumi.String("guestbook/{{.cluster}}"),
//									TargetRevision: pulumi.String("HEAD"),
//								},
//							},
//							Destination: &argocd.ApplicationSetSpecTemplateSpecDestinationArgs{
//								Server:    pulumi.String("{{.url}}"),
//								Namespace: pulumi.String("guestbook"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ApplicationSet struct {
	pulumi.CustomResourceState

	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ApplicationSetMetadataOutput `pulumi:"metadata"`
	// ArgoCD application set resource spec.
	Spec ApplicationSetSpecOutput `pulumi:"spec"`
}

// NewApplicationSet registers a new resource with the given unique name, arguments, and options.
func NewApplicationSet(ctx *pulumi.Context,
	name string, args *ApplicationSetArgs, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationSet
	err := ctx.RegisterResource("argocd:index/applicationSet:ApplicationSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationSet gets an existing ApplicationSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationSetState, opts ...pulumi.ResourceOption) (*ApplicationSet, error) {
	var resource ApplicationSet
	err := ctx.ReadResource("argocd:index/applicationSet:ApplicationSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationSet resources.
type applicationSetState struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata *ApplicationSetMetadata `pulumi:"metadata"`
	// ArgoCD application set resource spec.
	Spec *ApplicationSetSpec `pulumi:"spec"`
}

type ApplicationSetState struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ApplicationSetMetadataPtrInput
	// ArgoCD application set resource spec.
	Spec ApplicationSetSpecPtrInput
}

func (ApplicationSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetState)(nil)).Elem()
}

type applicationSetArgs struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ApplicationSetMetadata `pulumi:"metadata"`
	// ArgoCD application set resource spec.
	Spec ApplicationSetSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ApplicationSet resource.
type ApplicationSetArgs struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ApplicationSetMetadataInput
	// ArgoCD application set resource spec.
	Spec ApplicationSetSpecInput
}

func (ApplicationSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationSetArgs)(nil)).Elem()
}

type ApplicationSetInput interface {
	pulumi.Input

	ToApplicationSetOutput() ApplicationSetOutput
	ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput
}

func (*ApplicationSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (i *ApplicationSet) ToApplicationSetOutput() ApplicationSetOutput {
	return i.ToApplicationSetOutputWithContext(context.Background())
}

func (i *ApplicationSet) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetOutput)
}

// ApplicationSetArrayInput is an input type that accepts ApplicationSetArray and ApplicationSetArrayOutput values.
// You can construct a concrete instance of `ApplicationSetArrayInput` via:
//
//	ApplicationSetArray{ ApplicationSetArgs{...} }
type ApplicationSetArrayInput interface {
	pulumi.Input

	ToApplicationSetArrayOutput() ApplicationSetArrayOutput
	ToApplicationSetArrayOutputWithContext(context.Context) ApplicationSetArrayOutput
}

type ApplicationSetArray []ApplicationSetInput

func (ApplicationSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetArray) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return i.ToApplicationSetArrayOutputWithContext(context.Background())
}

func (i ApplicationSetArray) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetArrayOutput)
}

// ApplicationSetMapInput is an input type that accepts ApplicationSetMap and ApplicationSetMapOutput values.
// You can construct a concrete instance of `ApplicationSetMapInput` via:
//
//	ApplicationSetMap{ "key": ApplicationSetArgs{...} }
type ApplicationSetMapInput interface {
	pulumi.Input

	ToApplicationSetMapOutput() ApplicationSetMapOutput
	ToApplicationSetMapOutputWithContext(context.Context) ApplicationSetMapOutput
}

type ApplicationSetMap map[string]ApplicationSetInput

func (ApplicationSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (i ApplicationSetMap) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return i.ToApplicationSetMapOutputWithContext(context.Background())
}

func (i ApplicationSetMap) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationSetMapOutput)
}

type ApplicationSetOutput struct{ *pulumi.OutputState }

func (ApplicationSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetOutput) ToApplicationSetOutput() ApplicationSetOutput {
	return o
}

func (o ApplicationSetOutput) ToApplicationSetOutputWithContext(ctx context.Context) ApplicationSetOutput {
	return o
}

// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
func (o ApplicationSetOutput) Metadata() ApplicationSetMetadataOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetMetadataOutput { return v.Metadata }).(ApplicationSetMetadataOutput)
}

// ArgoCD application set resource spec.
func (o ApplicationSetOutput) Spec() ApplicationSetSpecOutput {
	return o.ApplyT(func(v *ApplicationSet) ApplicationSetSpecOutput { return v.Spec }).(ApplicationSetSpecOutput)
}

type ApplicationSetArrayOutput struct{ *pulumi.OutputState }

func (ApplicationSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutput() ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) ToApplicationSetArrayOutputWithContext(ctx context.Context) ApplicationSetArrayOutput {
	return o
}

func (o ApplicationSetArrayOutput) Index(i pulumi.IntInput) ApplicationSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].([]*ApplicationSet)[vs[1].(int)]
	}).(ApplicationSetOutput)
}

type ApplicationSetMapOutput struct{ *pulumi.OutputState }

func (ApplicationSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationSet)(nil)).Elem()
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutput() ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) ToApplicationSetMapOutputWithContext(ctx context.Context) ApplicationSetMapOutput {
	return o
}

func (o ApplicationSetMapOutput) MapIndex(k pulumi.StringInput) ApplicationSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationSet {
		return vs[0].(map[string]*ApplicationSet)[vs[1].(string)]
	}).(ApplicationSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetInput)(nil)).Elem(), &ApplicationSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetArrayInput)(nil)).Elem(), ApplicationSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationSetMapInput)(nil)).Elem(), ApplicationSetMap{})
	pulumi.RegisterOutputType(ApplicationSetOutput{})
	pulumi.RegisterOutputType(ApplicationSetArrayOutput{})
	pulumi.RegisterOutputType(ApplicationSetMapOutput{})
}
