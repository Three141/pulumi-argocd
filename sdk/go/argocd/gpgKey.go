// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/Three141/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [GPG keys](https://argo-cd.readthedocs.io/en/stable/user-guide/gpg-verification/) within ArgoCD.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Three141/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewGpgKey(ctx, "this", &argocd.GpgKeyArgs{
//				PublicKey: pulumi.String(`-----BEGIN PGP PUBLIC KEY BLOCK-----
//
// mQINBGSJdlcBEACnza+KvWLyKWUHJPhgs//HRL0EEmA/EcFKioBlrgPNYf/O7hNg
// KT3NDaNrD26pr+bOb4mfaqNNS9no8b9EP3C7Co3Wf2d4xpJ5/hlpIm3V652S5daZ
// I7ylVT8QOrhaqEnHH2hEcOfDaqjrYfrx3qiI8v7DmV6jfGi1tDUUgfJwiOyZk4q1
// jiPo5k4+XNp9mCtUAGyidLFcUqQ9XbHKgBwgAoxtIKNSbdPCGhsjgTHHhzswMH/Z
// DhhtcraqrfOhoP9lI4/zyCS+B9OfUy7BS/1SqWKIgdsjFIR+zHIOI69lh77+ZAVE
// MVYJBdFke5/g/tTPaQGuBqaIJ3d/Mi/ZlbTsoBcq5qam73uh7fcgBV5la6NeuNcR
// tvKMVl4DlnkJS8LBtElLEeHEylTCdNltrUFwshDKDBtq6ilTKCK14R6g4lkn8VcE
// 9xx7Mhdh77tp66FRZ6ge1E8EUEFwEeFhp240KRyaA5U1/kAarn8083zZ7d4+QObp
// L4KMqgrwLaxyPLgu0J/f946qLewV7XsbZRXE1jQa9Z7W5TEoJwjcC79DXe1wChc6
// cBfCtluDsnklwvldpKTEZU0q/hKE6Zt7NjLUyExV+5guoHllxoVxx7sh+jtKm/J+
// 5gh+B3xOTDxRV2XYIx1TM6U1iLxAqchzFec8dfkuTbs/5f++PrddvZfiUQARAQAB
// tD1BcmdvQ0QgVGVycmFmb3JtIFByb3ZpZGVyIDxmYWtldXNlckB1c2Vycy5ub3Jl
// cGx5LmdpdGh1Yi5jb20+iQJOBBMBCgA4FiEEvK9bNlncXDhFAk6kmtkpVUAdOI0F
// AmSJdlcCGwMFCwkIBwIGFQoJCAsCBBYCAwECHgECF4AACgkQmtkpVUAdOI2FdA//
// YuFYsX6SUVgI4l68ZHE34jLTWU5R2ujB6luErcguAlLyDtrD3melva3V/ETc69/1
// 5o7Ayn3a7uz5lCEvUSLsCN+V2o3EjrA81pt8Zs+Z9WYeZE5F5DnKzq81PObdASB7
// Po2X0qLqqKIhpQxc/E7m26xmePCf82H36gtvPiEVmVA5yduk1lLG3aZtNIRCa4VK
// gmDjR8Se+OZeAw7JQCOeJB9/Y8oQ8nVkj1SWNIICaUwIXHtrj7r1z6XTDAEkGeBg
// HXW8IEhZDE1Nq3vQtZvgwftEoPT/Ff+8DwvL1JUov2ObQDolallzKaiiVfGZhPJZ
// 4PMtEPEmSL9QWJAG5jiBVC3BdVZtXBNkC1HqTCXwZc/wzp5O9MmMXmCrUFr4FfHu
// IZ560MNpp/SrtUrOahLmvuG0B+Ze96e2nm5ap5wkCDaQouOIqM7Lj+FGq64cu2B/
// oSsl7joBZQUYXv8meNOQssm6jArRLG2oFoiEdRqzd2/RjvvJliLN9OCNvV43f38h
// 8Ep8RDi9RiHhSKvwrvDD9x/JRm6zQUetjrctmjdIYp8k129LrD0Qr9ULXfphZdrv
// xga7/lyQLmukLu7Mxwp+ss2bY/wjT8mlT5P55kBpXXyYILhLsUESCHG6D8/Ov+vv
// OoZS+BSfe/0vc1aTfDKxj5wAx27a6z5o25X27feEl3U=
// =kqkH
// -----END PGP PUBLIC KEY BLOCK-----
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// GPG Keys can be imported using the key ID.
//
// Example:
//
// ```sh
// $ pulumi import argocd:index/gpgKey:GpgKey this 9AD92955401D388D
// ```
type GpgKey struct {
	pulumi.CustomResourceState

	// Fingerprint is the fingerprint of the key
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// Owner holds the owner identification, e.g. a name and e-mail address
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Raw key data of the GPG key to create
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// SubType holds the key's sub type (e.g. rsa4096)
	SubType pulumi.StringOutput `pulumi:"subType"`
	// Trust holds the level of trust assigned to this key
	Trust pulumi.StringOutput `pulumi:"trust"`
}

// NewGpgKey registers a new resource with the given unique name, arguments, and options.
func NewGpgKey(ctx *pulumi.Context,
	name string, args *GpgKeyArgs, opts ...pulumi.ResourceOption) (*GpgKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GpgKey
	err := ctx.RegisterResource("argocd:index/gpgKey:GpgKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGpgKey gets an existing GpgKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGpgKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GpgKeyState, opts ...pulumi.ResourceOption) (*GpgKey, error) {
	var resource GpgKey
	err := ctx.ReadResource("argocd:index/gpgKey:GpgKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GpgKey resources.
type gpgKeyState struct {
	// Fingerprint is the fingerprint of the key
	Fingerprint *string `pulumi:"fingerprint"`
	// Owner holds the owner identification, e.g. a name and e-mail address
	Owner *string `pulumi:"owner"`
	// Raw key data of the GPG key to create
	PublicKey *string `pulumi:"publicKey"`
	// SubType holds the key's sub type (e.g. rsa4096)
	SubType *string `pulumi:"subType"`
	// Trust holds the level of trust assigned to this key
	Trust *string `pulumi:"trust"`
}

type GpgKeyState struct {
	// Fingerprint is the fingerprint of the key
	Fingerprint pulumi.StringPtrInput
	// Owner holds the owner identification, e.g. a name and e-mail address
	Owner pulumi.StringPtrInput
	// Raw key data of the GPG key to create
	PublicKey pulumi.StringPtrInput
	// SubType holds the key's sub type (e.g. rsa4096)
	SubType pulumi.StringPtrInput
	// Trust holds the level of trust assigned to this key
	Trust pulumi.StringPtrInput
}

func (GpgKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*gpgKeyState)(nil)).Elem()
}

type gpgKeyArgs struct {
	// Raw key data of the GPG key to create
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a GpgKey resource.
type GpgKeyArgs struct {
	// Raw key data of the GPG key to create
	PublicKey pulumi.StringInput
}

func (GpgKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gpgKeyArgs)(nil)).Elem()
}

type GpgKeyInput interface {
	pulumi.Input

	ToGpgKeyOutput() GpgKeyOutput
	ToGpgKeyOutputWithContext(ctx context.Context) GpgKeyOutput
}

func (*GpgKey) ElementType() reflect.Type {
	return reflect.TypeOf((**GpgKey)(nil)).Elem()
}

func (i *GpgKey) ToGpgKeyOutput() GpgKeyOutput {
	return i.ToGpgKeyOutputWithContext(context.Background())
}

func (i *GpgKey) ToGpgKeyOutputWithContext(ctx context.Context) GpgKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpgKeyOutput)
}

// GpgKeyArrayInput is an input type that accepts GpgKeyArray and GpgKeyArrayOutput values.
// You can construct a concrete instance of `GpgKeyArrayInput` via:
//
//	GpgKeyArray{ GpgKeyArgs{...} }
type GpgKeyArrayInput interface {
	pulumi.Input

	ToGpgKeyArrayOutput() GpgKeyArrayOutput
	ToGpgKeyArrayOutputWithContext(context.Context) GpgKeyArrayOutput
}

type GpgKeyArray []GpgKeyInput

func (GpgKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GpgKey)(nil)).Elem()
}

func (i GpgKeyArray) ToGpgKeyArrayOutput() GpgKeyArrayOutput {
	return i.ToGpgKeyArrayOutputWithContext(context.Background())
}

func (i GpgKeyArray) ToGpgKeyArrayOutputWithContext(ctx context.Context) GpgKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpgKeyArrayOutput)
}

// GpgKeyMapInput is an input type that accepts GpgKeyMap and GpgKeyMapOutput values.
// You can construct a concrete instance of `GpgKeyMapInput` via:
//
//	GpgKeyMap{ "key": GpgKeyArgs{...} }
type GpgKeyMapInput interface {
	pulumi.Input

	ToGpgKeyMapOutput() GpgKeyMapOutput
	ToGpgKeyMapOutputWithContext(context.Context) GpgKeyMapOutput
}

type GpgKeyMap map[string]GpgKeyInput

func (GpgKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GpgKey)(nil)).Elem()
}

func (i GpgKeyMap) ToGpgKeyMapOutput() GpgKeyMapOutput {
	return i.ToGpgKeyMapOutputWithContext(context.Background())
}

func (i GpgKeyMap) ToGpgKeyMapOutputWithContext(ctx context.Context) GpgKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpgKeyMapOutput)
}

type GpgKeyOutput struct{ *pulumi.OutputState }

func (GpgKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpgKey)(nil)).Elem()
}

func (o GpgKeyOutput) ToGpgKeyOutput() GpgKeyOutput {
	return o
}

func (o GpgKeyOutput) ToGpgKeyOutputWithContext(ctx context.Context) GpgKeyOutput {
	return o
}

// Fingerprint is the fingerprint of the key
func (o GpgKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v *GpgKey) pulumi.StringOutput { return v.Fingerprint }).(pulumi.StringOutput)
}

// Owner holds the owner identification, e.g. a name and e-mail address
func (o GpgKeyOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *GpgKey) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Raw key data of the GPG key to create
func (o GpgKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *GpgKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// SubType holds the key's sub type (e.g. rsa4096)
func (o GpgKeyOutput) SubType() pulumi.StringOutput {
	return o.ApplyT(func(v *GpgKey) pulumi.StringOutput { return v.SubType }).(pulumi.StringOutput)
}

// Trust holds the level of trust assigned to this key
func (o GpgKeyOutput) Trust() pulumi.StringOutput {
	return o.ApplyT(func(v *GpgKey) pulumi.StringOutput { return v.Trust }).(pulumi.StringOutput)
}

type GpgKeyArrayOutput struct{ *pulumi.OutputState }

func (GpgKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GpgKey)(nil)).Elem()
}

func (o GpgKeyArrayOutput) ToGpgKeyArrayOutput() GpgKeyArrayOutput {
	return o
}

func (o GpgKeyArrayOutput) ToGpgKeyArrayOutputWithContext(ctx context.Context) GpgKeyArrayOutput {
	return o
}

func (o GpgKeyArrayOutput) Index(i pulumi.IntInput) GpgKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GpgKey {
		return vs[0].([]*GpgKey)[vs[1].(int)]
	}).(GpgKeyOutput)
}

type GpgKeyMapOutput struct{ *pulumi.OutputState }

func (GpgKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GpgKey)(nil)).Elem()
}

func (o GpgKeyMapOutput) ToGpgKeyMapOutput() GpgKeyMapOutput {
	return o
}

func (o GpgKeyMapOutput) ToGpgKeyMapOutputWithContext(ctx context.Context) GpgKeyMapOutput {
	return o
}

func (o GpgKeyMapOutput) MapIndex(k pulumi.StringInput) GpgKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GpgKey {
		return vs[0].(map[string]*GpgKey)[vs[1].(string)]
	}).(GpgKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GpgKeyInput)(nil)).Elem(), &GpgKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*GpgKeyArrayInput)(nil)).Elem(), GpgKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GpgKeyMapInput)(nil)).Elem(), GpgKeyMap{})
	pulumi.RegisterOutputType(GpgKeyOutput{})
	pulumi.RegisterOutputType(GpgKeyArrayOutput{})
	pulumi.RegisterOutputType(GpgKeyMapOutput{})
}
