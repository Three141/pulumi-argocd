// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package argocd

import (
	"context"
	"reflect"

	"errors"
	"github.com/Three141/pulumi-argocd/sdk/go/argocd/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages [projects](https://argo-cd.readthedocs.io/en/stable/user-guide/projects/) within ArgoCD.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/Three141/pulumi-argocd/sdk/go/argocd"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := argocd.NewProject(ctx, "myproject", &argocd.ProjectArgs{
//				Metadata: &argocd.ProjectMetadataArgs{
//					Name:      pulumi.String("myproject"),
//					Namespace: pulumi.String("argocd"),
//					Labels: pulumi.StringMap{
//						"acceptance": pulumi.String("true"),
//					},
//					Annotations: pulumi.StringMap{
//						"this.is.a.really.long.nested.key": pulumi.String("yes, really!"),
//					},
//				},
//				Spec: &argocd.ProjectSpecArgs{
//					Description: pulumi.String("simple project"),
//					SourceNamespaces: pulumi.StringArray{
//						pulumi.String("argocd"),
//					},
//					SourceRepos: pulumi.StringArray{
//						pulumi.String("*"),
//					},
//					Destinations: argocd.ProjectSpecDestinationArray{
//						&argocd.ProjectSpecDestinationArgs{
//							Server:    pulumi.String("https://kubernetes.default.svc"),
//							Namespace: pulumi.String("default"),
//						},
//						&argocd.ProjectSpecDestinationArgs{
//							Server:    pulumi.String("https://kubernetes.default.svc"),
//							Namespace: pulumi.String("foo"),
//						},
//						&argocd.ProjectSpecDestinationArgs{
//							Name:      pulumi.String("anothercluster"),
//							Namespace: pulumi.String("bar"),
//						},
//					},
//					ClusterResourceBlacklists: argocd.ProjectSpecClusterResourceBlacklistArray{
//						&argocd.ProjectSpecClusterResourceBlacklistArgs{
//							Group: pulumi.String("*"),
//							Kind:  pulumi.String("*"),
//						},
//					},
//					ClusterResourceWhitelists: argocd.ProjectSpecClusterResourceWhitelistArray{
//						&argocd.ProjectSpecClusterResourceWhitelistArgs{
//							Group: pulumi.String("rbac.authorization.k8s.io"),
//							Kind:  pulumi.String("ClusterRoleBinding"),
//						},
//						&argocd.ProjectSpecClusterResourceWhitelistArgs{
//							Group: pulumi.String("rbac.authorization.k8s.io"),
//							Kind:  pulumi.String("ClusterRole"),
//						},
//					},
//					NamespaceResourceBlacklists: argocd.ProjectSpecNamespaceResourceBlacklistArray{
//						&argocd.ProjectSpecNamespaceResourceBlacklistArgs{
//							Group: pulumi.String("networking.k8s.io"),
//							Kind:  pulumi.String("Ingress"),
//						},
//					},
//					NamespaceResourceWhitelists: argocd.ProjectSpecNamespaceResourceWhitelistArray{
//						&argocd.ProjectSpecNamespaceResourceWhitelistArgs{
//							Group: pulumi.String("*"),
//							Kind:  pulumi.String("*"),
//						},
//					},
//					OrphanedResources: &argocd.ProjectSpecOrphanedResourcesArgs{
//						Warn: pulumi.Bool(true),
//						Ignores: argocd.ProjectSpecOrphanedResourcesIgnoreArray{
//							&argocd.ProjectSpecOrphanedResourcesIgnoreArgs{
//								Group: pulumi.String("apps/v1"),
//								Kind:  pulumi.String("Deployment"),
//								Name:  pulumi.String("ignored1"),
//							},
//							&argocd.ProjectSpecOrphanedResourcesIgnoreArgs{
//								Group: pulumi.String("apps/v1"),
//								Kind:  pulumi.String("Deployment"),
//								Name:  pulumi.String("ignored2"),
//							},
//						},
//					},
//					Roles: argocd.ProjectSpecRoleArray{
//						&argocd.ProjectSpecRoleArgs{
//							Name: pulumi.String("testrole"),
//							Policies: pulumi.StringArray{
//								pulumi.String("p, proj:myproject:testrole, applications, override, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, applications, sync, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, clusters, get, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, repositories, create, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, repositories, delete, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, repositories, update, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, logs, get, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, exec, create, myproject/*, allow"),
//							},
//						},
//						&argocd.ProjectSpecRoleArgs{
//							Name: pulumi.String("anotherrole"),
//							Policies: pulumi.StringArray{
//								pulumi.String("p, proj:myproject:testrole, applications, get, myproject/*, allow"),
//								pulumi.String("p, proj:myproject:testrole, applications, sync, myproject/*, deny"),
//							},
//						},
//					},
//					SyncWindows: argocd.ProjectSpecSyncWindowArray{
//						&argocd.ProjectSpecSyncWindowArgs{
//							Kind: pulumi.String("allow"),
//							Applications: pulumi.StringArray{
//								pulumi.String("api-*"),
//							},
//							Clusters: pulumi.StringArray{
//								pulumi.String("*"),
//							},
//							Namespaces: pulumi.StringArray{
//								pulumi.String("*"),
//							},
//							Duration:   pulumi.String("3600s"),
//							Schedule:   pulumi.String("10 1 * * *"),
//							ManualSync: pulumi.Bool(true),
//						},
//						&argocd.ProjectSpecSyncWindowArgs{
//							Kind: pulumi.String("deny"),
//							Applications: pulumi.StringArray{
//								pulumi.String("foo"),
//							},
//							Clusters: pulumi.StringArray{
//								pulumi.String("in-cluster"),
//							},
//							Namespaces: pulumi.StringArray{
//								pulumi.String("default"),
//							},
//							Duration:   pulumi.String("12h"),
//							Schedule:   pulumi.String("22 1 5 * *"),
//							ManualSync: pulumi.Bool(false),
//							Timezone:   pulumi.String("Europe/London"),
//						},
//					},
//					SignatureKeys: pulumi.StringArray{
//						pulumi.String("4AEE18F83AFDEB23"),
//						pulumi.String("07E34825A909B250"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Projects can be imported using the project name.
//
// Example:
//
// ```sh
// $ pulumi import argocd:index/project:Project myproject myproject
// ```
type Project struct {
	pulumi.CustomResourceState

	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ProjectMetadataOutput `pulumi:"metadata"`
	// ArgoCD AppProject spec.
	Spec ProjectSpecOutput `pulumi:"spec"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Metadata == nil {
		return nil, errors.New("invalid value for required argument 'Metadata'")
	}
	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("argocd:index/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("argocd:index/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata *ProjectMetadata `pulumi:"metadata"`
	// ArgoCD AppProject spec.
	Spec *ProjectSpec `pulumi:"spec"`
}

type ProjectState struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ProjectMetadataPtrInput
	// ArgoCD AppProject spec.
	Spec ProjectSpecPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ProjectMetadata `pulumi:"metadata"`
	// ArgoCD AppProject spec.
	Spec ProjectSpec `pulumi:"spec"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
	Metadata ProjectMetadataInput
	// ArgoCD AppProject spec.
	Spec ProjectSpecInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// Standard Kubernetes object metadata. For more info see the [Kubernetes reference](https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#metadata).
func (o ProjectOutput) Metadata() ProjectMetadataOutput {
	return o.ApplyT(func(v *Project) ProjectMetadataOutput { return v.Metadata }).(ProjectMetadataOutput)
}

// ArgoCD AppProject spec.
func (o ProjectOutput) Spec() ProjectSpecOutput {
	return o.ApplyT(func(v *Project) ProjectSpecOutput { return v.Spec }).(ProjectSpecOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
